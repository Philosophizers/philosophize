{"ast":null,"code":"var _jsxFileName = \"/Users/yosephlatif/Desktop/philosophize/react-app/src/components/Topics/TopicList.js\",\n  _s = $RefreshSig$();\n// import React, { useState, useEffect } from 'react';\n// import Topic from './Topic';\n\n// const TopicList = () => {\n//     const [topics, setTopics] = useState([]);\n\n//     useEffect(() => {\n//       const fetchTopics = async () => {\n//         try {\n//           const response = await fetch('/api/topics'); // Adjust the URL based on your API endpoint\n//           if (!response.ok) throw new Error('Network response was not ok');\n//           const data = await response.json();\n//           setTopics(data); // Make sure the key matches what your backend sends\n//         } catch (error) {\n//           console.error('Error fetching topics:', error);\n//         }\n//       };\n\n//       fetchTopics();\n//     }, []);\n\n//     return (\n//         <div>\n//           <h1>Topics</h1>\n//           <ul>\n//             {topics.length > 0 ? (\n//               topics.map(topic => (\n//                 <Topic key={topic.id} topic={topic} />\n//               ))\n//             ) : (\n//               <p>Loading topics...</p>\n//             )}\n//           </ul>\n//         </div>\n//       );\n\n//     };\n\n// export default TopicList;\n\n// import React, { useState, useEffect } from 'react';\n// import { useDispatch } from 'react-redux';\n// import Topic from './Topic';\n// import TopicForm from './TopicForm';\n// import { addTopic } from '../../store/topics';\n\n// const TopicList = () => {\n//   const [topics, setTopics] = useState([]);\n//   const [showForm, setShowForm] = useState(false);\n//   const [editingTopic, setEditingTopic] = useState(null);\n\n//   useEffect(() => {\n//     fetchTopics();\n//   }, []);\n\n//   const fetchTopics = async () => {\n//     try {\n//       const response = await fetch('/api/topics', {\n//         method: 'GET',\n//         headers: { 'Content-Type': 'application/json' },\n//         credentials: 'include', // Include cookies with the request\n//       });\n//       if (!response.ok) throw new Error('Network response was not ok');\n//       const data = await response.json();\n//       setTopics(data);\n//     } catch (error) {\n//       console.error('Error fetching topics:', error);\n//     }\n//   };\n\n//   const dispatch = useDispatch();\n\n// const handleCreateOrUpdateTopic = async (topicData) => {\n//     // Determine the HTTP method and URL based on whether we are creating or updating a topic\n//     const method = editingTopic ? 'PUT' : 'POST';\n//     const url = editingTopic ? `/api/topics/${editingTopic.id}` : '/api/topics';\n\n//     try {\n//       const response = await fetch(url, {\n//         method,\n//         headers: { 'Content-Type': 'application/json' },\n//         body: JSON.stringify(topicData),\n//         credentials: 'include',\n//       });\n//       if (!response.ok) throw new Error('Network response was not ok');\n\n//       const returnedTopic = await response.json();\n\n//       if (!editingTopic) {\n//         // Dispatch the Redux action here for adding a new topic\n//         dispatch(addTopic(returnedTopic));\n//       } else {\n\n//       }\n\n//       setShowForm(false);\n//       setEditingTopic(null);\n//       fetchTopics();  // Refresh the list of topics\n//     } catch (error) {\n//       console.error('Error submitting topic:', error);\n//     }\n//   };\n\n//   const handleDeleteTopic = async (topicId) => {\n//     try {\n//       const response = await fetch(`/api/topics/${topicId}`, { method: 'DELETE' });\n//       if (!response.ok) throw new Error('Network response was not ok');\n//       fetchTopics();  // Refresh the list of topics\n//     } catch (error) {\n//       console.error('Error deleting topic:', error);\n//     }\n//   };\n\n//   const handleEditClick = (topic) => {\n//     setEditingTopic(topic);\n//     setShowForm(true);\n//   };\n\n//   return (\n//     <div>\n//       <h1>Topics</h1>\n//       <button onClick={() => setShowForm(true)}>Create New Topic</button>\n//       {showForm && (\n//         <TopicForm\n//           existingTopic={editingTopic}\n//           onSubmit={handleCreateOrUpdateTopic}\n//           onCancel={() => {\n//             setShowForm(false);\n//             setEditingTopic(null);\n//           }}\n//         />\n//       )}\n//       <ul>\n//         {topics.length > 0 ? (\n//           topics.map(topic => (\n//             <Topic\n//               key={topic.id}\n//               topic={topic}\n//               onEdit={handleEditClick}\n//               onDelete={handleDeleteTopic}\n//             />\n//           ))\n//         ) : (\n//           <p>Loading topics...</p>\n//         )}\n//       </ul>\n//     </div>\n//   );\n// };\n\n// export default TopicList;\n\n// import React, { useState, useEffect } from 'react';\n// import { useDispatch, useSelector } from 'react-redux';\n// import Topic from './Topic';\n// import TopicForm from './TopicForm';\n// import { fetchTopics, editTopic, updateTopic, removeTopic } from '../../store/topics'; // Import the fetchTopics action\n\n// const TopicList = () => {\n//     const dispatch = useDispatch();\n//     const topics = useSelector(state => Object.values(state.topics)); // Accessing topics from Redux store\n//     const [showForm, setShowForm] = useState(false);\n//     const [editingTopic, setEditingTopic] = useState(null);\n\n//     useEffect(() => {\n//         dispatch(fetchTopics()); // Dispatching action to fetch topics\n//     }, [dispatch]);\n\n//     const handleCreateOrUpdateTopic = async (topicData) => {\n//       // Determine the HTTP method and URL based on whether we are creating or updating a topic\n//       const method = editingTopic ? 'PUT' : 'POST';\n//       const url = editingTopic ? `/api/topics/${editingTopic.id}` : '/api/topics';\n\n//       try {\n//         const response = await fetch(url, {\n//           method,\n//           headers: { 'Content-Type': 'application/json' },\n//           body: JSON.stringify(topicData),\n//           credentials: 'include',\n//         });\n//         if (!response.ok) throw new Error('Network response was not ok');\n\n//         const returnedTopic = await response.json();\n\n//         if (!editingTopic) {\n//           // Dispatch the Redux action here for adding a new topic\n//           dispatch(fetchTopics(returnedTopic));\n//         } else {\n\n//         }\n\n//         setShowForm(false);\n//         setEditingTopic(null);\n//         fetchTopics();  // Refresh the list of topics\n//       } catch (error) {\n//         console.error('Error submitting topic:', error);\n//       }\n//     };\n\n// // Inside your component where topic editing is handled\n// const handleUpdateTopic = async (topicId, updatedTopicData) => {\n//   const result = await dispatch(editTopic(topicId, updatedTopicData));\n\n//   if (!result.errors) {\n//       // For example, you could redirect to the topic list page or close the modal/form\n//       console.log('Topic updated successfully');\n//       // Redirect or update the state to reflect the changes\n//   } else {\n//       // Show error messages to the user\n//       console.error('Failed to update topic:', result.errors);\n//   }\n// };\n\n//     // const handleDeleteTopic = async (topicId) => {\n//     //   try {\n//     //     const response = await fetch(`/api/topics/${topicId}`, { method: 'DELETE' });\n//     //     if (!response.ok) throw new Error('Network response was not ok');\n\n//     //     // Dispatch fetchTopics again to refresh the list\n//     //     dispatch(fetchTopics());\n//     //   } catch (error) {\n//     //     console.error('Error deleting topic:', error);\n//     //   }\n//     // };\n\n//     const handleDeleteTopic = async (topicId) => {\n//       try {\n//         const response = await fetch(`/api/topics/${topicId}`, { method: 'DELETE' });\n//         if (!response.ok) throw new Error('Network response was not ok');\n//         dispatch(removeTopic(topicId));\n//       } catch (error) {\n//         console.error('Error deleting topic:', error);\n//       }\n//     };\n\n//     const handleEditClick = (topic) => {\n//       setEditingTopic(topic);\n//       setShowForm(true);\n//   };\n\n//     return (\n//         <div>\n//             <h1>Topics</h1>\n//             <button onClick={() => setShowForm(true)}>Create New Topic</button>\n//             {showForm && (\n//     <TopicForm\n//         existingTopic={editingTopic}\n//         onSubmit={handleCreateOrUpdateTopic}\n//         onCancel={() => {\n//             setShowForm(false);\n//             setEditingTopic(null);\n//         }}\n//     />\n// )}\n\n//             <ul>\n//                 {topics.length > 0 ? (\n//                     topics.map(topic => (\n//                         <Topic\n//                             key={topic.id}\n//                             topic={topic}\n//                             onEdit={handleEditClick}\n//                             onDelete={handleDeleteTopic}\n//                         />\n//                     ))\n//                 ) : (\n//                     <p>Loading topics...</p>\n//                 )}\n//             </ul>\n//         </div>\n//     );\n// };\n\n// export default TopicList;\n\nimport React, { useState, useEffect } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport Topic from './Topic';\nimport TopicForm from './TopicForm';\nimport { fetchTopics, editTopic, createTopic, removeTopic } from '../../store/topics';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst TopicList = () => {\n  _s();\n  const dispatch = useDispatch();\n  const topics = useSelector(state => Object.values(state.topics));\n  const [showForm, setShowForm] = useState(false);\n  const [editingTopic, setEditingTopic] = useState(null);\n  useEffect(() => {\n    dispatch(fetchTopics()).catch(console.error);\n  }, [dispatch]);\n  const handleCreateTopic = async topicData => {\n    try {\n      const res = await dispatch(createTopic(topicData));\n      if (!res.errors) {\n        setShowForm(false);\n        dispatch(fetchTopics());\n      } else {\n        console.error('Failed to create topic:', res.errors);\n      }\n    } catch (error) {\n      console.error('Error creating topic:', error);\n    }\n  };\n  const handleEditTopic = async topicData => {\n    try {\n      const res = await dispatch(editTopic(editingTopic.id, topicData));\n      if (!res.errors) {\n        setShowForm(false);\n        setEditingTopic(null);\n        dispatch(fetchTopics());\n      } else {\n        console.error('Failed to update topic:', res.errors);\n      }\n    } catch (error) {\n      console.error('Error updating topic:', error);\n    }\n  };\n\n  // const handleDeleteTopic = async (topicId) => {\n  //     try {\n  //         const response = await fetch(`/api/topics/${topicId}`, { method: 'DELETE' });\n  //         if (!response.ok) throw new Error('Network response was not ok');\n  //         dispatch(removeTopic(topicId));\n  //     } catch (error) {\n  //         console.error('Error deleting topic:', error);\n  //     }\n  // };\n\n  const handleDeleteTopic = async topicId => {\n    try {\n      const response = await fetch(`/api/topics/${topicId}`, {\n        method: 'DELETE'\n      });\n      if (!response.ok) throw new Error('Network response was not ok');\n      dispatch(removeTopic(topicId));\n      // Wait for state update before trying to re-render the topics list\n      await dispatch(fetchTopics());\n    } catch (error) {\n      console.error('Error deleting topic:', error);\n    }\n  };\n  const handleEditClick = topic => {\n    setEditingTopic(topic);\n    setShowForm(true);\n  };\n  if (!topics || topics.length === 0) {\n    return /*#__PURE__*/_jsxDEV(\"p\", {\n      children: \"Loading topics...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 406,\n      columnNumber: 14\n    }, this);\n  }\n  if (!Array.isArray(topics)) {\n    console.error('Expected topics to be an array but got:', topics);\n    return /*#__PURE__*/_jsxDEV(\"p\", {\n      children: \"Error: Topics data is not an array.\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 412,\n      columnNumber: 14\n    }, this);\n  }\n  topics.map(topic => {\n    if (!topic) {\n      console.error('Null or undefined topic found', topic);\n      return null; // or some placeholder component\n    }\n\n    return /*#__PURE__*/_jsxDEV(Topic, {\n      topic: topic,\n      onEdit: handleEditClick,\n      onDelete: handleDeleteTopic\n    }, topic.id, false, {\n      fileName: _jsxFileName,\n      lineNumber: 422,\n      columnNumber: 9\n    }, this);\n  });\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Topics\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 436,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: () => {\n        setShowForm(true);\n        setEditingTopic(null); // Reset editing topic\n      },\n      children: \"Create New Topic\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 437,\n      columnNumber: 13\n    }, this), showForm && /*#__PURE__*/_jsxDEV(TopicForm, {\n      existingTopic: editingTopic,\n      onSubmit: editingTopic ? handleEditTopic : handleCreateTopic,\n      onCancel: () => {\n        setShowForm(false);\n        setEditingTopic(null);\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 444,\n      columnNumber: 17\n    }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n      children: topics && topics.length > 0 && topics.map(topic => /*#__PURE__*/_jsxDEV(Topic, {\n        topic: topic,\n        onEdit: handleEditClick,\n        onDelete: handleDeleteTopic\n      }, topic ? topic.id : undefined, false, {\n        fileName: _jsxFileName,\n        lineNumber: 471,\n        columnNumber: 5\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 469,\n      columnNumber: 1\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 435,\n    columnNumber: 9\n  }, this);\n};\n_s(TopicList, \"A9DezvfOYCza2ATAJXKzQRUNnKs=\", false, function () {\n  return [useDispatch, useSelector];\n});\n_c = TopicList;\nexport default TopicList;\nvar _c;\n$RefreshReg$(_c, \"TopicList\");","map":{"version":3,"names":["React","useState","useEffect","useDispatch","useSelector","Topic","TopicForm","fetchTopics","editTopic","createTopic","removeTopic","TopicList","dispatch","topics","state","Object","values","showForm","setShowForm","editingTopic","setEditingTopic","catch","console","error","handleCreateTopic","topicData","res","errors","handleEditTopic","id","handleDeleteTopic","topicId","response","fetch","method","ok","Error","handleEditClick","topic","length","Array","isArray","map","undefined"],"sources":["/Users/yosephlatif/Desktop/philosophize/react-app/src/components/Topics/TopicList.js"],"sourcesContent":["// import React, { useState, useEffect } from 'react';\n// import Topic from './Topic';\n\n\n// const TopicList = () => {\n//     const [topics, setTopics] = useState([]);\n  \n//     useEffect(() => {\n//       const fetchTopics = async () => {\n//         try {\n//           const response = await fetch('/api/topics'); // Adjust the URL based on your API endpoint\n//           if (!response.ok) throw new Error('Network response was not ok');\n//           const data = await response.json();\n//           setTopics(data); // Make sure the key matches what your backend sends\n//         } catch (error) {\n//           console.error('Error fetching topics:', error);\n//         }\n//       };\n  \n//       fetchTopics();\n//     }, []);\n\n//     return (\n//         <div>\n//           <h1>Topics</h1>\n//           <ul>\n//             {topics.length > 0 ? (\n//               topics.map(topic => (\n//                 <Topic key={topic.id} topic={topic} />\n//               ))\n//             ) : (\n//               <p>Loading topics...</p>\n//             )}\n//           </ul>\n//         </div>\n//       );\n\n//     };\n      \n\n// export default TopicList;\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n// import React, { useState, useEffect } from 'react';\n// import { useDispatch } from 'react-redux';\n// import Topic from './Topic';\n// import TopicForm from './TopicForm';\n// import { addTopic } from '../../store/topics';\n\n// const TopicList = () => {\n//   const [topics, setTopics] = useState([]);\n//   const [showForm, setShowForm] = useState(false);\n//   const [editingTopic, setEditingTopic] = useState(null);\n\n//   useEffect(() => {\n//     fetchTopics();\n//   }, []);\n\n//   const fetchTopics = async () => {\n//     try {\n//       const response = await fetch('/api/topics', {\n//         method: 'GET',\n//         headers: { 'Content-Type': 'application/json' },\n//         credentials: 'include', // Include cookies with the request\n//       });\n//       if (!response.ok) throw new Error('Network response was not ok');\n//       const data = await response.json();\n//       setTopics(data);\n//     } catch (error) {\n//       console.error('Error fetching topics:', error);\n//     }\n//   };\n  \n  \n  \n\n//   const dispatch = useDispatch();\n\n// const handleCreateOrUpdateTopic = async (topicData) => {\n//     // Determine the HTTP method and URL based on whether we are creating or updating a topic\n//     const method = editingTopic ? 'PUT' : 'POST';\n//     const url = editingTopic ? `/api/topics/${editingTopic.id}` : '/api/topics';\n  \n//     try {\n//       const response = await fetch(url, {\n//         method,\n//         headers: { 'Content-Type': 'application/json' },\n//         body: JSON.stringify(topicData),\n//         credentials: 'include',\n//       });\n//       if (!response.ok) throw new Error('Network response was not ok');\n  \n//       const returnedTopic = await response.json();\n  \n//       if (!editingTopic) {\n//         // Dispatch the Redux action here for adding a new topic\n//         dispatch(addTopic(returnedTopic));\n//       } else {\n\n//       }\n  \n//       setShowForm(false);\n//       setEditingTopic(null);\n//       fetchTopics();  // Refresh the list of topics\n//     } catch (error) {\n//       console.error('Error submitting topic:', error);\n//     }\n//   };\n  \n\n//   const handleDeleteTopic = async (topicId) => {\n//     try {\n//       const response = await fetch(`/api/topics/${topicId}`, { method: 'DELETE' });\n//       if (!response.ok) throw new Error('Network response was not ok');\n//       fetchTopics();  // Refresh the list of topics\n//     } catch (error) {\n//       console.error('Error deleting topic:', error);\n//     }\n//   };\n\n//   const handleEditClick = (topic) => {\n//     setEditingTopic(topic);\n//     setShowForm(true);\n//   };\n\n//   return (\n//     <div>\n//       <h1>Topics</h1>\n//       <button onClick={() => setShowForm(true)}>Create New Topic</button>\n//       {showForm && (\n//         <TopicForm\n//           existingTopic={editingTopic}\n//           onSubmit={handleCreateOrUpdateTopic}\n//           onCancel={() => {\n//             setShowForm(false);\n//             setEditingTopic(null);\n//           }}\n//         />\n//       )}\n//       <ul>\n//         {topics.length > 0 ? (\n//           topics.map(topic => (\n//             <Topic\n//               key={topic.id}\n//               topic={topic}\n//               onEdit={handleEditClick}\n//               onDelete={handleDeleteTopic}\n//             />\n//           ))\n//         ) : (\n//           <p>Loading topics...</p>\n//         )}\n//       </ul>\n//     </div>\n//   );\n// };\n\n// export default TopicList;\n\n\n\n\n\n\n\n\n\n\n\n\n// import React, { useState, useEffect } from 'react';\n// import { useDispatch, useSelector } from 'react-redux';\n// import Topic from './Topic';\n// import TopicForm from './TopicForm';\n// import { fetchTopics, editTopic, updateTopic, removeTopic } from '../../store/topics'; // Import the fetchTopics action\n\n// const TopicList = () => {\n//     const dispatch = useDispatch();\n//     const topics = useSelector(state => Object.values(state.topics)); // Accessing topics from Redux store\n//     const [showForm, setShowForm] = useState(false);\n//     const [editingTopic, setEditingTopic] = useState(null);\n\n//     useEffect(() => {\n//         dispatch(fetchTopics()); // Dispatching action to fetch topics\n//     }, [dispatch]);\n\n//     const handleCreateOrUpdateTopic = async (topicData) => {\n//       // Determine the HTTP method and URL based on whether we are creating or updating a topic\n//       const method = editingTopic ? 'PUT' : 'POST';\n//       const url = editingTopic ? `/api/topics/${editingTopic.id}` : '/api/topics';\n    \n//       try {\n//         const response = await fetch(url, {\n//           method,\n//           headers: { 'Content-Type': 'application/json' },\n//           body: JSON.stringify(topicData),\n//           credentials: 'include',\n//         });\n//         if (!response.ok) throw new Error('Network response was not ok');\n    \n//         const returnedTopic = await response.json();\n    \n//         if (!editingTopic) {\n//           // Dispatch the Redux action here for adding a new topic\n//           dispatch(fetchTopics(returnedTopic));\n//         } else {\n  \n//         }\n    \n//         setShowForm(false);\n//         setEditingTopic(null);\n//         fetchTopics();  // Refresh the list of topics\n//       } catch (error) {\n//         console.error('Error submitting topic:', error);\n//       }\n//     };\n\n\n// // Inside your component where topic editing is handled\n// const handleUpdateTopic = async (topicId, updatedTopicData) => {\n//   const result = await dispatch(editTopic(topicId, updatedTopicData));\n\n//   if (!result.errors) {\n//       // For example, you could redirect to the topic list page or close the modal/form\n//       console.log('Topic updated successfully');\n//       // Redirect or update the state to reflect the changes\n//   } else {\n//       // Show error messages to the user\n//       console.error('Failed to update topic:', result.errors);\n//   }\n// };\n\n    \n  \n//     // const handleDeleteTopic = async (topicId) => {\n//     //   try {\n//     //     const response = await fetch(`/api/topics/${topicId}`, { method: 'DELETE' });\n//     //     if (!response.ok) throw new Error('Network response was not ok');\n    \n//     //     // Dispatch fetchTopics again to refresh the list\n//     //     dispatch(fetchTopics());\n//     //   } catch (error) {\n//     //     console.error('Error deleting topic:', error);\n//     //   }\n//     // };\n    \n\n//     const handleDeleteTopic = async (topicId) => {\n//       try {\n//         const response = await fetch(`/api/topics/${topicId}`, { method: 'DELETE' });\n//         if (!response.ok) throw new Error('Network response was not ok');\n//         dispatch(removeTopic(topicId));\n//       } catch (error) {\n//         console.error('Error deleting topic:', error);\n//       }\n//     };\n    \n\n//     const handleEditClick = (topic) => {\n//       setEditingTopic(topic);\n//       setShowForm(true);\n//   };\n  \n\n//     return (\n//         <div>\n//             <h1>Topics</h1>\n//             <button onClick={() => setShowForm(true)}>Create New Topic</button>\n//             {showForm && (\n//     <TopicForm\n//         existingTopic={editingTopic}\n//         onSubmit={handleCreateOrUpdateTopic}\n//         onCancel={() => {\n//             setShowForm(false);\n//             setEditingTopic(null);\n//         }}\n//     />\n// )}\n\n//             <ul>\n//                 {topics.length > 0 ? (\n//                     topics.map(topic => (\n//                         <Topic\n//                             key={topic.id}\n//                             topic={topic}\n//                             onEdit={handleEditClick}\n//                             onDelete={handleDeleteTopic}\n//                         />\n//                     ))\n//                 ) : (\n//                     <p>Loading topics...</p>\n//                 )}\n//             </ul>\n//         </div>\n//     );\n// };\n\n// export default TopicList;\n\n\n\nimport React, { useState, useEffect } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport Topic from './Topic';\nimport TopicForm from './TopicForm';\nimport { fetchTopics, editTopic, createTopic, removeTopic } from '../../store/topics';\n\nconst TopicList = () => {\n    const dispatch = useDispatch();\n    const topics = useSelector(state => Object.values(state.topics));\n    const [showForm, setShowForm] = useState(false);\n    const [editingTopic, setEditingTopic] = useState(null);\n\n    useEffect(() => {\n      dispatch(fetchTopics()).catch(console.error);\n    }, [dispatch]);\n\n    const handleCreateTopic = async (topicData) => {\n        try {\n            const res = await dispatch(createTopic(topicData));\n            if (!res.errors) {\n                setShowForm(false);\n                dispatch(fetchTopics());\n            } else {\n                console.error('Failed to create topic:', res.errors);\n            }\n        } catch (error) {\n            console.error('Error creating topic:', error);\n        }\n    };\n\n    const handleEditTopic = async (topicData) => {\n        try {\n            const res = await dispatch(editTopic(editingTopic.id, topicData));\n            if (!res.errors) {\n                setShowForm(false);\n                setEditingTopic(null);\n                dispatch(fetchTopics());\n            } else {\n                console.error('Failed to update topic:', res.errors);\n            }\n        } catch (error) {\n            console.error('Error updating topic:', error);\n        }\n    };\n\n    // const handleDeleteTopic = async (topicId) => {\n    //     try {\n    //         const response = await fetch(`/api/topics/${topicId}`, { method: 'DELETE' });\n    //         if (!response.ok) throw new Error('Network response was not ok');\n    //         dispatch(removeTopic(topicId));\n    //     } catch (error) {\n    //         console.error('Error deleting topic:', error);\n    //     }\n    // };\n\n    const handleDeleteTopic = async (topicId) => {\n      try {\n        const response = await fetch(`/api/topics/${topicId}`, { method: 'DELETE' });\n        if (!response.ok) throw new Error('Network response was not ok');\n        dispatch(removeTopic(topicId));\n        // Wait for state update before trying to re-render the topics list\n        await dispatch(fetchTopics());\n      } catch (error) {\n        console.error('Error deleting topic:', error);\n      }\n    };\n    \n\n\n    const handleEditClick = (topic) => {\n        setEditingTopic(topic);\n        setShowForm(true);\n    };\n\n    if (!topics || topics.length === 0) {\n      return <p>Loading topics...</p>;\n    }\n\n\n    if (!Array.isArray(topics)) {\n      console.error('Expected topics to be an array but got:', topics);\n      return <p>Error: Topics data is not an array.</p>;\n    }\n    \n\n    topics.map(topic => {\n      if (!topic) {\n        console.error('Null or undefined topic found', topic);\n        return null; // or some placeholder component\n      }\n      return (\n        <Topic\n          key={topic.id}\n          topic={topic}\n          onEdit={handleEditClick}\n          onDelete={handleDeleteTopic}\n        />\n      );\n    })\n    \n\n    \n\n    return (\n        <div>\n            <h1>Topics</h1>\n            <button onClick={() => {\n              setShowForm(true);\n              setEditingTopic(null); // Reset editing topic\n            }}>\n              Create New Topic\n            </button>\n            {showForm && (\n                <TopicForm\n                    existingTopic={editingTopic}\n                    onSubmit={editingTopic ? handleEditTopic : handleCreateTopic}\n                    onCancel={() => {\n                        setShowForm(false);\n                        setEditingTopic(null);\n                    }}\n                />\n            )}\n\n            {/* <ul>\n                {topics.length > 0 ? (\n                    topics.map(topic => (\n                        <Topic\n                            key={topic.id}\n                            topic={topic}\n                            onEdit={handleEditClick}\n                            onDelete={handleDeleteTopic}\n                        />\n                    ))\n                ) : (\n                    <p>Loading topics...</p>\n                )}\n            </ul> */}\n\n<ul>\n  {topics && topics.length > 0 && topics.map(topic => (\n    <Topic\n      key={topic ? topic.id : undefined}\n      topic={topic}\n      onEdit={handleEditClick}\n      onDelete={handleDeleteTopic}\n    />\n  ))}\n</ul>\n\n        </div>\n    );\n};\n\nexport default TopicList;\n"],"mappings":";;AAAA;AACA;;AAGA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAGA;;AAgCA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAKA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAaA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAGA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAIA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAGA;AACA;AACA;AACA;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA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"},"metadata":{},"sourceType":"module"}