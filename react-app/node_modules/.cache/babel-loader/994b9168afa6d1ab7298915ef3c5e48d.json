{"ast":null,"code":"var _jsxFileName = \"/Users/yosephlatif/Desktop/philosophize/react-app/src/components/Topics/TopicList.js\",\n  _s = $RefreshSig$();\n// import React, { useState, useEffect } from 'react';\n// import { useDispatch, useSelector } from 'react-redux';\n// import Topic from './Topic';\n// import TopicForm from './TopicForm';\n// import { fetchTopics, editTopic, createTopic, removeTopic } from '../../store/topics';\n// import { castVote, removeVote } from '../../store/topics';\n\n// const TopicList = () => {\n//     const dispatch = useDispatch();\n//     const topics = useSelector(state => Object.values(state.topics));\n//     const [showForm, setShowForm] = useState(false);\n//     const [editingTopic, setEditingTopic] = useState(null);\n\n//     const [votecheck, voteChecked] = useState({\n//       topicID: null, \n//       vote: 0,\n//       });\n\n//     useEffect(() => {\n//       dispatch(fetchTopics()).catch(console.error);\n//     }, [dispatch]);\n\n//     const handleCreateTopic = async (topicData) => {\n//         try {\n//             const res = await dispatch(createTopic(topicData));\n//             if (!res.errors) {\n//                 setShowForm(false);\n//                 dispatch(fetchTopics());\n//             } else {\n//                 console.error('Failed to create topic:', res.errors);\n//             }\n//         } catch (error) {\n//             console.error('Error creating topic:', error);\n//         }\n//     };\n\n//     const handleEditTopic = async (topicData) => {\n//         try {\n//             const res = await dispatch(editTopic(editingTopic.id, topicData));\n//             if (!res.errors) {\n//                 setShowForm(false);\n//                 setEditingTopic(null);\n//                 dispatch(fetchTopics());\n//             } else {\n//                 console.error('Failed to update topic:', res.errors);\n//             }\n//         } catch (error) {\n//             console.error('Error updating topic:', error);\n//         }\n//     };\n\n//     // const handleDeleteTopic = async (topicId) => {\n//     //     try {\n//     //         const response = await fetch(`/api/topics/${topicId}`, { method: 'DELETE' });\n//     //         if (!response.ok) throw new Error('Network response was not ok');\n//     //         dispatch(removeTopic(topicId));\n//     //     } catch (error) {\n//     //         console.error('Error deleting topic:', error);\n//     //     }\n//     // };\n\n//     const handleDeleteTopic = async (topicId) => {\n//       try {\n//         const response = await fetch(`/api/topics/${topicId}`, { method: 'DELETE' });\n//         if (!response.ok) throw new Error('Network response was not ok');\n//         dispatch(removeTopic(topicId));\n//         // Wait for state update before trying to re-render the topics list\n//         await dispatch(fetchTopics());\n//       } catch (error) {\n//         console.error('Error deleting topic:', error);\n//       }\n//     };\n\n//     const handleEditClick = (topic) => {\n//         setEditingTopic(topic);\n//         setShowForm(true);\n//     };\n\n//     const handleVote = (topicId) => {\n//       count = 0;\n//       voteChecked((topicId), count++);\n//     };\n\n//     const handleUnvote = (topicId) => {\n//       count = 1;\n//       voteChecked((topicId), count--);\n//     };\n\n//     if (!topics || topics.length === 0) {\n//       return <p>Loading topics...</p>;\n//     }\n\n//     if (!Array.isArray(topics)) {\n//       console.error('Expected topics to be an array but got:', topics);\n//       return <p>Error: Topics data is not an array.</p>;\n//     }\n\n//     topics.map(topic => {\n//       if (!topic) {\n//         console.error('Null or undefined topic found', topic);\n//         return null; // or some placeholder component\n//       }\n//       const hasVoted = topic.hasVoted ?? false;\n//       return (\n//         <Topic\n//         key={topic.id}\n//         topic={topic}\n//         onEdit={handleEditClick}\n//         onDelete={handleDeleteTopic}\n//         onVote={() => handleVote(topic.id)}\n//         onUnvote={() => handleUnvote(topic.id)}\n//         hasVoted={hasVoted}\n//         />\n//       );\n//     })\n\n//     return (\n//         <div>\n//             <h1>Topics</h1>\n//             <button onClick={() => {\n//               setShowForm(true);\n//               setEditingTopic(null); // Reset editing topic\n//             }}>\n//               Create New Topic\n//             </button>\n//             {showForm && (\n//                 <TopicForm\n//                     existingTopic={editingTopic}\n//                     onSubmit={editingTopic ? handleEditTopic : handleCreateTopic}\n//                     onCancel={() => {\n//                         setShowForm(false);\n//                         setEditingTopic(null);\n//                     }}\n//                 />\n//             )}\n\n//             {/* <ul>\n//                 {topics.length > 0 ? (\n//                     topics.map(topic => (\n//                         <Topic\n//                             key={topic.id}\n//                             topic={topic}\n//                             onEdit={handleEditClick}\n//                             onDelete={handleDeleteTopic}\n//                         />\n//                     ))\n//                 ) : (\n//                     <p>Loading topics...</p>\n//                 )}\n//             </ul> */}\n\n// <ul>\n//   {topics && topics.length > 0 && topics.map(topic => (\n//     <Topic\n//       key={topic ? topic.id : undefined}\n//       topic={topic}\n//       onEdit={handleEditClick}\n//       onDelete={handleDeleteTopic}\n//       onVote={handleVote}\n//       onUnvote={handleUnvote}\n//     />\n//   ))}\n// </ul>\n\n//         </div>\n//     );\n// };\n\n// export default TopicList;\n\n// import React, { useState, useEffect } from 'react';\n// import { useDispatch, useSelector } from 'react-redux';\n// import Topic from './Topic';\n// import TopicForm from './TopicForm';\n// import { fetchTopics, editTopic, createTopic, removeTopic } from '../../store/topics';\n// import { castVote, removeVote } from '../../store/topics';\n\n// const TopicList = () => {\n//     const dispatch = useDispatch();\n//     const topics = useSelector(state => Object.values(state.topics));\n//     const [showForm, setShowForm] = useState(false);\n//     const [editingTopic, setEditingTopic] = useState(null);\n\n//     useEffect(() => {\n//       dispatch(fetchTopics()).catch(console.error);\n//     }, [dispatch]);\n\n//     const handleCreateTopic = async (topicData) => {\n//         try {\n//             const res = await dispatch(createTopic(topicData));\n//             if (!res.errors) {\n//                 setShowForm(false);\n//                 dispatch(fetchTopics());\n//             } else {\n//                 console.error('Failed to create topic:', res.errors);\n//             }\n//         } catch (error) {\n//             console.error('Error creating topic:', error);\n//         }\n//     };\n\n//     const handleEditTopic = async (topicData) => {\n//         try {\n//             const res = await dispatch(editTopic(editingTopic.id, topicData));\n//             if (!res.errors) {\n//                 setShowForm(false);\n//                 setEditingTopic(null);\n//                 dispatch(fetchTopics());\n//             } else {\n//                 console.error('Failed to update topic:', res.errors);\n//             }\n//         } catch (error) {\n//             console.error('Error updating topic:', error);\n//         }\n//     };\n\n//     // const handleDeleteTopic = async (topicId) => {\n//     //     try {\n//     //         const response = await fetch(`/api/topics/${topicId}`, { method: 'DELETE' });\n//     //         if (!response.ok) throw new Error('Network response was not ok');\n//     //         dispatch(removeTopic(topicId));\n//     //     } catch (error) {\n//     //         console.error('Error deleting topic:', error);\n//     //     }\n//     // };\n\n//     const handleDeleteTopic = async (topicId) => {\n//       try {\n//         const response = await fetch(`/api/topics/${topicId}`, { method: 'DELETE' });\n//         if (!response.ok) throw new Error('Network response was not ok');\n//         dispatch(removeTopic(topicId));\n//         // Wait for state update before trying to re-render the topics list\n//         await dispatch(fetchTopics());\n//       } catch (error) {\n//         console.error('Error deleting topic:', error);\n//       }\n//     };\n\n//     const handleEditClick = (topic) => {\n//         setEditingTopic(topic);\n//         setShowForm(true);\n//     };\n\n//     const handleVote = (topicId) => {\n//       console.log(\"hahaha\")\n//       dispatch(castVote(topicId));\n//       console.log(\"hahaha111\")\n//     };\n\n//     const handleUnvote = (topicId) => {\n//       dispatch(removeVote(topicId));\n//     };\n\n//     if (!topics || topics.length === 0) {\n//       return <p>Loading topics...</p>;\n//     }\n\n//     if (!Array.isArray(topics)) {\n//       console.error('Expected topics to be an array but got:', topics);\n//       return <p>Error: Topics data is not an array.</p>;\n//     }\n\n//     topics.map(topic => {\n//       if (!topic) {\n//         console.error('Null or undefined topic found', topic);\n//         return null; // or some placeholder component\n//       }\n//       const hasVoted = topic.hasVoted ?? false;\n//       return (\n//         <Topic\n//         key={topic.id}\n//         topic={topic}\n//         onEdit={handleEditClick}\n//         onDelete={handleDeleteTopic}\n//         onVote={() => handleVote(topic.id)}\n//         onUnvote={() => handleUnvote(topic.id)}\n//         hasVoted={hasVoted}\n//         />\n//       );\n//     })\n\n//     return (\n//         <div>\n//             <h1>Topics</h1>\n//             <button onClick={() => {\n//               setShowForm(true);\n//               setEditingTopic(null); // Reset editing topic\n//             }}>\n//               Create New Topic\n//             </button>\n//             {showForm && (\n//                 <TopicForm\n//                     existingTopic={editingTopic}\n//                     onSubmit={editingTopic ? handleEditTopic : handleCreateTopic}\n//                     onCancel={() => {\n//                         setShowForm(false);\n//                         setEditingTopic(null);\n//                     }}\n//                 />\n//             )}\n\n//             {/* <ul>\n//                 {topics.length > 0 ? (\n//                     topics.map(topic => (\n//                         <Topic\n//                             key={topic.id}\n//                             topic={topic}\n//                             onEdit={handleEditClick}\n//                             onDelete={handleDeleteTopic}\n//                         />\n//                     ))\n//                 ) : (\n//                     <p>Loading topics...</p>\n//                 )}\n//             </ul> */}\n\n// <ul>\n//   {topics && topics.length > 0 && topics.map(topic => (\n//     <Topic\n//       key={topic ? topic.id : undefined}\n//       topic={topic}\n//       onEdit={handleEditClick}\n//       onDelete={handleDeleteTopic}\n//       onVote={handleVote}\n//       onUnvote={handleUnvote}\n//     />\n//   ))}\n// </ul>\n\n//         </div>\n//     );\n// };\n\n// export default TopicList;\n\nimport React, { useState, useEffect } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport Topic from './Topic';\nimport TopicForm from './TopicForm';\nimport { fetchTopics, editTopic, createTopic, removeTopic, castVote, removeVote } from '../../store/topics';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst TopicList = () => {\n  _s();\n  const dispatch = useDispatch();\n  const topicsFromStore = useSelector(state => Object.values(state.topics));\n  const [topics, setTopics] = useState(topicsFromStore);\n  const [showForm, setShowForm] = useState(false);\n  const [editingTopic, setEditingTopic] = useState(null);\n  useEffect(() => {\n    dispatch(fetchTopics()).then(data => setTopics(data));\n  }, [dispatch]);\n\n  // Add your existing handlers here...\n\n  const handleVote = async topicId => {\n    // Dispatch the voting action\n    const updatedTopic = await dispatch(castVote(topicId));\n    if (updatedTopic) {\n      // Update the local state with the new vote count\n      const newTopics = topics.map(topic => topic.id === topicId ? {\n        ...topic,\n        vote_count: topic.vote_count + 1\n      } : topic);\n      setTopics(newTopics);\n    }\n  };\n  const handleUnvote = async topicId => {\n    // Dispatch the unvoting action\n    const updatedTopic = await dispatch(removeVote(topicId));\n    if (updatedTopic) {\n      // Update the local state to decrement the vote count\n      const newTopics = topics.map(topic => topic.id === topicId ? {\n        ...topic,\n        vote_count: topic.vote_count - 1\n      } : topic);\n      setTopics(newTopics);\n    }\n  };\n\n  // Render logic...\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Topics\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 401,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n      children: topics && topics.length > 0 && topics.map(topic => /*#__PURE__*/_jsxDEV(Topic, {\n        topic: topic,\n        onEdit: handleEditClick,\n        onDelete: handleDeleteTopic,\n        onVote: handleVote,\n        onUnvote: handleUnvote,\n        hasVoted: false // You'll need to determine this based on user's voting status\n      }, topic.id, false, {\n        fileName: _jsxFileName,\n        lineNumber: 405,\n        columnNumber: 17\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 403,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 400,\n    columnNumber: 9\n  }, this);\n};\n_s(TopicList, \"6Eac2EFr5Rq8angXX/V5S49VA1w=\", false, function () {\n  return [useDispatch, useSelector];\n});\n_c = TopicList;\nexport default TopicList;\nvar _c;\n$RefreshReg$(_c, \"TopicList\");","map":{"version":3,"names":["React","useState","useEffect","useDispatch","useSelector","Topic","TopicForm","fetchTopics","editTopic","createTopic","removeTopic","castVote","removeVote","TopicList","dispatch","topicsFromStore","state","Object","values","topics","setTopics","showForm","setShowForm","editingTopic","setEditingTopic","then","data","handleVote","topicId","updatedTopic","newTopics","map","topic","id","vote_count","handleUnvote","length","handleEditClick","handleDeleteTopic"],"sources":["/Users/yosephlatif/Desktop/philosophize/react-app/src/components/Topics/TopicList.js"],"sourcesContent":["// import React, { useState, useEffect } from 'react';\n// import { useDispatch, useSelector } from 'react-redux';\n// import Topic from './Topic';\n// import TopicForm from './TopicForm';\n// import { fetchTopics, editTopic, createTopic, removeTopic } from '../../store/topics';\n// import { castVote, removeVote } from '../../store/topics';\n\n// const TopicList = () => {\n//     const dispatch = useDispatch();\n//     const topics = useSelector(state => Object.values(state.topics));\n//     const [showForm, setShowForm] = useState(false);\n//     const [editingTopic, setEditingTopic] = useState(null);\n\n\n//     const [votecheck, voteChecked] = useState({\n//       topicID: null, \n//       vote: 0,\n//       });\n\n//     useEffect(() => {\n//       dispatch(fetchTopics()).catch(console.error);\n//     }, [dispatch]);\n\n//     const handleCreateTopic = async (topicData) => {\n//         try {\n//             const res = await dispatch(createTopic(topicData));\n//             if (!res.errors) {\n//                 setShowForm(false);\n//                 dispatch(fetchTopics());\n//             } else {\n//                 console.error('Failed to create topic:', res.errors);\n//             }\n//         } catch (error) {\n//             console.error('Error creating topic:', error);\n//         }\n//     };\n\n//     const handleEditTopic = async (topicData) => {\n//         try {\n//             const res = await dispatch(editTopic(editingTopic.id, topicData));\n//             if (!res.errors) {\n//                 setShowForm(false);\n//                 setEditingTopic(null);\n//                 dispatch(fetchTopics());\n//             } else {\n//                 console.error('Failed to update topic:', res.errors);\n//             }\n//         } catch (error) {\n//             console.error('Error updating topic:', error);\n//         }\n//     };\n\n//     // const handleDeleteTopic = async (topicId) => {\n//     //     try {\n//     //         const response = await fetch(`/api/topics/${topicId}`, { method: 'DELETE' });\n//     //         if (!response.ok) throw new Error('Network response was not ok');\n//     //         dispatch(removeTopic(topicId));\n//     //     } catch (error) {\n//     //         console.error('Error deleting topic:', error);\n//     //     }\n//     // };\n\n//     const handleDeleteTopic = async (topicId) => {\n//       try {\n//         const response = await fetch(`/api/topics/${topicId}`, { method: 'DELETE' });\n//         if (!response.ok) throw new Error('Network response was not ok');\n//         dispatch(removeTopic(topicId));\n//         // Wait for state update before trying to re-render the topics list\n//         await dispatch(fetchTopics());\n//       } catch (error) {\n//         console.error('Error deleting topic:', error);\n//       }\n//     };\n    \n\n\n//     const handleEditClick = (topic) => {\n//         setEditingTopic(topic);\n//         setShowForm(true);\n//     };\n\n//     const handleVote = (topicId) => {\n//       count = 0;\n//       voteChecked((topicId), count++);\n//     };\n  \n//     const handleUnvote = (topicId) => {\n//       count = 1;\n//       voteChecked((topicId), count--);\n//     };\n\n//     if (!topics || topics.length === 0) {\n//       return <p>Loading topics...</p>;\n//     }\n\n\n//     if (!Array.isArray(topics)) {\n//       console.error('Expected topics to be an array but got:', topics);\n//       return <p>Error: Topics data is not an array.</p>;\n//     }\n    \n\n//     topics.map(topic => {\n//       if (!topic) {\n//         console.error('Null or undefined topic found', topic);\n//         return null; // or some placeholder component\n//       }\n//       const hasVoted = topic.hasVoted ?? false;\n//       return (\n//         <Topic\n//         key={topic.id}\n//         topic={topic}\n//         onEdit={handleEditClick}\n//         onDelete={handleDeleteTopic}\n//         onVote={() => handleVote(topic.id)}\n//         onUnvote={() => handleUnvote(topic.id)}\n//         hasVoted={hasVoted}\n//         />\n//       );\n//     })\n    \n\n    \n\n//     return (\n//         <div>\n//             <h1>Topics</h1>\n//             <button onClick={() => {\n//               setShowForm(true);\n//               setEditingTopic(null); // Reset editing topic\n//             }}>\n//               Create New Topic\n//             </button>\n//             {showForm && (\n//                 <TopicForm\n//                     existingTopic={editingTopic}\n//                     onSubmit={editingTopic ? handleEditTopic : handleCreateTopic}\n//                     onCancel={() => {\n//                         setShowForm(false);\n//                         setEditingTopic(null);\n//                     }}\n//                 />\n//             )}\n\n//             {/* <ul>\n//                 {topics.length > 0 ? (\n//                     topics.map(topic => (\n//                         <Topic\n//                             key={topic.id}\n//                             topic={topic}\n//                             onEdit={handleEditClick}\n//                             onDelete={handleDeleteTopic}\n//                         />\n//                     ))\n//                 ) : (\n//                     <p>Loading topics...</p>\n//                 )}\n//             </ul> */}\n\n// <ul>\n//   {topics && topics.length > 0 && topics.map(topic => (\n//     <Topic\n//       key={topic ? topic.id : undefined}\n//       topic={topic}\n//       onEdit={handleEditClick}\n//       onDelete={handleDeleteTopic}\n//       onVote={handleVote}\n//       onUnvote={handleUnvote}\n//     />\n//   ))}\n// </ul>\n\n//         </div>\n//     );\n// };\n\n// export default TopicList;\n\n\n\n// import React, { useState, useEffect } from 'react';\n// import { useDispatch, useSelector } from 'react-redux';\n// import Topic from './Topic';\n// import TopicForm from './TopicForm';\n// import { fetchTopics, editTopic, createTopic, removeTopic } from '../../store/topics';\n// import { castVote, removeVote } from '../../store/topics';\n\n// const TopicList = () => {\n//     const dispatch = useDispatch();\n//     const topics = useSelector(state => Object.values(state.topics));\n//     const [showForm, setShowForm] = useState(false);\n//     const [editingTopic, setEditingTopic] = useState(null);\n\n//     useEffect(() => {\n//       dispatch(fetchTopics()).catch(console.error);\n//     }, [dispatch]);\n\n//     const handleCreateTopic = async (topicData) => {\n//         try {\n//             const res = await dispatch(createTopic(topicData));\n//             if (!res.errors) {\n//                 setShowForm(false);\n//                 dispatch(fetchTopics());\n//             } else {\n//                 console.error('Failed to create topic:', res.errors);\n//             }\n//         } catch (error) {\n//             console.error('Error creating topic:', error);\n//         }\n//     };\n\n//     const handleEditTopic = async (topicData) => {\n//         try {\n//             const res = await dispatch(editTopic(editingTopic.id, topicData));\n//             if (!res.errors) {\n//                 setShowForm(false);\n//                 setEditingTopic(null);\n//                 dispatch(fetchTopics());\n//             } else {\n//                 console.error('Failed to update topic:', res.errors);\n//             }\n//         } catch (error) {\n//             console.error('Error updating topic:', error);\n//         }\n//     };\n\n//     // const handleDeleteTopic = async (topicId) => {\n//     //     try {\n//     //         const response = await fetch(`/api/topics/${topicId}`, { method: 'DELETE' });\n//     //         if (!response.ok) throw new Error('Network response was not ok');\n//     //         dispatch(removeTopic(topicId));\n//     //     } catch (error) {\n//     //         console.error('Error deleting topic:', error);\n//     //     }\n//     // };\n\n//     const handleDeleteTopic = async (topicId) => {\n//       try {\n//         const response = await fetch(`/api/topics/${topicId}`, { method: 'DELETE' });\n//         if (!response.ok) throw new Error('Network response was not ok');\n//         dispatch(removeTopic(topicId));\n//         // Wait for state update before trying to re-render the topics list\n//         await dispatch(fetchTopics());\n//       } catch (error) {\n//         console.error('Error deleting topic:', error);\n//       }\n//     };\n    \n\n\n//     const handleEditClick = (topic) => {\n//         setEditingTopic(topic);\n//         setShowForm(true);\n//     };\n\n//     const handleVote = (topicId) => {\n//       console.log(\"hahaha\")\n//       dispatch(castVote(topicId));\n//       console.log(\"hahaha111\")\n//     };\n  \n//     const handleUnvote = (topicId) => {\n//       dispatch(removeVote(topicId));\n//     };\n\n//     if (!topics || topics.length === 0) {\n//       return <p>Loading topics...</p>;\n//     }\n\n\n//     if (!Array.isArray(topics)) {\n//       console.error('Expected topics to be an array but got:', topics);\n//       return <p>Error: Topics data is not an array.</p>;\n//     }\n    \n\n//     topics.map(topic => {\n//       if (!topic) {\n//         console.error('Null or undefined topic found', topic);\n//         return null; // or some placeholder component\n//       }\n//       const hasVoted = topic.hasVoted ?? false;\n//       return (\n//         <Topic\n//         key={topic.id}\n//         topic={topic}\n//         onEdit={handleEditClick}\n//         onDelete={handleDeleteTopic}\n//         onVote={() => handleVote(topic.id)}\n//         onUnvote={() => handleUnvote(topic.id)}\n//         hasVoted={hasVoted}\n//         />\n//       );\n//     })\n    \n\n    \n\n//     return (\n//         <div>\n//             <h1>Topics</h1>\n//             <button onClick={() => {\n//               setShowForm(true);\n//               setEditingTopic(null); // Reset editing topic\n//             }}>\n//               Create New Topic\n//             </button>\n//             {showForm && (\n//                 <TopicForm\n//                     existingTopic={editingTopic}\n//                     onSubmit={editingTopic ? handleEditTopic : handleCreateTopic}\n//                     onCancel={() => {\n//                         setShowForm(false);\n//                         setEditingTopic(null);\n//                     }}\n//                 />\n//             )}\n\n//             {/* <ul>\n//                 {topics.length > 0 ? (\n//                     topics.map(topic => (\n//                         <Topic\n//                             key={topic.id}\n//                             topic={topic}\n//                             onEdit={handleEditClick}\n//                             onDelete={handleDeleteTopic}\n//                         />\n//                     ))\n//                 ) : (\n//                     <p>Loading topics...</p>\n//                 )}\n//             </ul> */}\n\n// <ul>\n//   {topics && topics.length > 0 && topics.map(topic => (\n//     <Topic\n//       key={topic ? topic.id : undefined}\n//       topic={topic}\n//       onEdit={handleEditClick}\n//       onDelete={handleDeleteTopic}\n//       onVote={handleVote}\n//       onUnvote={handleUnvote}\n//     />\n//   ))}\n// </ul>\n\n//         </div>\n//     );\n// };\n\n// export default TopicList;\n\n\nimport React, { useState, useEffect } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport Topic from './Topic';\nimport TopicForm from './TopicForm';\nimport { fetchTopics, editTopic, createTopic, removeTopic, castVote, removeVote } from '../../store/topics';\n\nconst TopicList = () => {\n    const dispatch = useDispatch();\n    const topicsFromStore = useSelector(state => Object.values(state.topics));\n    const [topics, setTopics] = useState(topicsFromStore);\n    const [showForm, setShowForm] = useState(false);\n    const [editingTopic, setEditingTopic] = useState(null);\n\n    useEffect(() => {\n        dispatch(fetchTopics()).then(data => setTopics(data));\n    }, [dispatch]);\n\n    // Add your existing handlers here...\n\n    const handleVote = async (topicId) => {\n        // Dispatch the voting action\n        const updatedTopic = await dispatch(castVote(topicId));\n        if (updatedTopic) {\n            // Update the local state with the new vote count\n            const newTopics = topics.map(topic => \n                topic.id === topicId ? { ...topic, vote_count: topic.vote_count + 1 } : topic\n            );\n            setTopics(newTopics);\n        }\n    };\n  \n    const handleUnvote = async (topicId) => {\n        // Dispatch the unvoting action\n        const updatedTopic = await dispatch(removeVote(topicId));\n        if (updatedTopic) {\n            // Update the local state to decrement the vote count\n            const newTopics = topics.map(topic => \n                topic.id === topicId ? { ...topic, vote_count: topic.vote_count - 1 } : topic\n            );\n            setTopics(newTopics);\n        }\n    };\n\n    // Render logic...\n\n    return (\n        <div>\n            <h1>Topics</h1>\n            {/* Button and Form logic... */}\n            <ul>\n              {topics && topics.length > 0 && topics.map(topic => (\n                <Topic\n                  key={topic.id}\n                  topic={topic}\n                  onEdit={handleEditClick}\n                  onDelete={handleDeleteTopic}\n                  onVote={handleVote}\n                  onUnvote={handleUnvote}\n                  hasVoted={false} // You'll need to determine this based on user's voting status\n                />\n              ))}\n            </ul>\n        </div>\n    );\n};\n\nexport default TopicList;\n"],"mappings":";;AAAA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAGA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAIA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAGA;AACA;AACA;AACA;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAKA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;;AAIA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAIA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAGA;AACA;AACA;AACA;;AAGA;AACA;AA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"},"metadata":{},"sourceType":"module"}