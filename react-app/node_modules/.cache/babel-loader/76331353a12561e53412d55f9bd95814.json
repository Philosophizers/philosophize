{"ast":null,"code":"// store/topics.js\n\nconst LOAD_TOPICS = 'topics/LOAD_TOPICS';\nconst loadTopics = topics => ({\n  type: LOAD_TOPICS,\n  topics\n});\nexport const fetchTopics = () => async dispatch => {\n  const response = await fetch('/api/topics');\n  if (response.ok) {\n    const topics = await response.json();\n    dispatch(loadTopics(topics));\n  }\n};\nexport const addTopic = newTopicData => async dispatch => {\n  console.log(\"in thunk\");\n  try {\n    const response = await fetch('/api/topics', {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify(newTopicData)\n    });\n    console.log(response);\n    if (!response.ok) throw new Error('Network response was not ok');\n    const newTopic = await response.json();\n    dispatch({\n      type: 'ADD_TOPIC',\n      payload: newTopic\n    });\n  } catch (error) {\n    console.error('Error creating topic:', error);\n  }\n};\nconst initialState = [];\nexport default function reducer() {\n  let state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : initialState;\n  let action = arguments.length > 1 ? arguments[1] : undefined;\n  switch (action.type) {\n    case LOAD_TOPICS:\n      return [...action.topics];\n    default:\n      return state;\n  }\n}","map":{"version":3,"names":["LOAD_TOPICS","loadTopics","topics","type","fetchTopics","dispatch","response","fetch","ok","json","addTopic","newTopicData","console","log","method","headers","body","JSON","stringify","Error","newTopic","payload","error","initialState","reducer","state","action"],"sources":["/Users/yosephlatif/Desktop/philosophize/react-app/src/store/topics.js"],"sourcesContent":["// store/topics.js\n\nconst LOAD_TOPICS = 'topics/LOAD_TOPICS';\n\nconst loadTopics = (topics) => ({\n  type: LOAD_TOPICS,\n  topics,\n});\n\nexport const fetchTopics = () => async (dispatch) => {\n  const response = await fetch('/api/topics');\n  if (response.ok) {\n    const topics = await response.json();\n    dispatch(loadTopics(topics));\n  }\n};\n\nexport const addTopic = (newTopicData) => async (dispatch) => {\n    console.log(\"in thunk\")\n    try {\n      const response = await fetch('/api/topics', {\n        method: 'POST',\n        headers: { 'Content-Type': 'application/json' },\n        body: JSON.stringify(newTopicData),\n      });\n      console.log(response);\n      if (!response.ok) throw new Error('Network response was not ok');\n      const newTopic = await response.json();\n      dispatch({\n        type: 'ADD_TOPIC',\n        payload: newTopic,\n      });\n    } catch (error) {\n      console.error('Error creating topic:', error);\n    }\n  };\n\n\nconst initialState = [];\n\nexport default function reducer(state = initialState, action) {\n  switch (action.type) {\n    case LOAD_TOPICS:\n      return [...action.topics];\n    default:\n      return state;\n  }\n}\n"],"mappings":"AAAA;;AAEA,MAAMA,WAAW,GAAG,oBAAoB;AAExC,MAAMC,UAAU,GAAIC,MAAM,KAAM;EAC9BC,IAAI,EAAEH,WAAW;EACjBE;AACF,CAAC,CAAC;AAEF,OAAO,MAAME,WAAW,GAAG,MAAM,MAAOC,QAAQ,IAAK;EACnD,MAAMC,QAAQ,GAAG,MAAMC,KAAK,CAAC,aAAa,CAAC;EAC3C,IAAID,QAAQ,CAACE,EAAE,EAAE;IACf,MAAMN,MAAM,GAAG,MAAMI,QAAQ,CAACG,IAAI,EAAE;IACpCJ,QAAQ,CAACJ,UAAU,CAACC,MAAM,CAAC,CAAC;EAC9B;AACF,CAAC;AAED,OAAO,MAAMQ,QAAQ,GAAIC,YAAY,IAAK,MAAON,QAAQ,IAAK;EAC1DO,OAAO,CAACC,GAAG,CAAC,UAAU,CAAC;EACvB,IAAI;IACF,MAAMP,QAAQ,GAAG,MAAMC,KAAK,CAAC,aAAa,EAAE;MAC1CO,MAAM,EAAE,MAAM;MACdC,OAAO,EAAE;QAAE,cAAc,EAAE;MAAmB,CAAC;MAC/CC,IAAI,EAAEC,IAAI,CAACC,SAAS,CAACP,YAAY;IACnC,CAAC,CAAC;IACFC,OAAO,CAACC,GAAG,CAACP,QAAQ,CAAC;IACrB,IAAI,CAACA,QAAQ,CAACE,EAAE,EAAE,MAAM,IAAIW,KAAK,CAAC,6BAA6B,CAAC;IAChE,MAAMC,QAAQ,GAAG,MAAMd,QAAQ,CAACG,IAAI,EAAE;IACtCJ,QAAQ,CAAC;MACPF,IAAI,EAAE,WAAW;MACjBkB,OAAO,EAAED;IACX,CAAC,CAAC;EACJ,CAAC,CAAC,OAAOE,KAAK,EAAE;IACdV,OAAO,CAACU,KAAK,CAAC,uBAAuB,EAAEA,KAAK,CAAC;EAC/C;AACF,CAAC;AAGH,MAAMC,YAAY,GAAG,EAAE;AAEvB,eAAe,SAASC,OAAO,GAA+B;EAAA,IAA9BC,KAAK,uEAAGF,YAAY;EAAA,IAAEG,MAAM;EAC1D,QAAQA,MAAM,CAACvB,IAAI;IACjB,KAAKH,WAAW;MACd,OAAO,CAAC,GAAG0B,MAAM,CAACxB,MAAM,CAAC;IAC3B;MACE,OAAOuB,KAAK;EAAC;AAEnB"},"metadata":{},"sourceType":"module"}