{"ast":null,"code":"\n// import React, { useState } from \"react\";\n// import { useDispatch, useSelector } from \"react-redux\";\n// import { Redirect, useHistory } from \"react-router-dom\";\n// import { useModal } from \"../../context/Modal\";\n// import { signUp, authenticate } from \"../../store/session\";\n// import { Link } from \"react-router-dom\";\n// import \"./SignupForm.css\";\n\n// function SignupFormModal() {\n//   const dispatch = useDispatch();\n//   const [email, setEmail] = useState(\"\");\n//   const sessionMember = useSelector((state) => state.session.member)\n//   const [username, setUsername] = useState(\"\");\n//   const [password, setPassword] = useState(\"\");\n//   const [confirmPassword, setConfirmPassword] = useState(\"\");\n//   const { closeModal } = useModal();\n//   const history = useHistory();\n//   const [errors, setErrors] = useState([]);\n\n//   const disabled =\n//     !username||\n//     !email ||\n//     !password ||\n//     !confirmPassword;\n\n//   if (sessionMember) return <Redirect to=\"/\" />;\n\n//   function isEmail(val) {\n//     let regEmail =\n//       /^(([^<>()\\[\\]\\\\.,;:\\s@\"]+(\\.[^<>()\\[\\]\\\\.,;:\\s@\"]+)*)|(\".+\"))@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}])|(([a-zA-Z\\-0-9]+\\.)+[a-zA-Z]{2,}))$/;\n//     if (!regEmail.test(val)) {\n//       return false;\n//     } else {\n//       return true;\n//     }\n//   }\n\n//   const handleSubmit = async (e) => {\n//     e.preventDefault();\n\n//     let errorList = {};\n\n//     const response = await fetch(\"/api/auth/signup\", {\n//       method: \"POST\",\n//       headers: {\n//         \"Content-Type\": \"application/json\",\n//       },\n//       body: JSON.stringify({\n//         username,\n//         email,\n//         password,\n//       }),\n//     });\n\n//     const checkUnique = await fetch('/api/auth/validate-unique', {\n//       method: 'POST',\n//       headers: {\n//         'Content-Type': 'application/json',\n//       },\n//       body: JSON.stringify({ username, email }),\n//     });\n\n//     if (!checkUnique.ok) {\n//       const uniqueErrors = await checkUnique.json();\n//       setErrors(prev => ({ ...prev, ...uniqueErrors }));\n//       return;\n//     }\n\n//     const data = await response.json();\n//     if (!response.ok) {\n//       // Assuming the server responds with a status code of 400 or similar on error\n//       setErrors(data.errors || [\"An unexpected error occurred.\"]);\n//     } else {\n//       closeModal();\n//       history.push(\"/\");\n//     }\n\n//     if (!username) errorList.username = \"Username is required\";\n//     if (!email || !email.includes(\"@\"))\n//       errorList.email = \"Valid email is required\";\n//     if (!password || password.length<6) errorList.password = \"Password must be at least 6 characters\";\n//     if (!confirmPassword) errorList.confirmPassword = \"Confirm Password is required\";\n//     if (!isEmail(email)) errorList.email = \"Valid email is required\";\n//     if (password.length < 6) errorList.password = \"Password must be at least 6 characters\";\n//     if (password !== confirmPassword)\n//       errorList.confirmPassword = \"Passwords must match\";\n//     if (!checkUnique.username.ok) errorList.username = \"Username is already taken\";\n\n//     if (Object.values(errorList).length > 0) {\n//       setErrors(errorList);\n//       return;\n//     }\n\n//     if (password === confirmPassword) {\n//       setErrors({});\n//       const response = await dispatch(\n//         signUp({\n//           username,\n//           email,\n//           password,\n//         })\n//       ).catch((res) => res);\n//       if (response && response[0].startsWith(\"email\")) {\n//         const errorList_email = { \"email\": response[0].slice(8) };\n//         setErrors(errorList_email);\n//       } else {\n//         dispatch(authenticate());\n//         history.push('/')\n//       }\n//     } else {\n//     return setErrors({\n//       confirmPassword:\n//         \"Confirm Password field must be the same as the Password field\",\n//     });\n//   }\n//   };\n\n//   return (\n//     <>\n//       <div className=\"modal-backdrop\">\n//         <div className=\"modal-content\">\n//           <div className=\"modal-header\">Sign Up</div>\n//           <form onSubmit={handleSubmit} className=\"modal-form\">\n//             <Link to=\"/\" className=\"close-modal-button\">\n//               Back to Home Page\n//             </Link>\n//             <label>\n//             1Username\n//             </label>\n//             <input\n//               type=\"text\"\n//               value={username}\n//               onChange={(e) => setUsername(e.target.value)}\n//             />\n//             {errors.username && (\n//               <p style={{ fontSize: \"10px\", color: \"red\" }}>\n//                 *{errors.username}\n//               </p>\n//             )}\n//             <label>\n//             Email\n//             </label>\n//             <input\n//               type=\"text\"\n//               value={email}\n//               onChange={(e) => {\n//                 setEmail(e.target.value);\n//               }}\n//             />\n//             {errors.email && (\n//               <p style={{ fontSize: \"10px\", color: \"red\" }}>*{errors.email}</p>\n//             )}\n//             <label>\n//             Password\n//             </label>\n//             <input\n//               type=\"password\"\n//               value={password}\n//               onChange={(e) => {\n//                 setPassword(e.target.value);\n//               }}\n//             />\n//             {errors.password && (\n//               <p style={{ fontSize: \"10px\", color: \"red\" }}>\n//                 *{errors.password}\n//               </p>\n//             )}\n\n//           <label>\n//             Confirm Password\n//             </label>\n//             <input\n//               type=\"password\"\n//               value={confirmPassword}\n//               onChange={(e) => {\n//                 setConfirmPassword(e.target.value);\n//               }}\n//             />\n//             {errors.confirmPassword && (\n//               <p style={{ fontSize: \"10px\", color: \"red\" }}>\n//                 *{errors.confirmPassword}\n//               </p>\n//             )}\n//             <button type=\"submit\">Sign Up</button>\n//           </form>\n//           <div className=\"modal-link\">\n//             <a href=\"/login\">Already have an account? Log in!</a>\n//           </div>\n//         </div>\n//       </div>\n//     </>\n//   );\n// }\n\n// export default SignupFormModal;","map":{"version":3,"names":[],"sources":["/Users/yosephlatif/Desktop/philosophize/react-app/src/components/SignupFormModal/index.js"],"sourcesContent":["\n// import React, { useState } from \"react\";\n// import { useDispatch, useSelector } from \"react-redux\";\n// import { Redirect, useHistory } from \"react-router-dom\";\n// import { useModal } from \"../../context/Modal\";\n// import { signUp, authenticate } from \"../../store/session\";\n// import { Link } from \"react-router-dom\";\n// import \"./SignupForm.css\";\n\n// function SignupFormModal() {\n//   const dispatch = useDispatch();\n//   const [email, setEmail] = useState(\"\");\n//   const sessionMember = useSelector((state) => state.session.member)\n//   const [username, setUsername] = useState(\"\");\n//   const [password, setPassword] = useState(\"\");\n//   const [confirmPassword, setConfirmPassword] = useState(\"\");\n//   const { closeModal } = useModal();\n//   const history = useHistory();\n//   const [errors, setErrors] = useState([]);\n  \n\n//   const disabled =\n//     !username||\n//     !email ||\n//     !password ||\n//     !confirmPassword;\n\n//   if (sessionMember) return <Redirect to=\"/\" />;\n\n//   function isEmail(val) {\n//     let regEmail =\n//       /^(([^<>()\\[\\]\\\\.,;:\\s@\"]+(\\.[^<>()\\[\\]\\\\.,;:\\s@\"]+)*)|(\".+\"))@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}])|(([a-zA-Z\\-0-9]+\\.)+[a-zA-Z]{2,}))$/;\n//     if (!regEmail.test(val)) {\n//       return false;\n//     } else {\n//       return true;\n//     }\n//   }\n\n//   const handleSubmit = async (e) => {\n//     e.preventDefault();\n\n//     let errorList = {};\n\n//     const response = await fetch(\"/api/auth/signup\", {\n//       method: \"POST\",\n//       headers: {\n//         \"Content-Type\": \"application/json\",\n//       },\n//       body: JSON.stringify({\n//         username,\n//         email,\n//         password,\n//       }),\n//     });\n\n//     const checkUnique = await fetch('/api/auth/validate-unique', {\n//       method: 'POST',\n//       headers: {\n//         'Content-Type': 'application/json',\n//       },\n//       body: JSON.stringify({ username, email }),\n//     });\n  \n//     if (!checkUnique.ok) {\n//       const uniqueErrors = await checkUnique.json();\n//       setErrors(prev => ({ ...prev, ...uniqueErrors }));\n//       return;\n//     }\n\n\n//     const data = await response.json();\n//     if (!response.ok) {\n//       // Assuming the server responds with a status code of 400 or similar on error\n//       setErrors(data.errors || [\"An unexpected error occurred.\"]);\n//     } else {\n//       closeModal();\n//       history.push(\"/\");\n//     }\n\n//     if (!username) errorList.username = \"Username is required\";\n//     if (!email || !email.includes(\"@\"))\n//       errorList.email = \"Valid email is required\";\n//     if (!password || password.length<6) errorList.password = \"Password must be at least 6 characters\";\n//     if (!confirmPassword) errorList.confirmPassword = \"Confirm Password is required\";\n//     if (!isEmail(email)) errorList.email = \"Valid email is required\";\n//     if (password.length < 6) errorList.password = \"Password must be at least 6 characters\";\n//     if (password !== confirmPassword)\n//       errorList.confirmPassword = \"Passwords must match\";\n//     if (!checkUnique.username.ok) errorList.username = \"Username is already taken\";\n\n//     if (Object.values(errorList).length > 0) {\n//       setErrors(errorList);\n//       return;\n//     }\n\n//     if (password === confirmPassword) {\n//       setErrors({});\n//       const response = await dispatch(\n//         signUp({\n//           username,\n//           email,\n//           password,\n//         })\n//       ).catch((res) => res);\n//       if (response && response[0].startsWith(\"email\")) {\n//         const errorList_email = { \"email\": response[0].slice(8) };\n//         setErrors(errorList_email);\n//       } else {\n//         dispatch(authenticate());\n//         history.push('/')\n//       }\n//     } else {\n//     return setErrors({\n//       confirmPassword:\n//         \"Confirm Password field must be the same as the Password field\",\n//     });\n//   }\n//   };\n\n//   return (\n//     <>\n//       <div className=\"modal-backdrop\">\n//         <div className=\"modal-content\">\n//           <div className=\"modal-header\">Sign Up</div>\n//           <form onSubmit={handleSubmit} className=\"modal-form\">\n//             <Link to=\"/\" className=\"close-modal-button\">\n//               Back to Home Page\n//             </Link>\n//             <label>\n//             1Username\n//             </label>\n//             <input\n//               type=\"text\"\n//               value={username}\n//               onChange={(e) => setUsername(e.target.value)}\n//             />\n//             {errors.username && (\n//               <p style={{ fontSize: \"10px\", color: \"red\" }}>\n//                 *{errors.username}\n//               </p>\n//             )}\n//             <label>\n//             Email\n//             </label>\n//             <input\n//               type=\"text\"\n//               value={email}\n//               onChange={(e) => {\n//                 setEmail(e.target.value);\n//               }}\n//             />\n//             {errors.email && (\n//               <p style={{ fontSize: \"10px\", color: \"red\" }}>*{errors.email}</p>\n//             )}\n//             <label>\n//             Password\n//             </label>\n//             <input\n//               type=\"password\"\n//               value={password}\n//               onChange={(e) => {\n//                 setPassword(e.target.value);\n//               }}\n//             />\n//             {errors.password && (\n//               <p style={{ fontSize: \"10px\", color: \"red\" }}>\n//                 *{errors.password}\n//               </p>\n//             )}\n\n//           <label>\n//             Confirm Password\n//             </label>\n//             <input\n//               type=\"password\"\n//               value={confirmPassword}\n//               onChange={(e) => {\n//                 setConfirmPassword(e.target.value);\n//               }}\n//             />\n//             {errors.confirmPassword && (\n//               <p style={{ fontSize: \"10px\", color: \"red\" }}>\n//                 *{errors.confirmPassword}\n//               </p>\n//             )}\n//             <button type=\"submit\">Sign Up</button>\n//           </form>\n//           <div className=\"modal-link\">\n//             <a href=\"/login\">Already have an account? Log in!</a>\n//           </div>\n//         </div>\n//       </div>\n//     </>\n//   );\n// }\n\n// export default SignupFormModal;\n"],"mappings":";AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAGA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA"},"metadata":{},"sourceType":"module"}