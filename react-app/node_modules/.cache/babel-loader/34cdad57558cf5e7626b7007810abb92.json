{"ast":null,"code":"var _jsxFileName = \"/Users/yosephlatif/Desktop/philosophize/react-app/src/components/CommentsPage/CommentsPage.js\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState } from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { useHistory } from \"react-router-dom\";\nimport { useModal } from \"../../context/Modal\";\nimport { fetchTopicOfTheDay, createComment, editComment, removeComment, fetchCommentsForTopic } from \"../../store/topics\";\nimport ConfirmationModal from \"../Topics/TopicDeleteConfirm\";\nimport thethinker from \"./thethinker.png\";\nimport \"./CommentsPage.css\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst CommentsPage = () => {\n  _s();\n  const dispatch = useDispatch();\n  const history = useHistory();\n  const topicOfTheDay = useSelector(state => state.topics.topicOfTheDay);\n  const comments = useSelector(state => Object.values(state.topics.comments));\n  const [content, setContent] = useState(\"\");\n  const [errors, setErrors] = useState([]);\n  const [editCommentId, setEditCommentId] = useState(null);\n  const [editedContent, setEditedContent] = useState(\"\");\n  const [editingErrors, setEditingErrors] = useState({});\n  const user = useSelector(state => state.session.user);\n  const currentUserId = user === null || user === void 0 ? void 0 : user.id;\n  const [contentError, setContentError] = useState(\"\");\n  const [showDeleteConfirmation, setShowDeleteConfirmation] = useState(false);\n  const [commentToDelete, setCommentToDelete] = useState(null);\n  const {\n    openModal\n  } = useModal();\n  useEffect(() => {\n    dispatch(fetchTopicOfTheDay());\n  }, [dispatch]);\n  useEffect(() => {\n    if (topicOfTheDay) {\n      dispatch(fetchCommentsForTopic(topicOfTheDay.id));\n    }\n  }, [dispatch, topicOfTheDay]);\n  useEffect(() => {\n    if (content.length >= 50 && content.length <= 1000) {\n      setContentError(\"\");\n    } else if (content.length > 1000) {\n      setContentError(\"Max limit of 1000 characters reached\");\n    } else if (content.length > 0) {\n      setContentError(\"Content must be at least 50 characters\");\n    }\n  }, [content]);\n  const handleLoginRedirect = () => {\n    history.push(\"/login\");\n  };\n  const handleSubmit = async e => {\n    e.preventDefault();\n    if (contentError || content.length === 0) {\n      return;\n    }\n    const commentData = {\n      content\n    };\n    try {\n      const res = await dispatch(createComment(topicOfTheDay.id, commentData));\n      setContent(\"\");\n      dispatch(fetchCommentsForTopic(topicOfTheDay.id));\n    } catch (error) {\n      console.error(\"Error creating topic:\", error);\n    }\n  };\n  const handleEdit = comment => {\n    setEditCommentId(comment.id);\n    setEditedContent(comment.content);\n    setEditingErrors({}); // Clear any previous editing errors\n  };\n\n  const handleCancelEdit = () => {\n    setEditCommentId(null);\n    setEditedContent(\"\");\n    setEditingErrors({}); // Clear any editing errors\n  };\n\n  const handleOpenLoginModal = () => {\n    openModal(\"login\");\n  };\n  const handleUpdate = async commentId => {\n    // Check if the edited content meets the length requirement\n    if (editedContent.trim().length < 50) {\n      setContentError(\"Content must be at least 50 characters\");\n      return; // Stop the update if the content is too short\n    }\n\n    // If the content length is valid, clear any previous error messages\n    setContentError(\"\");\n    try {\n      await dispatch(editComment(commentId, {\n        content: editedContent.trim()\n      }));\n      setEditCommentId(null); // Reset edit state\n      setEditedContent(\"\"); // Clear the edited content state\n      dispatch(fetchCommentsForTopic(topicOfTheDay.id)); // Refresh comments\n    } catch (error) {\n      console.error(\"Error updating comment:\", error);\n    }\n  };\n  const handleDelete = async commentId => {\n    try {\n      await dispatch(removeComment(commentId));\n      dispatch(fetchCommentsForTopic(topicOfTheDay.id)); // Refresh comments\n    } catch (error) {\n      console.error(\"Error deleting comment:\", error);\n    }\n  };\n  const handleDeleteClick = commentId => {\n    setCommentToDelete(commentId);\n    setShowDeleteConfirmation(true);\n  };\n  const confirmDelete = async () => {\n    if (commentToDelete) {\n      try {\n        await dispatch(removeComment(commentToDelete));\n        dispatch(fetchCommentsForTopic(topicOfTheDay.id));\n        // Reset state and close modal\n        setCommentToDelete(null);\n        setShowDeleteConfirmation(false);\n      } catch (error) {\n        console.error(\"Error deleting comment:\", error);\n      }\n    }\n  };\n  const closeDeleteConfirmation = () => {\n    setShowDeleteConfirmation(false);\n    setCommentToDelete(null);\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"comments-container\",\n    children: topicOfTheDay ? /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"comment-topic\",\n        children: topicOfTheDay.title\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 148,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"comment-section\",\n        children: [/*#__PURE__*/_jsxDEV(\"img\", {\n          src: thethinker,\n          alt: \"Topic Image\",\n          className: \"comment-image\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 150,\n          columnNumber: 13\n        }, this), comments.map(comment => /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"\\ncomment\",\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"comment-info\",\n            children: [/*#__PURE__*/_jsxDEV(\"span\", {\n              className: \"comment-username\",\n              children: comment.username || \"User\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 172,\n              columnNumber: 19\n            }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n              className: \"said-landing\",\n              children: \"said:\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 175,\n              columnNumber: 19\n            }, this), editCommentId === comment.id ? /*#__PURE__*/_jsxDEV(_Fragment, {\n              children: [/*#__PURE__*/_jsxDEV(\"textarea\", {\n                className: \"comment-edit-textarea\",\n                value: editedContent,\n                onChange: e => setEditedContent(e.target.value)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 178,\n                columnNumber: 23\n              }, this), editingErrors[comment.id] && /*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"error-message\",\n                children: editingErrors[comment.id]\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 184,\n                columnNumber: 25\n              }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"comment-actions\",\n                children: [/*#__PURE__*/_jsxDEV(\"button\", {\n                  onClick: () => handleUpdate(comment.id),\n                  children: \"Save\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 189,\n                  columnNumber: 25\n                }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n                  onClick: handleCancelEdit,\n                  children: \"Cancel\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 192,\n                  columnNumber: 25\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 188,\n                columnNumber: 23\n              }, this)]\n            }, void 0, true) : /*#__PURE__*/_jsxDEV(\"span\", {\n              className: \"comment-content\",\n              children: comment.content\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 196,\n              columnNumber: 21\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 171,\n            columnNumber: 17\n          }, this), currentUserId === comment.user_id && !editCommentId && /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"comment-actions\",\n            children: [/*#__PURE__*/_jsxDEV(\"button\", {\n              onClick: () => handleEdit(comment),\n              children: \"Edit\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 201,\n              columnNumber: 21\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              children: /*#__PURE__*/_jsxDEV(ConfirmationModal, {\n                isOpen: showDeleteConfirmation,\n                onClose: closeDeleteConfirmation,\n                onConfirm: confirmDelete,\n                children: \"Are you sure you want to delete this comment?\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 203,\n                columnNumber: 23\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 202,\n              columnNumber: 21\n            }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n              onClick: () => handleDeleteClick(comment.id),\n              disabled: currentUserId !== comment.user_id,\n              children: \"Delete\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 211,\n              columnNumber: 21\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 200,\n            columnNumber: 19\n          }, this)]\n        }, comment.id, true, {\n          fileName: _jsxFileName,\n          lineNumber: 166,\n          columnNumber: 15\n        }, this))]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 149,\n        columnNumber: 11\n      }, this), user ? /*#__PURE__*/_jsxDEV(\"form\", {\n        onSubmit: handleSubmit,\n        className: \"new-comment-form\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          children: [/*#__PURE__*/_jsxDEV(\"label\", {\n            htmlFor: \"new-comment\",\n            children: \"Join the Discussion!\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 225,\n            columnNumber: 17\n          }, this), /*#__PURE__*/_jsxDEV(\"textarea\", {\n            id: \"new-comment\",\n            value: content,\n            onChange: e => setContent(e.target.value)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 226,\n            columnNumber: 17\n          }, this), contentError && /*#__PURE__*/_jsxDEV(\"p\", {\n            className: \"error\",\n            children: contentError\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 231,\n            columnNumber: 34\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 224,\n          columnNumber: 15\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          type: \"submit\",\n          children: \"Add Comment\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 233,\n          columnNumber: 15\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 223,\n        columnNumber: 13\n      }, this) : /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: handleLoginRedirect,\n        className: \"login-to-comment\",\n        children: \"Please log in to comment!\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 236,\n        columnNumber: 13\n      }, this)]\n    }, void 0, true) : /*#__PURE__*/_jsxDEV(\"p\", {\n      children: \"Loading topic...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 242,\n      columnNumber: 9\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 145,\n    columnNumber: 5\n  }, this);\n};\n_s(CommentsPage, \"EuYxHxodDqO26ovIllz5vVZVj9A=\", false, function () {\n  return [useDispatch, useHistory, useSelector, useSelector, useSelector, useModal];\n});\n_c = CommentsPage;\nexport default CommentsPage;\nvar _c;\n$RefreshReg$(_c, \"CommentsPage\");","map":{"version":3,"names":["React","useEffect","useState","useDispatch","useSelector","useHistory","useModal","fetchTopicOfTheDay","createComment","editComment","removeComment","fetchCommentsForTopic","ConfirmationModal","thethinker","CommentsPage","dispatch","history","topicOfTheDay","state","topics","comments","Object","values","content","setContent","errors","setErrors","editCommentId","setEditCommentId","editedContent","setEditedContent","editingErrors","setEditingErrors","user","session","currentUserId","id","contentError","setContentError","showDeleteConfirmation","setShowDeleteConfirmation","commentToDelete","setCommentToDelete","openModal","length","handleLoginRedirect","push","handleSubmit","e","preventDefault","commentData","res","error","console","handleEdit","comment","handleCancelEdit","handleOpenLoginModal","handleUpdate","commentId","trim","handleDelete","handleDeleteClick","confirmDelete","closeDeleteConfirmation","title","map","username","target","value","user_id"],"sources":["/Users/yosephlatif/Desktop/philosophize/react-app/src/components/CommentsPage/CommentsPage.js"],"sourcesContent":["import React, { useEffect, useState } from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { useHistory } from \"react-router-dom\";\nimport { useModal } from \"../../context/Modal\";\nimport {\n  fetchTopicOfTheDay,\n  createComment,\n  editComment,\n  removeComment,\n  fetchCommentsForTopic,\n} from \"../../store/topics\";\nimport ConfirmationModal from \"../Topics/TopicDeleteConfirm\";\nimport thethinker from \"./thethinker.png\";\nimport \"./CommentsPage.css\";\n\nconst CommentsPage = () => {\n  const dispatch = useDispatch();\n  const history = useHistory();\n  const topicOfTheDay = useSelector((state) => state.topics.topicOfTheDay);\n  const comments = useSelector((state) => Object.values(state.topics.comments));\n  const [content, setContent] = useState(\"\");\n  const [errors, setErrors] = useState([]);\n\n  const [editCommentId, setEditCommentId] = useState(null);\n  const [editedContent, setEditedContent] = useState(\"\");\n  const [editingErrors, setEditingErrors] = useState({});\n  const user = useSelector((state) => state.session.user);\n  const currentUserId = user?.id;\n\n  const [contentError, setContentError] = useState(\"\");\n  const [showDeleteConfirmation, setShowDeleteConfirmation] = useState(false);\n  const [commentToDelete, setCommentToDelete] = useState(null);\n  const { openModal } = useModal();\n\n  useEffect(() => {\n    dispatch(fetchTopicOfTheDay());\n  }, [dispatch]);\n\n  useEffect(() => {\n    if (topicOfTheDay) {\n      dispatch(fetchCommentsForTopic(topicOfTheDay.id));\n    }\n  }, [dispatch, topicOfTheDay]);\n\n  useEffect(() => {\n    if (content.length >= 50 && content.length <= 1000) {\n      setContentError(\"\");\n    } else if (content.length > 1000) {\n      setContentError(\"Max limit of 1000 characters reached\");\n    } else if (content.length > 0) {\n      setContentError(\"Content must be at least 50 characters\");\n    }\n  }, [content]);\n\n  const handleLoginRedirect = () => {\n    history.push(\"/login\");\n  };\n\n  const handleSubmit = async (e) => {\n    e.preventDefault();\n    if (contentError || content.length === 0) {\n      return;\n    }\n\n    const commentData = { content };\n    try {\n      const res = await dispatch(createComment(topicOfTheDay.id, commentData));\n      setContent(\"\");\n      dispatch(fetchCommentsForTopic(topicOfTheDay.id));\n    } catch (error) {\n      console.error(\"Error creating topic:\", error);\n    }\n  };\n\n  const handleEdit = (comment) => {\n    setEditCommentId(comment.id);\n    setEditedContent(comment.content);\n    setEditingErrors({}); // Clear any previous editing errors\n  };\n\n  const handleCancelEdit = () => {\n    setEditCommentId(null);\n    setEditedContent(\"\");\n    setEditingErrors({}); // Clear any editing errors\n  };\n\n  const handleOpenLoginModal = () => {\n    openModal(\"login\");\n  };\n\n  const handleUpdate = async (commentId) => {\n    // Check if the edited content meets the length requirement\n    if (editedContent.trim().length < 50) {\n      setContentError(\"Content must be at least 50 characters\");\n      return; // Stop the update if the content is too short\n    }\n\n    // If the content length is valid, clear any previous error messages\n    setContentError(\"\");\n\n    try {\n      await dispatch(editComment(commentId, { content: editedContent.trim() }));\n      setEditCommentId(null); // Reset edit state\n      setEditedContent(\"\"); // Clear the edited content state\n      dispatch(fetchCommentsForTopic(topicOfTheDay.id)); // Refresh comments\n    } catch (error) {\n      console.error(\"Error updating comment:\", error);\n    }\n  };\n\n  const handleDelete = async (commentId) => {\n    try {\n      await dispatch(removeComment(commentId));\n      dispatch(fetchCommentsForTopic(topicOfTheDay.id)); // Refresh comments\n    } catch (error) {\n      console.error(\"Error deleting comment:\", error);\n    }\n  };\n\n  const handleDeleteClick = (commentId) => {\n    setCommentToDelete(commentId);\n    setShowDeleteConfirmation(true);\n  };\n\n  const confirmDelete = async () => {\n    if (commentToDelete) {\n      try {\n        await dispatch(removeComment(commentToDelete));\n        dispatch(fetchCommentsForTopic(topicOfTheDay.id));\n        // Reset state and close modal\n        setCommentToDelete(null);\n        setShowDeleteConfirmation(false);\n      } catch (error) {\n        console.error(\"Error deleting comment:\", error);\n      }\n    }\n  };\n\n  const closeDeleteConfirmation = () => {\n    setShowDeleteConfirmation(false);\n    setCommentToDelete(null);\n  };\n\n  return (\n    <div className=\"comments-container\">\n      {topicOfTheDay ? (\n        <>\n          <div className=\"comment-topic\">{topicOfTheDay.title}</div>\n          <div className=\"comment-section\">\n            <img src={thethinker} alt=\"Topic Image\" className=\"comment-image\" />\n            {/* {comments.map((comment) => (\n              <div key={comment.id} className=\"comment\">\n                {editCommentId === comment.id ? (\n                  <input\n                    type=\"text\"\n                    value={editedContent}\n                    onChange={(e) => setEditedContent(e.target.value)}\n                  />\n                ) : (\n                  <p>\n                    {comment.username || \"User\"} said: {comment.content}\n                  </p>\n                )} */}\n\n            {comments.map((comment) => (\n              <div\n                key={comment.id}\n                className=\"\ncomment\"\n              >\n                <div className=\"comment-info\">\n                  <span className=\"comment-username\">\n                    {comment.username || \"User\"}\n                  </span>\n                  <span className=\"said-landing\">said:</span>\n                  {editCommentId === comment.id ? (\n                    <>\n                      <textarea\n                        className=\"comment-edit-textarea\"\n                        value={editedContent}\n                        onChange={(e) => setEditedContent(e.target.value)}\n                      ></textarea>\n                      {editingErrors[comment.id] && (\n                        <div className=\"error-message\">\n                          {editingErrors[comment.id]}\n                        </div>\n                      )}\n                      <div className=\"comment-actions\">\n                        <button onClick={() => handleUpdate(comment.id)}>\n                          Save\n                        </button>\n                        <button onClick={handleCancelEdit}>Cancel</button>\n                      </div>\n                    </>\n                  ) : (\n                    <span className=\"comment-content\">{comment.content}</span>\n                  )}\n                </div>\n                {currentUserId === comment.user_id && !editCommentId && (\n                  <div className=\"comment-actions\">\n                    <button onClick={() => handleEdit(comment)}>Edit</button>\n                    <div>\n                      <ConfirmationModal\n                        isOpen={showDeleteConfirmation}\n                        onClose={closeDeleteConfirmation}\n                        onConfirm={confirmDelete}\n                      >\n                        Are you sure you want to delete this comment?\n                      </ConfirmationModal>\n                    </div>\n                    <button\n                      onClick={() => handleDeleteClick(comment.id)}\n                      disabled={currentUserId !== comment.user_id}\n                    >\n                      Delete\n                    </button>\n                  </div>\n                )}\n              </div>\n            ))}\n          </div>\n          {user ? (\n            <form onSubmit={handleSubmit} className=\"new-comment-form\">\n              <div>\n                <label htmlFor=\"new-comment\">Join the Discussion!</label>\n                <textarea\n                  id=\"new-comment\"\n                  value={content}\n                  onChange={(e) => setContent(e.target.value)}\n                />\n                {contentError && <p className=\"error\">{contentError}</p>}\n              </div>\n              <button type=\"submit\">Add Comment</button>\n            </form>\n          ) : (\n            <button onClick={handleLoginRedirect} className=\"login-to-comment\">\n              Please log in to comment!\n            </button>\n          )}\n        </>\n      ) : (\n        <p>Loading topic...</p>\n      )}\n    </div>\n  );\n};\n\nexport default CommentsPage;\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}