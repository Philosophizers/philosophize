{"ast":null,"code":"var _jsxFileName = \"/Users/yosephlatif/Desktop/philosophize/react-app/src/components/CommentsPage/CommentsPage.js\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState } from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { useHistory } from 'react-router-dom';\nimport { fetchTopicOfTheDay, createComment, editComment, removeComment, fetchCommentsForTopic } from \"../../store/topics\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst CommentsPage = () => {\n  _s();\n  const dispatch = useDispatch();\n  const topicOfTheDay = useSelector(state => state.topics.topicOfTheDay);\n  const comments = useSelector(state => Object.values(state.topics.comments));\n  const [content, setContent] = useState(\"\");\n  const [errors, setErrors] = useState([]);\n  const [editCommentId, setEditCommentId] = useState(null);\n  const [editedContent, setEditedContent] = useState(\"\");\n  const user = useSelector(state => state.session.user);\n  const currentUserId = user === null || user === void 0 ? void 0 : user.id;\n  const [contentError, setContentError] = useState(\"\");\n  useEffect(() => {\n    dispatch(fetchTopicOfTheDay());\n  }, [dispatch]);\n  useEffect(() => {\n    if (topicOfTheDay) {\n      dispatch(fetchCommentsForTopic(topicOfTheDay.id));\n    }\n  }, [dispatch, topicOfTheDay]);\n  useEffect(() => {\n    if (content.length >= 50 && content.length <= 1000) {\n      setContentError(\"\");\n    } else if (content.length > 1000) {\n      setContentError(\"Max limit of 1000 characters reached\");\n    } else if (content.length > 0) {\n      setContentError(\"Content must be at least 50 characters\");\n    }\n  }, [content]);\n\n  // const handleSubmit = async (e) => {\n  //   e.preventDefault();\n  //   let newErrors = [];\n\n  //   if (newErrors.length > 0) {\n  //     setErrors(newErrors);\n  //     return;\n  //   }\n\n  //   const commentData = { content };\n  //   try {\n  //     const res = await dispatch(createComment(topicOfTheDay.id, commentData));\n  //     console.log(\"res\", res);\n\n  //     dispatch(fetchCommentsForTopic(topicOfTheDay.id));\n  //   } catch (error) {\n  //     console.error(\"Error creating topic:\", error);\n  //   }\n  // };\n\n  const handleSubmit = async e => {\n    e.preventDefault();\n    if (contentError || content.length === 0) {\n      // Handle the case when there are errors or the field is empty\n      return;\n    }\n    const commentData = {\n      content\n    };\n    try {\n      const res = await dispatch(createComment(topicOfTheDay.id, commentData));\n      console.log(\"res\", res);\n      setContent(\"\"); // Reset content after successful submission\n      dispatch(fetchCommentsForTopic(topicOfTheDay.id));\n    } catch (error) {\n      console.error(\"Error creating topic:\", error);\n    }\n  };\n  const handleEdit = comment => {\n    setEditCommentId(comment.id);\n    setEditedContent(comment.content);\n  };\n  const handleUpdate = async commentId => {\n    if (editedContent.trim() === \"\") {\n      // Handle empty content case, e.g., show an error message\n      return;\n    }\n    try {\n      await dispatch(editComment(commentId, {\n        content: editedContent\n      }));\n      setEditCommentId(null); // Reset edit state\n      dispatch(fetchCommentsForTopic(topicOfTheDay.id)); // Refresh comments\n    } catch (error) {\n      console.error(\"Error updating comment:\", error);\n    }\n  };\n  const handleDelete = async commentId => {\n    try {\n      await dispatch(removeComment(commentId));\n      dispatch(fetchCommentsForTopic(topicOfTheDay.id)); // Refresh comments\n    } catch (error) {\n      console.error(\"Error deleting comment:\", error);\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Comments\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 113,\n      columnNumber: 7\n    }, this), topicOfTheDay ? /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        children: comments.map(comment => /*#__PURE__*/_jsxDEV(\"div\", {\n          children: [editCommentId === comment.id ? /*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"text\",\n            value: editedContent,\n            onChange: e => setEditedContent(e.target.value)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 120,\n            columnNumber: 19\n          }, this) : /*#__PURE__*/_jsxDEV(\"p\", {\n            children: [comment.username || \"User\", \" said: \", comment.content]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 126,\n            columnNumber: 19\n          }, this), currentUserId === comment.user_id && /*#__PURE__*/_jsxDEV(_Fragment, {\n            children: [editCommentId === comment.id ? /*#__PURE__*/_jsxDEV(\"button\", {\n              onClick: () => handleUpdate(comment.id),\n              disabled: currentUserId !== comment.user_id,\n              children: \"Save\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 133,\n              columnNumber: 23\n            }, this) : /*#__PURE__*/_jsxDEV(\"button\", {\n              onClick: () => handleEdit(comment),\n              disabled: currentUserId !== comment.user_id,\n              children: \"Edit\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 140,\n              columnNumber: 23\n            }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n              onClick: () => handleDelete(comment.id),\n              disabled: currentUserId !== comment.user_id,\n              children: \"Delete\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 147,\n              columnNumber: 21\n            }, this)]\n          }, void 0, true)]\n        }, comment.id, true, {\n          fileName: _jsxFileName,\n          lineNumber: 118,\n          columnNumber: 15\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 116,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"form\", {\n        onSubmit: handleSubmit,\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          children: [/*#__PURE__*/_jsxDEV(\"label\", {\n            children: \"New Comment\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 173,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"textarea\", {\n            value: content,\n            onChange: e => setContent(e.target.value)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 174,\n            columnNumber: 15\n          }, this), contentError && /*#__PURE__*/_jsxDEV(\"p\", {\n            className: \"error\",\n            children: contentError\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 178,\n            columnNumber: 32\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 172,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          type: \"submit\",\n          children: \"Create Comment\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 180,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 171,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 115,\n      columnNumber: 9\n    }, this) : /*#__PURE__*/_jsxDEV(\"p\", {\n      children: \"Loading topic...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 184,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 112,\n    columnNumber: 5\n  }, this);\n};\n_s(CommentsPage, \"uFVT74VfZ/kksBWIsYZljN4iumE=\", false, function () {\n  return [useDispatch, useSelector, useSelector, useSelector];\n});\n_c = CommentsPage;\nexport default CommentsPage;\nvar _c;\n$RefreshReg$(_c, \"CommentsPage\");","map":{"version":3,"names":["React","useEffect","useState","useDispatch","useSelector","useHistory","fetchTopicOfTheDay","createComment","editComment","removeComment","fetchCommentsForTopic","CommentsPage","dispatch","topicOfTheDay","state","topics","comments","Object","values","content","setContent","errors","setErrors","editCommentId","setEditCommentId","editedContent","setEditedContent","user","session","currentUserId","id","contentError","setContentError","length","handleSubmit","e","preventDefault","commentData","res","console","log","error","handleEdit","comment","handleUpdate","commentId","trim","handleDelete","map","target","value","username","user_id"],"sources":["/Users/yosephlatif/Desktop/philosophize/react-app/src/components/CommentsPage/CommentsPage.js"],"sourcesContent":["import React, { useEffect, useState } from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { useHistory } from 'react-router-dom'; \nimport {\n  fetchTopicOfTheDay,\n  createComment,\n  editComment,\n  removeComment,\n  fetchCommentsForTopic,\n} from \"../../store/topics\";\nconst CommentsPage = () => {\n  const dispatch = useDispatch();\n  const topicOfTheDay = useSelector((state) => state.topics.topicOfTheDay);\n  const comments = useSelector((state) => Object.values(state.topics.comments));\n  const [content, setContent] = useState(\"\");\n  const [errors, setErrors] = useState([]);\n\n  const [editCommentId, setEditCommentId] = useState(null);\n  const [editedContent, setEditedContent] = useState(\"\");\n  const user = useSelector((state) => state.session.user);\n  const currentUserId = user?.id;\n\n  const [contentError, setContentError] = useState(\"\");\n\n  useEffect(() => {\n    dispatch(fetchTopicOfTheDay());\n  }, [dispatch]);\n\n  useEffect(() => {\n    if (topicOfTheDay) {\n      dispatch(fetchCommentsForTopic(topicOfTheDay.id));\n    }\n  }, [dispatch, topicOfTheDay]);\n\n  useEffect(() => {\n    if (content.length >= 50 && content.length <= 1000) {\n      setContentError(\"\");\n    } else if (content.length > 1000) {\n      setContentError(\"Max limit of 1000 characters reached\");\n    } else if (content.length > 0) {\n      setContentError(\"Content must be at least 50 characters\");\n    }\n  }, [content]);\n\n  // const handleSubmit = async (e) => {\n  //   e.preventDefault();\n  //   let newErrors = [];\n\n  //   if (newErrors.length > 0) {\n  //     setErrors(newErrors);\n  //     return;\n  //   }\n\n  //   const commentData = { content };\n  //   try {\n  //     const res = await dispatch(createComment(topicOfTheDay.id, commentData));\n  //     console.log(\"res\", res);\n\n  //     dispatch(fetchCommentsForTopic(topicOfTheDay.id));\n  //   } catch (error) {\n  //     console.error(\"Error creating topic:\", error);\n  //   }\n  // };\n\n  const handleSubmit = async (e) => {\n    e.preventDefault();\n    if (contentError || content.length === 0) {\n      // Handle the case when there are errors or the field is empty\n      return;\n    }\n\n    const commentData = { content };\n    try {\n      const res = await dispatch(createComment(topicOfTheDay.id, commentData));\n      console.log(\"res\", res);\n      setContent(\"\"); // Reset content after successful submission\n      dispatch(fetchCommentsForTopic(topicOfTheDay.id));\n    } catch (error) {\n      console.error(\"Error creating topic:\", error);\n    }\n  };\n\n  const handleEdit = (comment) => {\n    setEditCommentId(comment.id);\n    setEditedContent(comment.content);\n  };\n\n  const handleUpdate = async (commentId) => {\n    if (editedContent.trim() === \"\") {\n      // Handle empty content case, e.g., show an error message\n      return;\n    }\n    try {\n      await dispatch(editComment(commentId, { content: editedContent }));\n      setEditCommentId(null); // Reset edit state\n      dispatch(fetchCommentsForTopic(topicOfTheDay.id)); // Refresh comments\n    } catch (error) {\n      console.error(\"Error updating comment:\", error);\n    }\n  };\n\n  const handleDelete = async (commentId) => {\n    try {\n      await dispatch(removeComment(commentId));\n      dispatch(fetchCommentsForTopic(topicOfTheDay.id)); // Refresh comments\n    } catch (error) {\n      console.error(\"Error deleting comment:\", error);\n    }\n  };\n\n  return (\n    <div>\n      <h1>Comments</h1>\n      {topicOfTheDay ? (\n        <div>\n          <div>\n            {comments.map((comment) => (\n              <div key={comment.id}>\n                {editCommentId === comment.id ? (\n                  <input\n                    type=\"text\"\n                    value={editedContent}\n                    onChange={(e) => setEditedContent(e.target.value)}\n                  />\n                ) : (\n                  <p>\n                    {comment.username || \"User\"} said: {comment.content}\n                  </p>\n                )}\n                {currentUserId === comment.user_id && (\n                  <>\n                    {editCommentId === comment.id ? (\n                      <button\n                        onClick={() => handleUpdate(comment.id)}\n                        disabled={currentUserId !== comment.user_id}\n                      >\n                        Save\n                      </button>\n                    ) : (\n                      <button\n                        onClick={() => handleEdit(comment)}\n                        disabled={currentUserId !== comment.user_id}\n                      >\n                        Edit\n                      </button>\n                    )}\n                    <button\n                      onClick={() => handleDelete(comment.id)}\n                      disabled={currentUserId !== comment.user_id}\n                    >\n                      Delete\n                    </button>\n                  </>\n                )}\n              </div>\n            ))}\n          </div>\n          {/* <form onSubmit={handleSubmit}>\n            <div>\n              <label>New Comment</label>\n              <input\n                type=\"text\"\n                value={content}\n                onChange={(e) => setContent(e.target.value)}\n              />\n              {errors.content && <p>{errors.content}</p>}\n            </div>\n            <button type=\"submit\">Create Comment</button>\n          </form> */}\n\n          <form onSubmit={handleSubmit}>\n            <div>\n              <label>New Comment</label>\n              <textarea\n                value={content}\n                onChange={(e) => setContent(e.target.value)}\n              />\n              {contentError && <p className=\"error\">{contentError}</p>}\n            </div>\n            <button type=\"submit\">Create Comment</button>\n          </form>\n        </div>\n      ) : (\n        <p>Loading topic...</p>\n      )}\n    </div>\n  );\n};\n\nexport default CommentsPage;\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}