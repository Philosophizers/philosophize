{"ast":null,"code":"var _jsxFileName = \"/Users/yosephlatif/Desktop/philosophize/react-app/src/components/Topics/TopicList.js\",\n  _s = $RefreshSig$();\n// import React, { useState, useEffect } from 'react';\n// import { useDispatch, useSelector } from 'react-redux';\n// import Topic from './Topic';\n// import TopicForm from './TopicForm';\n// import { fetchTopics, editTopic, createTopic, removeTopic } from '../../store/topics';\n// import { castVote, removeVote } from '../../store/topics';\n\n// const TopicList = () => {\n//     const dispatch = useDispatch();\n//     const topics = useSelector(state => Object.values(state.topics));\n//     const [showForm, setShowForm] = useState(false);\n//     const [editingTopic, setEditingTopic] = useState(null);\n\n//     const [votecheck, voteChecked] = useState({\n//       topicID: null, \n//       vote: 0,\n//       });\n\n//     useEffect(() => {\n//       dispatch(fetchTopics()).catch(console.error);\n//     }, [dispatch]);\n\n//     const handleCreateTopic = async (topicData) => {\n//         try {\n//             const res = await dispatch(createTopic(topicData));\n//             if (!res.errors) {\n//                 setShowForm(false);\n//                 dispatch(fetchTopics());\n//             } else {\n//                 console.error('Failed to create topic:', res.errors);\n//             }\n//         } catch (error) {\n//             console.error('Error creating topic:', error);\n//         }\n//     };\n\n//     const handleEditTopic = async (topicData) => {\n//         try {\n//             const res = await dispatch(editTopic(editingTopic.id, topicData));\n//             if (!res.errors) {\n//                 setShowForm(false);\n//                 setEditingTopic(null);\n//                 dispatch(fetchTopics());\n//             } else {\n//                 console.error('Failed to update topic:', res.errors);\n//             }\n//         } catch (error) {\n//             console.error('Error updating topic:', error);\n//         }\n//     };\n\n//     // const handleDeleteTopic = async (topicId) => {\n//     //     try {\n//     //         const response = await fetch(`/api/topics/${topicId}`, { method: 'DELETE' });\n//     //         if (!response.ok) throw new Error('Network response was not ok');\n//     //         dispatch(removeTopic(topicId));\n//     //     } catch (error) {\n//     //         console.error('Error deleting topic:', error);\n//     //     }\n//     // };\n\n//     const handleDeleteTopic = async (topicId) => {\n//       try {\n//         const response = await fetch(`/api/topics/${topicId}`, { method: 'DELETE' });\n//         if (!response.ok) throw new Error('Network response was not ok');\n//         dispatch(removeTopic(topicId));\n//         // Wait for state update before trying to re-render the topics list\n//         await dispatch(fetchTopics());\n//       } catch (error) {\n//         console.error('Error deleting topic:', error);\n//       }\n//     };\n\n//     const handleEditClick = (topic) => {\n//         setEditingTopic(topic);\n//         setShowForm(true);\n//     };\n\n//     const handleVote = (topicId) => {\n//       count = 0;\n//       voteChecked((topicId), count++);\n//     };\n\n//     const handleUnvote = (topicId) => {\n//       count = 1;\n//       voteChecked((topicId), count--);\n//     };\n\n//     if (!topics || topics.length === 0) {\n//       return <p>Loading topics...</p>;\n//     }\n\n//     if (!Array.isArray(topics)) {\n//       console.error('Expected topics to be an array but got:', topics);\n//       return <p>Error: Topics data is not an array.</p>;\n//     }\n\n//     topics.map(topic => {\n//       if (!topic) {\n//         console.error('Null or undefined topic found', topic);\n//         return null; // or some placeholder component\n//       }\n//       const hasVoted = topic.hasVoted ?? false;\n//       return (\n//         <Topic\n//         key={topic.id}\n//         topic={topic}\n//         onEdit={handleEditClick}\n//         onDelete={handleDeleteTopic}\n//         onVote={() => handleVote(topic.id)}\n//         onUnvote={() => handleUnvote(topic.id)}\n//         hasVoted={hasVoted}\n//         />\n//       );\n//     })\n\n//     return (\n//         <div>\n//             <h1>Topics</h1>\n//             <button onClick={() => {\n//               setShowForm(true);\n//               setEditingTopic(null); // Reset editing topic\n//             }}>\n//               Create New Topic\n//             </button>\n//             {showForm && (\n//                 <TopicForm\n//                     existingTopic={editingTopic}\n//                     onSubmit={editingTopic ? handleEditTopic : handleCreateTopic}\n//                     onCancel={() => {\n//                         setShowForm(false);\n//                         setEditingTopic(null);\n//                     }}\n//                 />\n//             )}\n\n//             {/* <ul>\n//                 {topics.length > 0 ? (\n//                     topics.map(topic => (\n//                         <Topic\n//                             key={topic.id}\n//                             topic={topic}\n//                             onEdit={handleEditClick}\n//                             onDelete={handleDeleteTopic}\n//                         />\n//                     ))\n//                 ) : (\n//                     <p>Loading topics...</p>\n//                 )}\n//             </ul> */}\n\n// <ul>\n//   {topics && topics.length > 0 && topics.map(topic => (\n//     <Topic\n//       key={topic ? topic.id : undefined}\n//       topic={topic}\n//       onEdit={handleEditClick}\n//       onDelete={handleDeleteTopic}\n//       onVote={handleVote}\n//       onUnvote={handleUnvote}\n//     />\n//   ))}\n// </ul>\n\n//         </div>\n//     );\n// };\n\n// export default TopicList;\n\n// import React, { useState, useEffect } from 'react';\n// import { useDispatch, useSelector } from 'react-redux';\n// import Topic from './Topic';\n// import TopicForm from './TopicForm';\n// import { fetchTopics, editTopic, createTopic, removeTopic } from '../../store/topics';\n// import { castVote, removeVote } from '../../store/topics';\n\n// const TopicList = () => {\n//     const dispatch = useDispatch();\n//     const topics = useSelector(state => Object.values(state.topics));\n//     const [showForm, setShowForm] = useState(false);\n//     const [editingTopic, setEditingTopic] = useState(null);\n\n//     useEffect(() => {\n//       dispatch(fetchTopics()).catch(console.error);\n//     }, [dispatch]);\n\n//     const handleCreateTopic = async (topicData) => {\n//         try {\n//             const res = await dispatch(createTopic(topicData));\n//             if (!res.errors) {\n//                 setShowForm(false);\n//                 dispatch(fetchTopics());\n//             } else {\n//                 console.error('Failed to create topic:', res.errors);\n//             }\n//         } catch (error) {\n//             console.error('Error creating topic:', error);\n//         }\n//     };\n\n//     const handleEditTopic = async (topicData) => {\n//         try {\n//             const res = await dispatch(editTopic(editingTopic.id, topicData));\n//             if (!res.errors) {\n//                 setShowForm(false);\n//                 setEditingTopic(null);\n//                 dispatch(fetchTopics());\n//             } else {\n//                 console.error('Failed to update topic:', res.errors);\n//             }\n//         } catch (error) {\n//             console.error('Error updating topic:', error);\n//         }\n//     };\n\n//     // const handleDeleteTopic = async (topicId) => {\n//     //     try {\n//     //         const response = await fetch(`/api/topics/${topicId}`, { method: 'DELETE' });\n//     //         if (!response.ok) throw new Error('Network response was not ok');\n//     //         dispatch(removeTopic(topicId));\n//     //     } catch (error) {\n//     //         console.error('Error deleting topic:', error);\n//     //     }\n//     // };\n\n//     const handleDeleteTopic = async (topicId) => {\n//       try {\n//         const response = await fetch(`/api/topics/${topicId}`, { method: 'DELETE' });\n//         if (!response.ok) throw new Error('Network response was not ok');\n//         dispatch(removeTopic(topicId));\n//         // Wait for state update before trying to re-render the topics list\n//         await dispatch(fetchTopics());\n//       } catch (error) {\n//         console.error('Error deleting topic:', error);\n//       }\n//     };\n\n//     const handleEditClick = (topic) => {\n//         setEditingTopic(topic);\n//         setShowForm(true);\n//     };\n\n//     const handleVote = (topicId) => {\n//       console.log(\"hahaha\")\n//       dispatch(castVote(topicId));\n//       console.log(\"hahaha111\")\n//     };\n\n//     const handleUnvote = (topicId) => {\n//       dispatch(removeVote(topicId));\n//     };\n\n//     if (!topics || topics.length === 0) {\n//       return <p>Loading topics...</p>;\n//     }\n\n//     if (!Array.isArray(topics)) {\n//       console.error('Expected topics to be an array but got:', topics);\n//       return <p>Error: Topics data is not an array.</p>;\n//     }\n\n//     topics.map(topic => {\n//       if (!topic) {\n//         console.error('Null or undefined topic found', topic);\n//         return null; // or some placeholder component\n//       }\n//       const hasVoted = topic.hasVoted ?? false;\n//       return (\n//         <Topic\n//         key={topic.id}\n//         topic={topic}\n//         onEdit={handleEditClick}\n//         onDelete={handleDeleteTopic}\n//         onVote={() => handleVote(topic.id)}\n//         onUnvote={() => handleUnvote(topic.id)}\n//         hasVoted={hasVoted}\n//         />\n//       );\n//     })\n\n//     return (\n//         <div>\n//             <h1>Topics</h1>\n//             <button onClick={() => {\n//               setShowForm(true);\n//               setEditingTopic(null); // Reset editing topic\n//             }}>\n//               Create New Topic\n//             </button>\n//             {showForm && (\n//                 <TopicForm\n//                     existingTopic={editingTopic}\n//                     onSubmit={editingTopic ? handleEditTopic : handleCreateTopic}\n//                     onCancel={() => {\n//                         setShowForm(false);\n//                         setEditingTopic(null);\n//                     }}\n//                 />\n//             )}\n\n//             {/* <ul>\n//                 {topics.length > 0 ? (\n//                     topics.map(topic => (\n//                         <Topic\n//                             key={topic.id}\n//                             topic={topic}\n//                             onEdit={handleEditClick}\n//                             onDelete={handleDeleteTopic}\n//                         />\n//                     ))\n//                 ) : (\n//                     <p>Loading topics...</p>\n//                 )}\n//             </ul> */}\n\n// <ul>\n//   {topics && topics.length > 0 && topics.map(topic => (\n//     <Topic\n//       key={topic ? topic.id : undefined}\n//       topic={topic}\n//       onEdit={handleEditClick}\n//       onDelete={handleDeleteTopic}\n//       onVote={handleVote}\n//       onUnvote={handleUnvote}\n//     />\n//   ))}\n// </ul>\n\n//         </div>\n//     );\n// };\n\n// export default TopicList;\n\nimport React, { useState, useEffect } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport Topic from './Topic';\nimport TopicForm from './TopicForm';\nimport { fetchTopics, editTopic, createTopic, removeTopic, castVote, removeVote } from '../../store/topics';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst TopicList = () => {\n  _s();\n  const dispatch = useDispatch();\n  const topicsFromStore = useSelector(state => Object.values(state.topics));\n  const [topics, setTopics] = useState(topicsFromStore);\n  const [showForm, setShowForm] = useState(false);\n  const [editingTopic, setEditingTopic] = useState(null);\n  useEffect(() => {\n    dispatch(fetchTopics()).then(data => {\n      console.log(\"Topics from store:\", data); // Log the data from the store\n      if (data) {\n        // More robust filtering to exclude null or undefined topics\n        const validTopics = data.filter(topic => topic && topic.id != null);\n        setTopics(validTopics);\n      }\n    }).catch(error => {\n      console.error('Error fetching topics:', error);\n    });\n  }, [dispatch]);\n  const handleCreateTopic = async topicData => {\n    try {\n      const res = await dispatch(createTopic(topicData));\n      if (!res.errors) {\n        setShowForm(false);\n        dispatch(fetchTopics());\n      } else {\n        console.error('Failed to create topic:', res.errors);\n      }\n    } catch (error) {\n      console.error('Error creating topic:', error);\n    }\n  };\n  const handleEditTopic = async topicData => {\n    try {\n      const res = await dispatch(editTopic(editingTopic.id, topicData));\n      if (!res.errors) {\n        setShowForm(false);\n        setEditingTopic(null);\n        dispatch(fetchTopics());\n      } else {\n        console.error('Failed to update topic:', res.errors);\n      }\n    } catch (error) {\n      console.error('Error updating topic:', error);\n    }\n  };\n\n  // const handleDeleteTopic = async (topicId) => {\n  //     try {\n  //         const response = await fetch(`/api/topics/${topicId}`, { method: 'DELETE' });\n  //         if (!response.ok) throw new Error('Network response was not ok');\n  //         dispatch(removeTopic(topicId));\n  //     } catch (error) {\n  //         console.error('Error deleting topic:', error);\n  //     }\n  // };\n\n  const handleDeleteTopic = async topicId => {\n    try {\n      const response = await fetch(`/api/topics/${topicId}`, {\n        method: 'DELETE'\n      });\n      if (!response.ok) throw new Error('Network response was not ok');\n      dispatch(removeTopic(topicId));\n      // Wait for state update before trying to re-render the topics list\n      await dispatch(fetchTopics());\n    } catch (error) {\n      console.error('Error deleting topic:', error);\n    }\n  };\n  const handleEditClick = topic => {\n    setEditingTopic(topic);\n    setShowForm(true);\n  };\n  const handleVote = async topicId => {\n    // Dispatch the voting action\n    const updatedTopic = await dispatch(castVote(topicId));\n    if (updatedTopic) {\n      // Update the local state with the new vote count\n      const newTopics = topics.map(topic => topic.id === topicId ? {\n        ...topic,\n        vote_count: topic.vote_count + 1\n      } : topic);\n      setTopics(newTopics);\n    }\n  };\n  const handleUnvote = async topicId => {\n    // Dispatch the unvoting action\n    const updatedTopic = await dispatch(removeVote(topicId));\n    if (updatedTopic) {\n      // Update the local state to decrement the vote count\n      const newTopics = topics.map(topic => topic.id === topicId ? {\n        ...topic,\n        vote_count: topic.vote_count - 1\n      } : topic);\n      setTopics(newTopics);\n    }\n  };\n  if (!topics || topics.length === 0) {\n    return /*#__PURE__*/_jsxDEV(\"p\", {\n      children: \"Loading topics...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 464,\n      columnNumber: 20\n    }, this);\n  }\n  if (!Array.isArray(topics)) {\n    console.error('Expected topics to be an array but got:', topics);\n    return /*#__PURE__*/_jsxDEV(\"p\", {\n      children: \"Error: Topics data is not an array.\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 470,\n      columnNumber: 20\n    }, this);\n  }\n  topics.map(topic => {\n    var _topic$hasVoted;\n    if (!topic) {\n      console.error('Null or undefined topic found', topic);\n      return null; // or some placeholder component\n    }\n\n    const hasVoted = (_topic$hasVoted = topic.hasVoted) !== null && _topic$hasVoted !== void 0 ? _topic$hasVoted : false;\n    return /*#__PURE__*/_jsxDEV(Topic, {\n      topic: topic,\n      onEdit: handleEditClick,\n      onDelete: handleDeleteTopic,\n      onVote: () => handleVote(topic.id),\n      onUnvote: () => handleUnvote(topic.id),\n      hasVoted: hasVoted\n    }, topic.id, false, {\n      fileName: _jsxFileName,\n      lineNumber: 481,\n      columnNumber: 15\n    }, this);\n  });\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Topics\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 495,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n      children: topics && topics.length > 0 && topics.map(topic => {\n        if (!topic || !topic.id) {\n          console.error('Invalid topic encountered', topic);\n          return null; // Skip rendering for invalid topics\n        }\n\n        return /*#__PURE__*/_jsxDEV(Topic, {\n          topic: topic,\n          onEdit: handleEditClick,\n          onDelete: handleDeleteTopic,\n          onVote: handleVote,\n          onUnvote: handleUnvote,\n          hasVoted: false // Modify as needed\n        }, topic.id, false, {\n          fileName: _jsxFileName,\n          lineNumber: 504,\n          columnNumber: 19\n        }, this);\n      })\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 497,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 494,\n    columnNumber: 9\n  }, this);\n};\n_s(TopicList, \"6Eac2EFr5Rq8angXX/V5S49VA1w=\", false, function () {\n  return [useDispatch, useSelector];\n});\n_c = TopicList;\nexport default TopicList;\nvar _c;\n$RefreshReg$(_c, \"TopicList\");","map":{"version":3,"names":["React","useState","useEffect","useDispatch","useSelector","Topic","TopicForm","fetchTopics","editTopic","createTopic","removeTopic","castVote","removeVote","TopicList","dispatch","topicsFromStore","state","Object","values","topics","setTopics","showForm","setShowForm","editingTopic","setEditingTopic","then","data","console","log","validTopics","filter","topic","id","catch","error","handleCreateTopic","topicData","res","errors","handleEditTopic","handleDeleteTopic","topicId","response","fetch","method","ok","Error","handleEditClick","handleVote","updatedTopic","newTopics","map","vote_count","handleUnvote","length","Array","isArray","hasVoted"],"sources":["/Users/yosephlatif/Desktop/philosophize/react-app/src/components/Topics/TopicList.js"],"sourcesContent":["// import React, { useState, useEffect } from 'react';\n// import { useDispatch, useSelector } from 'react-redux';\n// import Topic from './Topic';\n// import TopicForm from './TopicForm';\n// import { fetchTopics, editTopic, createTopic, removeTopic } from '../../store/topics';\n// import { castVote, removeVote } from '../../store/topics';\n\n// const TopicList = () => {\n//     const dispatch = useDispatch();\n//     const topics = useSelector(state => Object.values(state.topics));\n//     const [showForm, setShowForm] = useState(false);\n//     const [editingTopic, setEditingTopic] = useState(null);\n\n\n//     const [votecheck, voteChecked] = useState({\n//       topicID: null, \n//       vote: 0,\n//       });\n\n//     useEffect(() => {\n//       dispatch(fetchTopics()).catch(console.error);\n//     }, [dispatch]);\n\n//     const handleCreateTopic = async (topicData) => {\n//         try {\n//             const res = await dispatch(createTopic(topicData));\n//             if (!res.errors) {\n//                 setShowForm(false);\n//                 dispatch(fetchTopics());\n//             } else {\n//                 console.error('Failed to create topic:', res.errors);\n//             }\n//         } catch (error) {\n//             console.error('Error creating topic:', error);\n//         }\n//     };\n\n//     const handleEditTopic = async (topicData) => {\n//         try {\n//             const res = await dispatch(editTopic(editingTopic.id, topicData));\n//             if (!res.errors) {\n//                 setShowForm(false);\n//                 setEditingTopic(null);\n//                 dispatch(fetchTopics());\n//             } else {\n//                 console.error('Failed to update topic:', res.errors);\n//             }\n//         } catch (error) {\n//             console.error('Error updating topic:', error);\n//         }\n//     };\n\n//     // const handleDeleteTopic = async (topicId) => {\n//     //     try {\n//     //         const response = await fetch(`/api/topics/${topicId}`, { method: 'DELETE' });\n//     //         if (!response.ok) throw new Error('Network response was not ok');\n//     //         dispatch(removeTopic(topicId));\n//     //     } catch (error) {\n//     //         console.error('Error deleting topic:', error);\n//     //     }\n//     // };\n\n//     const handleDeleteTopic = async (topicId) => {\n//       try {\n//         const response = await fetch(`/api/topics/${topicId}`, { method: 'DELETE' });\n//         if (!response.ok) throw new Error('Network response was not ok');\n//         dispatch(removeTopic(topicId));\n//         // Wait for state update before trying to re-render the topics list\n//         await dispatch(fetchTopics());\n//       } catch (error) {\n//         console.error('Error deleting topic:', error);\n//       }\n//     };\n    \n\n\n//     const handleEditClick = (topic) => {\n//         setEditingTopic(topic);\n//         setShowForm(true);\n//     };\n\n//     const handleVote = (topicId) => {\n//       count = 0;\n//       voteChecked((topicId), count++);\n//     };\n  \n//     const handleUnvote = (topicId) => {\n//       count = 1;\n//       voteChecked((topicId), count--);\n//     };\n\n//     if (!topics || topics.length === 0) {\n//       return <p>Loading topics...</p>;\n//     }\n\n\n//     if (!Array.isArray(topics)) {\n//       console.error('Expected topics to be an array but got:', topics);\n//       return <p>Error: Topics data is not an array.</p>;\n//     }\n    \n\n//     topics.map(topic => {\n//       if (!topic) {\n//         console.error('Null or undefined topic found', topic);\n//         return null; // or some placeholder component\n//       }\n//       const hasVoted = topic.hasVoted ?? false;\n//       return (\n//         <Topic\n//         key={topic.id}\n//         topic={topic}\n//         onEdit={handleEditClick}\n//         onDelete={handleDeleteTopic}\n//         onVote={() => handleVote(topic.id)}\n//         onUnvote={() => handleUnvote(topic.id)}\n//         hasVoted={hasVoted}\n//         />\n//       );\n//     })\n    \n\n    \n\n//     return (\n//         <div>\n//             <h1>Topics</h1>\n//             <button onClick={() => {\n//               setShowForm(true);\n//               setEditingTopic(null); // Reset editing topic\n//             }}>\n//               Create New Topic\n//             </button>\n//             {showForm && (\n//                 <TopicForm\n//                     existingTopic={editingTopic}\n//                     onSubmit={editingTopic ? handleEditTopic : handleCreateTopic}\n//                     onCancel={() => {\n//                         setShowForm(false);\n//                         setEditingTopic(null);\n//                     }}\n//                 />\n//             )}\n\n//             {/* <ul>\n//                 {topics.length > 0 ? (\n//                     topics.map(topic => (\n//                         <Topic\n//                             key={topic.id}\n//                             topic={topic}\n//                             onEdit={handleEditClick}\n//                             onDelete={handleDeleteTopic}\n//                         />\n//                     ))\n//                 ) : (\n//                     <p>Loading topics...</p>\n//                 )}\n//             </ul> */}\n\n// <ul>\n//   {topics && topics.length > 0 && topics.map(topic => (\n//     <Topic\n//       key={topic ? topic.id : undefined}\n//       topic={topic}\n//       onEdit={handleEditClick}\n//       onDelete={handleDeleteTopic}\n//       onVote={handleVote}\n//       onUnvote={handleUnvote}\n//     />\n//   ))}\n// </ul>\n\n//         </div>\n//     );\n// };\n\n// export default TopicList;\n\n\n\n// import React, { useState, useEffect } from 'react';\n// import { useDispatch, useSelector } from 'react-redux';\n// import Topic from './Topic';\n// import TopicForm from './TopicForm';\n// import { fetchTopics, editTopic, createTopic, removeTopic } from '../../store/topics';\n// import { castVote, removeVote } from '../../store/topics';\n\n// const TopicList = () => {\n//     const dispatch = useDispatch();\n//     const topics = useSelector(state => Object.values(state.topics));\n//     const [showForm, setShowForm] = useState(false);\n//     const [editingTopic, setEditingTopic] = useState(null);\n\n//     useEffect(() => {\n//       dispatch(fetchTopics()).catch(console.error);\n//     }, [dispatch]);\n\n//     const handleCreateTopic = async (topicData) => {\n//         try {\n//             const res = await dispatch(createTopic(topicData));\n//             if (!res.errors) {\n//                 setShowForm(false);\n//                 dispatch(fetchTopics());\n//             } else {\n//                 console.error('Failed to create topic:', res.errors);\n//             }\n//         } catch (error) {\n//             console.error('Error creating topic:', error);\n//         }\n//     };\n\n//     const handleEditTopic = async (topicData) => {\n//         try {\n//             const res = await dispatch(editTopic(editingTopic.id, topicData));\n//             if (!res.errors) {\n//                 setShowForm(false);\n//                 setEditingTopic(null);\n//                 dispatch(fetchTopics());\n//             } else {\n//                 console.error('Failed to update topic:', res.errors);\n//             }\n//         } catch (error) {\n//             console.error('Error updating topic:', error);\n//         }\n//     };\n\n//     // const handleDeleteTopic = async (topicId) => {\n//     //     try {\n//     //         const response = await fetch(`/api/topics/${topicId}`, { method: 'DELETE' });\n//     //         if (!response.ok) throw new Error('Network response was not ok');\n//     //         dispatch(removeTopic(topicId));\n//     //     } catch (error) {\n//     //         console.error('Error deleting topic:', error);\n//     //     }\n//     // };\n\n//     const handleDeleteTopic = async (topicId) => {\n//       try {\n//         const response = await fetch(`/api/topics/${topicId}`, { method: 'DELETE' });\n//         if (!response.ok) throw new Error('Network response was not ok');\n//         dispatch(removeTopic(topicId));\n//         // Wait for state update before trying to re-render the topics list\n//         await dispatch(fetchTopics());\n//       } catch (error) {\n//         console.error('Error deleting topic:', error);\n//       }\n//     };\n    \n\n\n//     const handleEditClick = (topic) => {\n//         setEditingTopic(topic);\n//         setShowForm(true);\n//     };\n\n//     const handleVote = (topicId) => {\n//       console.log(\"hahaha\")\n//       dispatch(castVote(topicId));\n//       console.log(\"hahaha111\")\n//     };\n  \n//     const handleUnvote = (topicId) => {\n//       dispatch(removeVote(topicId));\n//     };\n\n//     if (!topics || topics.length === 0) {\n//       return <p>Loading topics...</p>;\n//     }\n\n\n//     if (!Array.isArray(topics)) {\n//       console.error('Expected topics to be an array but got:', topics);\n//       return <p>Error: Topics data is not an array.</p>;\n//     }\n    \n\n//     topics.map(topic => {\n//       if (!topic) {\n//         console.error('Null or undefined topic found', topic);\n//         return null; // or some placeholder component\n//       }\n//       const hasVoted = topic.hasVoted ?? false;\n//       return (\n//         <Topic\n//         key={topic.id}\n//         topic={topic}\n//         onEdit={handleEditClick}\n//         onDelete={handleDeleteTopic}\n//         onVote={() => handleVote(topic.id)}\n//         onUnvote={() => handleUnvote(topic.id)}\n//         hasVoted={hasVoted}\n//         />\n//       );\n//     })\n    \n\n    \n\n//     return (\n//         <div>\n//             <h1>Topics</h1>\n//             <button onClick={() => {\n//               setShowForm(true);\n//               setEditingTopic(null); // Reset editing topic\n//             }}>\n//               Create New Topic\n//             </button>\n//             {showForm && (\n//                 <TopicForm\n//                     existingTopic={editingTopic}\n//                     onSubmit={editingTopic ? handleEditTopic : handleCreateTopic}\n//                     onCancel={() => {\n//                         setShowForm(false);\n//                         setEditingTopic(null);\n//                     }}\n//                 />\n//             )}\n\n//             {/* <ul>\n//                 {topics.length > 0 ? (\n//                     topics.map(topic => (\n//                         <Topic\n//                             key={topic.id}\n//                             topic={topic}\n//                             onEdit={handleEditClick}\n//                             onDelete={handleDeleteTopic}\n//                         />\n//                     ))\n//                 ) : (\n//                     <p>Loading topics...</p>\n//                 )}\n//             </ul> */}\n\n// <ul>\n//   {topics && topics.length > 0 && topics.map(topic => (\n//     <Topic\n//       key={topic ? topic.id : undefined}\n//       topic={topic}\n//       onEdit={handleEditClick}\n//       onDelete={handleDeleteTopic}\n//       onVote={handleVote}\n//       onUnvote={handleUnvote}\n//     />\n//   ))}\n// </ul>\n\n//         </div>\n//     );\n// };\n\n// export default TopicList;\n\n\nimport React, { useState, useEffect } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport Topic from './Topic';\nimport TopicForm from './TopicForm';\nimport { fetchTopics, editTopic, createTopic, removeTopic, castVote, removeVote } from '../../store/topics';\n\nconst TopicList = () => {\n    const dispatch = useDispatch();\n    const topicsFromStore = useSelector(state => Object.values(state.topics));\n    const [topics, setTopics] = useState(topicsFromStore);\n    const [showForm, setShowForm] = useState(false);\n    const [editingTopic, setEditingTopic] = useState(null);\n\n    useEffect(() => {\n      dispatch(fetchTopics())\n          .then(data => {\n              console.log(\"Topics from store:\", data); // Log the data from the store\n              if (data) {\n                  // More robust filtering to exclude null or undefined topics\n                  const validTopics = data.filter(topic => topic && topic.id != null);\n                  setTopics(validTopics);\n              }\n          })\n          .catch(error => {\n              console.error('Error fetching topics:', error);\n          });\n  }, [dispatch]);\n\n    const handleCreateTopic = async (topicData) => {\n              try {\n                  const res = await dispatch(createTopic(topicData));\n                  if (!res.errors) {\n                      setShowForm(false);\n                      dispatch(fetchTopics());\n                  } else {\n                      console.error('Failed to create topic:', res.errors);\n                  }\n              } catch (error) {\n                  console.error('Error creating topic:', error);\n              }\n          };\n      \n          const handleEditTopic = async (topicData) => {\n              try {\n                  const res = await dispatch(editTopic(editingTopic.id, topicData));\n                  if (!res.errors) {\n                      setShowForm(false);\n                      setEditingTopic(null);\n                      dispatch(fetchTopics());\n                  } else {\n                      console.error('Failed to update topic:', res.errors);\n                  }\n              } catch (error) {\n                  console.error('Error updating topic:', error);\n              }\n          };\n      \n          // const handleDeleteTopic = async (topicId) => {\n          //     try {\n          //         const response = await fetch(`/api/topics/${topicId}`, { method: 'DELETE' });\n          //         if (!response.ok) throw new Error('Network response was not ok');\n          //         dispatch(removeTopic(topicId));\n          //     } catch (error) {\n          //         console.error('Error deleting topic:', error);\n          //     }\n          // };\n      \n          const handleDeleteTopic = async (topicId) => {\n            try {\n              const response = await fetch(`/api/topics/${topicId}`, { method: 'DELETE' });\n              if (!response.ok) throw new Error('Network response was not ok');\n              dispatch(removeTopic(topicId));\n              // Wait for state update before trying to re-render the topics list\n              await dispatch(fetchTopics());\n            } catch (error) {\n              console.error('Error deleting topic:', error);\n            }\n          };\n          \n      \n      \n          const handleEditClick = (topic) => {\n              setEditingTopic(topic);\n              setShowForm(true);\n          };\n\n    const handleVote = async (topicId) => {\n        // Dispatch the voting action\n        const updatedTopic = await dispatch(castVote(topicId));\n        if (updatedTopic) {\n            // Update the local state with the new vote count\n            const newTopics = topics.map(topic => \n                topic.id === topicId ? { ...topic, vote_count: topic.vote_count + 1 } : topic\n            );\n            setTopics(newTopics);\n        }\n    };\n  \n    const handleUnvote = async (topicId) => {\n        // Dispatch the unvoting action\n        const updatedTopic = await dispatch(removeVote(topicId));\n        if (updatedTopic) {\n            // Update the local state to decrement the vote count\n            const newTopics = topics.map(topic => \n                topic.id === topicId ? { ...topic, vote_count: topic.vote_count - 1 } : topic\n            );\n            setTopics(newTopics);\n        }\n    };\n    if (!topics || topics.length === 0) {\n            return <p>Loading topics...</p>;\n          }\n      \n      \n          if (!Array.isArray(topics)) {\n            console.error('Expected topics to be an array but got:', topics);\n            return <p>Error: Topics data is not an array.</p>;\n          }\n          \n      \n          topics.map(topic => {\n            if (!topic) {\n              console.error('Null or undefined topic found', topic);\n              return null; // or some placeholder component\n            }\n            const hasVoted = topic.hasVoted ?? false;\n            return (\n              <Topic\n              key={topic.id}\n              topic={topic}\n              onEdit={handleEditClick}\n              onDelete={handleDeleteTopic}\n              onVote={() => handleVote(topic.id)}\n              onUnvote={() => handleUnvote(topic.id)}\n              hasVoted={hasVoted}\n              />\n            );\n          })\n\n    return (\n        <div>\n            <h1>Topics</h1>\n            {/* Button and Form logic... */}\n            <ul>\n              {topics && topics.length > 0 && topics.map(topic => {\n                if (!topic || !topic.id) {\n                    console.error('Invalid topic encountered', topic);\n                    return null; // Skip rendering for invalid topics\n                }\n                return (\n                  <Topic\n                    key={topic.id}\n                    topic={topic}\n                    onEdit={handleEditClick}\n                    onDelete={handleDeleteTopic}\n                    onVote={handleVote}\n                    onUnvote={handleUnvote}\n                    hasVoted={false} // Modify as needed\n                  />\n                );\n              })}\n            </ul>\n        </div>\n    );\n};\n\nexport default TopicList;\n"],"mappings":";;AAAA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAGA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAIA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAGA;AACA;AACA;AACA;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAKA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;;AAIA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAIA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAGA;AACA;AACA;AACA;;AAGA;AACA;AA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"},"metadata":{},"sourceType":"module"}