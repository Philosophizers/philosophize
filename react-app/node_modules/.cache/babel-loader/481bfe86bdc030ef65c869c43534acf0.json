{"ast":null,"code":"// src/store/topics.js\n\nconst GET_TOPICS = 'topics/GET_TOPICS';\nconst CREATE_TOPIC = 'topics/CREATE_TOPIC';\nconst REMOVE_TOPIC = 'topics/REMOVE_TOPIC';\nconst UPDATE_TOPIC = 'topics/UPDATE_TOPIC';\nconst SET_TOPIC_OF_THE_DAY = 'topics/SET_TOPIC_OF_THE_DAY';\nconst GET_COMMENTS = 'topics/GET_COMMENTS';\nconst ADD_COMMENT = 'topics/ADD_COMMENT';\nconst VOTE_FOR_TOPIC = 'topics/VOTE_FOR_TOPIC';\nconst UNVOTE_FOR_TOPIC = 'topics/UNVOTE_FOR_TOPIC';\nconst RESET_VOTES = 'topics/RESET_VOTES';\n\n// Action Creators\nconst getTopics = topics => ({\n  type: GET_TOPICS,\n  topics\n});\nexport const addTopic = topic => ({\n  type: CREATE_TOPIC,\n  topic\n});\n\n// Thunk Action Creators\nexport const fetchTopics = () => async dispatch => {\n  const response = await fetch('/api/topics');\n  if (response.ok) {\n    const topics = await response.json();\n    dispatch(getTopics(topics));\n  }\n};\nexport const updateTopic = topic => ({\n  type: UPDATE_TOPIC,\n  topic\n});\nexport const editTopic = (topicId, topicData) => async dispatch => {\n  const response = await fetch(`/api/topics/${topicId}`, {\n    method: 'PUT',\n    headers: {\n      'Content-Type': 'application/json'\n    },\n    body: JSON.stringify(topicData),\n    credentials: 'include'\n  });\n  if (response.ok) {\n    const updatedTopic = await response.json();\n    dispatch(updateTopic(updatedTopic));\n    return updatedTopic;\n  } else {\n    const errors = await response.json();\n    return errors;\n  }\n};\nexport const removeTopic = topicId => ({\n  type: REMOVE_TOPIC,\n  topicId\n});\nexport const createTopic = topicData => async dispatch => {\n  const response = await fetch('/api/topics/banana', {\n    method: 'POST',\n    headers: {\n      'Content-Type': 'application/json'\n    },\n    body: JSON.stringify(topicData)\n    // body: formInfo\n  });\n\n  if (response.ok) {\n    const newTopic = await response.json();\n    dispatch(addTopic(newTopic));\n    return newTopic;\n  } else {\n    const errors = await response.json();\n    return errors;\n  }\n};\n\n// Add new action creators\nexport const setTopicOfTheDay = topic => ({\n  type: SET_TOPIC_OF_THE_DAY,\n  topic\n});\nexport const getComments = comments => ({\n  type: GET_COMMENTS,\n  comments\n});\nexport const addComment = comment => ({\n  type: ADD_COMMENT,\n  comment\n});\n\n// export const voteForTopic = (topicId) => ({\n//   type: VOTE_FOR_TOPIC,\n//   topicId,\n// });\n\nexport const voteForTopic = updatedTopic => ({\n  type: VOTE_FOR_TOPIC,\n  topic: updatedTopic\n});\nexport const unvoteForTopic = topicId => ({\n  type: UNVOTE_FOR_TOPIC,\n  topicId\n});\n\n// Thunk for fetching the topic of the day\nexport const fetchTopicOfTheDay = () => async dispatch => {\n  const response = await fetch('/api/topics/topic-of-the-day');\n  if (response.ok) {\n    const topic = await response.json();\n    dispatch(setTopicOfTheDay(topic));\n  }\n};\n\n// Thunk for fetching comments of the topic of the day\nexport const fetchCommentsForTopic = topicId => async dispatch => {\n  const response = await fetch(`/api/comments/${topicId}`);\n  if (response.ok) {\n    const comments = await response.json();\n    dispatch(getComments(comments));\n  }\n};\n\n// export const castVote = (topicId) => async (dispatch) => {\n//   const response = await fetch(`/api/topics/${topicId}/vote`, {\n//     method: 'POST',\n//     headers: {\n//       'Content-Type': 'application/json'\n//     },\n//     // Make sure to include credentials if your API requires authentication\n//     credentials: 'include',\n//   });\n\n//   if (response.ok) {\n//     dispatch(voteForTopic(topicId));\n//   } else {\n//     // Handle errors, e.g., user has already voted\n//     const data = await response.json();\n//     alert(data.message); // Or handle the error message in a more user-friendly way\n//   }\n// };\n\nexport const castVote = topicId => async dispatch => {\n  const response = await fetch(`/api/topics/${topicId}/vote`, {\n    method: 'POST',\n    headers: {\n      'Content-Type': 'application/json'\n    },\n    credentials: 'include'\n  });\n  if (response.ok) {\n    const updatedTopic = await response.json();\n    console.log(\"Updated Topic:\", updatedTopic); // Log to check the updated topic\n    dispatch(voteForTopic(updatedTopic));\n  } else {\n    const data = await response.json();\n    alert(data.message);\n  }\n};\nexport const removeVote = topicId => async dispatch => {\n  const response = await fetch(`/api/topics/${topicId}/unvote`, {\n    method: 'POST',\n    headers: {\n      'Content-Type': 'application/json'\n    },\n    // Make sure to include credentials if your API requires authentication\n    credentials: 'include'\n  });\n  if (response.ok) {\n    dispatch(unvoteForTopic(topicId));\n  } else {\n    // Handle errors\n    const data = await response.json();\n    alert(data.message); // Or handle the error message in a more user-friendly way\n  }\n};\n\n// Adjust the initial state\nconst initialState = {\n  topics: {},\n  // Existing topics state\n  topicOfTheDay: null,\n  // New state for Topic of the Day\n  comments: {} // New state for comments\n};\n\n// Reducer\n\n// export default function topicsReducer(state = initialState, action) {\n//   switch (action.type) {\n//       case GET_TOPICS:\n//           const topicsNormalized = {};\n//           action.topics.forEach(topic => {\n//               topicsNormalized[topic.id] = topic;\n//           });\n//           return { ...state, ...topicsNormalized };\n//       case CREATE_TOPIC:\n//           return { ...state, [action.topic.id]: action.topic };\n//       default:\n//           return state;\n//   }\n// }\n\nexport default function topicsReducer() {\n  let state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : initialState;\n  let action = arguments.length > 1 ? arguments[1] : undefined;\n  switch (action.type) {\n    case GET_TOPICS:\n      return {\n        ...state,\n        ...Object.fromEntries(action.topics.map(topic => [topic.id, topic]))\n      };\n    case CREATE_TOPIC:\n      return {\n        ...state,\n        [action.topic.id]: action.topic\n      };\n    case UPDATE_TOPIC:\n      return {\n        ...state,\n        [action.topic.id]: action.topic\n      };\n    case REMOVE_TOPIC:\n      const newState = {\n        ...state\n      };\n      delete newState[action.topicId];\n      return newState;\n    case SET_TOPIC_OF_THE_DAY:\n      return {\n        ...state,\n        topicOfTheDay: action.topic\n      };\n    case GET_COMMENTS:\n      return {\n        ...state,\n        comments: {\n          ...action.comments\n        }\n      };\n    case ADD_COMMENT:\n      // Logic to add a new comment to the state\n      return {\n        ...state,\n        comments: {\n          ...state.comments,\n          [action.comment.id]: action.comment\n        }\n      };\n    //     case VOTE_FOR_TOPIC:\n    //   return {\n    //     ...state,\n    //     topics: {\n    //       ...state.topics,\n    //       [action.topicId]: {\n    //         ...state.topics[action.topicId],\n    //         hasVoted: true\n    //       }\n    //     }\n    //   };\n    // case UNVOTE_FOR_TOPIC:\n    //   return {\n    //     ...state,\n    //     topics: {\n    //       ...state.topics,\n    //       [action.topicId]: {\n    //         ...state.topics[action.topicId],\n    //         hasVoted: false\n    //       }\n    //     }\n    //   };\n    case VOTE_FOR_TOPIC:\n      console.log(\"Action:\", action);\n      console.log(\"Current State:\", state); // Log current state\n      const newTopic = {\n        ...state.topics[action.topic.id],\n        ...action.topic\n      };\n      console.log('ne topic', newTopic);\n      const updatedState = {\n        ...state,\n        topics: {\n          ...state.topics,\n          [action.topic.id]: newTopic\n        }\n      };\n      console.log(\"Updated State:\", updatedState); // Log updated state\n      return updatedState;\n    case UNVOTE_FOR_TOPIC:\n      return {\n        ...state,\n        topics: {\n          ...state.topics,\n          [action.topicId]: {\n            ...state.topics[action.topicId],\n            hasVoted: false,\n            vote_count: state.topics[action.topicId].vote_count - 1 // Decrement vote count\n          }\n        }\n      };\n\n    default:\n      return state;\n  }\n}","map":{"version":3,"names":["GET_TOPICS","CREATE_TOPIC","REMOVE_TOPIC","UPDATE_TOPIC","SET_TOPIC_OF_THE_DAY","GET_COMMENTS","ADD_COMMENT","VOTE_FOR_TOPIC","UNVOTE_FOR_TOPIC","RESET_VOTES","getTopics","topics","type","addTopic","topic","fetchTopics","dispatch","response","fetch","ok","json","updateTopic","editTopic","topicId","topicData","method","headers","body","JSON","stringify","credentials","updatedTopic","errors","removeTopic","createTopic","newTopic","setTopicOfTheDay","getComments","comments","addComment","comment","voteForTopic","unvoteForTopic","fetchTopicOfTheDay","fetchCommentsForTopic","castVote","console","log","data","alert","message","removeVote","initialState","topicOfTheDay","topicsReducer","state","action","Object","fromEntries","map","id","newState","updatedState","hasVoted","vote_count"],"sources":["/Users/yosephlatif/Desktop/philosophize/react-app/src/store/topics.js"],"sourcesContent":["// src/store/topics.js\n\n\nconst GET_TOPICS = 'topics/GET_TOPICS';\nconst CREATE_TOPIC = 'topics/CREATE_TOPIC';\nconst REMOVE_TOPIC = 'topics/REMOVE_TOPIC';\nconst UPDATE_TOPIC = 'topics/UPDATE_TOPIC';\nconst SET_TOPIC_OF_THE_DAY = 'topics/SET_TOPIC_OF_THE_DAY';\nconst GET_COMMENTS = 'topics/GET_COMMENTS';\nconst ADD_COMMENT = 'topics/ADD_COMMENT';\nconst VOTE_FOR_TOPIC = 'topics/VOTE_FOR_TOPIC';\nconst UNVOTE_FOR_TOPIC = 'topics/UNVOTE_FOR_TOPIC';\nconst RESET_VOTES = 'topics/RESET_VOTES';\n\n\n// Action Creators\nconst getTopics = (topics) => ({\n    type: GET_TOPICS,\n    topics\n});\n\nexport const addTopic = (topic) => ({\n    type: CREATE_TOPIC,\n    topic\n});\n\n// Thunk Action Creators\nexport const fetchTopics = () => async (dispatch) => {\n  const response = await fetch('/api/topics');\n  if (response.ok) {\n    const topics = await response.json();\n    dispatch(getTopics(topics));\n  }\n};\n\nexport const updateTopic = (topic) => ({\n  type: UPDATE_TOPIC,\n  topic\n});\n\nexport const editTopic = (topicId, topicData) => async (dispatch) => {\n  const response = await fetch(`/api/topics/${topicId}`, {\n      method: 'PUT',\n      headers: { 'Content-Type': 'application/json' },\n      body: JSON.stringify(topicData),\n      credentials: 'include',\n  });\n\n  if (response.ok) {\n      const updatedTopic = await response.json();\n      dispatch(updateTopic(updatedTopic));\n      return updatedTopic;\n  } else {\n      const errors = await response.json();\n      return errors;\n  }\n};\n\n\n\nexport const removeTopic = (topicId) => ({\n  type: REMOVE_TOPIC,\n  topicId\n});\n\n\nexport const createTopic = (topicData) => async (dispatch) => {\n    const response = await fetch('/api/topics/banana', {\n        method: 'POST',\n        headers: { 'Content-Type': 'application/json' },\n        body: JSON.stringify(topicData)\n        // body: formInfo\n    });\n\n    if (response.ok) {\n        const newTopic = await response.json();\n        dispatch(addTopic(newTopic));\n        return newTopic;\n    } else {\n        const errors = await response.json();\n        return errors;\n    }\n};\n\n// Add new action creators\nexport const setTopicOfTheDay = (topic) => ({\n  type: SET_TOPIC_OF_THE_DAY,\n  topic\n});\n\nexport const getComments = (comments) => ({\n  type: GET_COMMENTS,\n  comments\n});\n\nexport const addComment = (comment) => ({\n  type: ADD_COMMENT,\n  comment\n});\n\n\n\n// export const voteForTopic = (topicId) => ({\n//   type: VOTE_FOR_TOPIC,\n//   topicId,\n// });\n\nexport const voteForTopic = (updatedTopic) => ({\n  type: VOTE_FOR_TOPIC,\n  topic: updatedTopic,\n});\n\nexport const unvoteForTopic = (topicId) => ({\n  type: UNVOTE_FOR_TOPIC,\n  topicId,\n});\n\n\n// Thunk for fetching the topic of the day\nexport const fetchTopicOfTheDay = () => async (dispatch) => {\n  const response = await fetch('/api/topics/topic-of-the-day');\n  if (response.ok) {\n      const topic = await response.json();\n      dispatch(setTopicOfTheDay(topic));\n  }\n};\n\n// Thunk for fetching comments of the topic of the day\nexport const fetchCommentsForTopic = (topicId) => async (dispatch) => {\n  const response = await fetch(`/api/comments/${topicId}`);\n  if (response.ok) {\n      const comments = await response.json();\n      dispatch(getComments(comments));\n  }\n};\n\n// export const castVote = (topicId) => async (dispatch) => {\n//   const response = await fetch(`/api/topics/${topicId}/vote`, {\n//     method: 'POST',\n//     headers: {\n//       'Content-Type': 'application/json'\n//     },\n//     // Make sure to include credentials if your API requires authentication\n//     credentials: 'include',\n//   });\n\n//   if (response.ok) {\n//     dispatch(voteForTopic(topicId));\n//   } else {\n//     // Handle errors, e.g., user has already voted\n//     const data = await response.json();\n//     alert(data.message); // Or handle the error message in a more user-friendly way\n//   }\n// };\n\nexport const castVote = (topicId) => async (dispatch) => {\n  const response = await fetch(`/api/topics/${topicId}/vote`, {\n    method: 'POST',\n    headers: {\n      'Content-Type': 'application/json'\n    },\n    credentials: 'include',\n  });\n\n  if (response.ok) {\n    const updatedTopic = await response.json();\n    console.log(\"Updated Topic:\", updatedTopic); // Log to check the updated topic\n    dispatch(voteForTopic(updatedTopic));\n  } else {\n    const data = await response.json();\n    alert(data.message);\n  }\n};\n\n\n\nexport const removeVote = (topicId) => async (dispatch) => {\n  const response = await fetch(`/api/topics/${topicId}/unvote`, {\n    method: 'POST',\n    headers: {\n      'Content-Type': 'application/json'\n    },\n    // Make sure to include credentials if your API requires authentication\n    credentials: 'include',\n  });\n\n  if (response.ok) {\n    dispatch(unvoteForTopic(topicId));\n  } else {\n    // Handle errors\n    const data = await response.json();\n    alert(data.message); // Or handle the error message in a more user-friendly way\n  }\n};\n\n// Adjust the initial state\nconst initialState = {\n  topics: {}, // Existing topics state\n  topicOfTheDay: null, // New state for Topic of the Day\n  comments: {}, // New state for comments\n};\n\n// Reducer\n\n// export default function topicsReducer(state = initialState, action) {\n//   switch (action.type) {\n//       case GET_TOPICS:\n//           const topicsNormalized = {};\n//           action.topics.forEach(topic => {\n//               topicsNormalized[topic.id] = topic;\n//           });\n//           return { ...state, ...topicsNormalized };\n//       case CREATE_TOPIC:\n//           return { ...state, [action.topic.id]: action.topic };\n//       default:\n//           return state;\n//   }\n// }\n\n\nexport default function topicsReducer(state = initialState, action) {\n  switch (action.type) {\n      case GET_TOPICS:\n          return { ...state, ...Object.fromEntries(action.topics.map(topic => [topic.id, topic])) };\n      case CREATE_TOPIC:\n          return { ...state, [action.topic.id]: action.topic };\n      case UPDATE_TOPIC:\n            return {\n                ...state,\n                [action.topic.id]: action.topic\n            };\n      case REMOVE_TOPIC:\n          const newState = { ...state };\n          delete newState[action.topicId];\n          return newState;\n      case SET_TOPIC_OF_THE_DAY:\n            return { ...state, topicOfTheDay: action.topic };\n      case GET_COMMENTS:\n            return { ...state, comments: { ...action.comments } };\n      case ADD_COMMENT:\n            // Logic to add a new comment to the state\n            return { ...state, comments: { ...state.comments, [action.comment.id]: action.comment } };\n  //     case VOTE_FOR_TOPIC:\n  //   return {\n  //     ...state,\n  //     topics: {\n  //       ...state.topics,\n  //       [action.topicId]: {\n  //         ...state.topics[action.topicId],\n  //         hasVoted: true\n  //       }\n  //     }\n  //   };\n  // case UNVOTE_FOR_TOPIC:\n  //   return {\n  //     ...state,\n  //     topics: {\n  //       ...state.topics,\n  //       [action.topicId]: {\n  //         ...state.topics[action.topicId],\n  //         hasVoted: false\n  //       }\n  //     }\n  //   };\n  case VOTE_FOR_TOPIC:\n    console.log(\"Action:\", action)\n    console.log(\"Current State:\", state); // Log current state\n    const newTopic = {\n      ...state.topics[action.topic.id],\n      ...action.topic\n    }\n    console.log('ne topic', newTopic)\n    const updatedState = {\n      ...state,\n      topics: {\n        ...state.topics,\n        [action.topic.id]: newTopic\n      }\n    };\n    console.log(\"Updated State:\", updatedState); // Log updated state\n    return updatedState;\n\n  case UNVOTE_FOR_TOPIC:\n    return {\n      ...state,\n      topics: {\n        ...state.topics,\n        [action.topicId]: {\n          ...state.topics[action.topicId],\n          hasVoted: false,\n          vote_count: state.topics[action.topicId].vote_count - 1 // Decrement vote count\n        }\n      }\n    };\n      default:\n          return state;\n  }\n}"],"mappings":"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"},"metadata":{},"sourceType":"module"}