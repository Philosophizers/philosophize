{"ast":null,"code":"// src/store/topics.js\n\nconst GET_TOPICS = \"topics/GET_TOPICS\";\nconst CREATE_TOPIC = \"topics/CREATE_TOPIC\";\nconst REMOVE_TOPIC = \"topics/REMOVE_TOPIC\";\nconst UPDATE_TOPIC = \"topics/UPDATE_TOPIC\";\nconst SET_TOPIC_OF_THE_DAY = \"topics/SET_TOPIC_OF_THE_DAY\";\nconst GET_COMMENTS = \"topics/GET_COMMENTS\";\nconst ADD_COMMENT = \"topics/ADD_COMMENT\";\nconst VOTE_FOR_TOPIC = \"topics/VOTE_FOR_TOPIC\";\nconst UNVOTE_FOR_TOPIC = \"topics/UNVOTE_FOR_TOPIC\";\nconst RESET_VOTES = \"topics/RESET_VOTES\";\nconst USER_HAS_VOTED = \"topics/USER_HAS_VOTED\";\nconst UPDATE_COMMENT = \"topics/UPDATE_COMMENT\";\nconst DELETE_COMMENT = \"topics/DELETE_COMMENT\";\nconst RESET_USER_VOTE_STATUS = \"topics/RESET_USER_VOTE_STATUS\";\n\n// Action Creators\nconst getTopics = topics => ({\n  type: GET_TOPICS,\n  topics\n});\nexport const addTopic = topic => ({\n  type: CREATE_TOPIC,\n  topic\n});\n\n// Thunk Action Creators\nexport const fetchTopics = () => async dispatch => {\n  const response = await fetch(\"/api/topics\");\n  if (response.ok) {\n    const topics = await response.json();\n    dispatch(getTopics(topics));\n  }\n};\nexport const updateTopic = topic => ({\n  type: UPDATE_TOPIC,\n  topic\n});\nexport const editTopic = (topicId, topicData) => async dispatch => {\n  const url = `/api/topics/${topicId}`;\n  const response = await fetch(url, {\n    method: \"PUT\",\n    headers: {\n      \"Content-Type\": \"application/json\"\n    },\n    body: JSON.stringify(topicData),\n    credentials: \"include\"\n  });\n  if (response.ok) {\n    const updatedTopic = await response.json();\n    dispatch(updateTopic(updatedTopic));\n    return updatedTopic;\n  } else {\n    const errors = await response.json();\n    return errors;\n  }\n};\n\n// export const removeTopic = (topicId) => ({\n//   type: REMOVE_TOPIC,\n//   topicId,\n// });\n\nexport const removeTopic = topicId => async dispatch => {\n  try {\n    const response = await fetch(`/api/topics/${topicId}`, {\n      method: \"DELETE\"\n    });\n    if (response.ok) {\n      dispatch(removeTopic(topicId)); // Existing action to remove the topic from state\n      dispatch(resetUserVoteStatus()); // Reset vote status so the user can vote again\n      // Optionally, refetch topics or other related data\n      dispatch(fetchTopics()); // For example, to refresh the topics list\n    } else {\n      // Handle failure (e.g., show an error message)\n    }\n  } catch (error) {\n    console.error(\"Error deleting topic:\", error);\n  }\n};\nexport const createTopic = topicData => async dispatch => {\n  const response = await fetch(\"/api/topics/banana\", {\n    method: \"POST\",\n    headers: {\n      \"Content-Type\": \"application/json\"\n    },\n    body: JSON.stringify(topicData)\n    // body: formInfo\n  });\n\n  if (response.ok) {\n    const newTopic = await response.json();\n    dispatch(addTopic(newTopic));\n    return newTopic;\n  } else {\n    const errors = await response.json();\n    return errors;\n  }\n};\nexport const createComment = (topicId, commentData) => async dispatch => {\n  const response = await fetch(`/api/comments/${topicId}`, {\n    method: \"POST\",\n    headers: {\n      \"Content-Type\": \"application/json\"\n    },\n    body: JSON.stringify(commentData)\n    // body: formInfo\n  });\n\n  if (response.ok) {\n    const newComment = await response.json();\n    dispatch(addComment(newComment));\n    return newComment;\n  } else {\n    const errors = await response.json();\n    return errors;\n  }\n};\n\n// Add new action creators\nexport const setTopicOfTheDay = topic => ({\n  type: SET_TOPIC_OF_THE_DAY,\n  topic\n});\nexport const getComments = comments => ({\n  type: GET_COMMENTS,\n  comments\n});\nexport const addComment = comment => ({\n  type: ADD_COMMENT,\n  comment\n});\n\n// export const voteForTopic = (topicId) => ({\n//   type: VOTE_FOR_TOPIC,\n//   topicId,\n// });\n\nexport const voteForTopic = updatedTopic => ({\n  type: VOTE_FOR_TOPIC,\n  topic: updatedTopic\n});\nexport const unvoteForTopic = updatedTopic => ({\n  type: UNVOTE_FOR_TOPIC,\n  topic: updatedTopic\n});\n\n// Thunk for fetching the topic of the day\nexport const fetchTopicOfTheDay = () => async dispatch => {\n  const response = await fetch(\"/api/topics/topic-of-the-day\");\n  if (response.ok) {\n    const topic = await response.json();\n    dispatch(setTopicOfTheDay(topic));\n  }\n};\nexport const resetUserVoteStatus = () => ({\n  type: RESET_USER_VOTE_STATUS\n});\n\n//comments\n\nexport const updateComment = comment => ({\n  type: UPDATE_COMMENT,\n  comment\n});\nexport const deleteComment = commentId => ({\n  type: DELETE_COMMENT,\n  commentId\n});\nexport const userHasVotedStatus = hasVoted => ({\n  type: USER_HAS_VOTED,\n  hasVoted\n});\n\n// Thunk for fetching comments of the topic of the day\nexport const fetchCommentsForTopic = topicId => async dispatch => {\n  const response = await fetch(`/api/comments/${topicId}`);\n  if (response.ok) {\n    const comments = await response.json();\n    dispatch(getComments(comments));\n  }\n};\nexport const castVote = topicId => async dispatch => {\n  const response = await fetch(`/api/topics/${topicId}/vote`, {\n    method: \"POST\",\n    headers: {\n      \"Content-Type\": \"application/json\"\n    },\n    credentials: \"include\"\n  });\n  if (response.ok) {\n    const updatedTopic = await response.json();\n    dispatch(voteForTopic(updatedTopic));\n    dispatch(checkUserVote());\n  } else {\n    const data = await response.json();\n    alert(data.message);\n  }\n};\nexport const checkUserVote = () => async dispatch => {\n  try {\n    const response = await fetch('/api/votes/check-vote', {\n      method: 'GET',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      credentials: 'include'\n    });\n    if (response.ok) {\n      const data = await response.json();\n      const hasVoted = data.has_voted;\n      dispatch(userHasVotedStatus(hasVoted));\n    } else {\n      const errorData = await response.json();\n      // Handle error case, maybe show an alert or log the error\n      console.error('Error:', errorData.message);\n    }\n  } catch (error) {\n    // Handle any network errors or exceptions\n    console.error('Network Error:', error);\n  }\n};\nexport const removeVote = topicId => async dispatch => {\n  const response = await fetch(`/api/topics/${topicId}/unvote`, {\n    method: \"POST\",\n    headers: {\n      \"Content-Type\": \"application/json\"\n    },\n    // Make sure to include credentials if your API requires authentication\n    credentials: \"include\"\n  });\n  if (response.ok) {\n    const updatedTopic = await response.json();\n    dispatch(unvoteForTopic(updatedTopic));\n    dispatch(checkUserVote());\n  } else {\n    // Handle errors\n    const data = await response.json();\n    alert(data.message); // Or handle the error message in a more user-friendly way\n  }\n};\n\nexport const editComment = (commentId, commentData) => async dispatch => {\n  const response = await fetch(`/api/comments/${commentId}`, {\n    method: \"PUT\",\n    headers: {\n      \"Content-Type\": \"application/json\"\n    },\n    body: JSON.stringify(commentData)\n  });\n  if (response.ok) {\n    const updatedComment = await response.json();\n    dispatch(updateComment(updatedComment));\n    return updatedComment;\n  } else {\n    const errors = await response.json();\n    return errors;\n  }\n};\nexport const removeComment = commentId => async dispatch => {\n  const response = await fetch(`/api/comments/${commentId}`, {\n    method: \"DELETE\"\n  });\n  if (response.ok) {\n    dispatch(deleteComment(commentId));\n  } else {\n    const errors = await response.json();\n    return errors;\n  }\n};\n\n// Adjust the initial state\nconst initialState = {\n  topics: {},\n  // Existing topics state\n  topicOfTheDay: null,\n  // New state for Topic of the Day\n  comments: {} // New state for comments\n};\n\n// Reducer\n\nexport default function topicsReducer() {\n  let state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : initialState;\n  let action = arguments.length > 1 ? arguments[1] : undefined;\n  switch (action.type) {\n    // Existing cases...\n    case RESET_USER_VOTE_STATUS:\n      return {\n        ...state,\n        hasVoted: false // Assuming you have a `hasVoted` flag in your state\n      };\n    // case CREATE_TOPIC:\n    //   return { ...state, [action.topic.id]: action.topic };\n    case CREATE_TOPIC:\n      return {\n        ...state,\n        topics: {\n          [action.topic.id]: action.topic,\n          ...state.topics\n        }\n      };\n    case UPDATE_TOPIC:\n      return {\n        ...state,\n        [action.topic.id]: action.topic\n      };\n\n    //----------------------------------------------------------------------------------------\n    case REMOVE_TOPIC:\n      const newState = {\n        ...state\n      };\n      delete newState[action.topicId];\n      return newState;\n\n    //----------------------------------------------------------------------------------------\n\n    case SET_TOPIC_OF_THE_DAY:\n      return {\n        ...state,\n        topicOfTheDay: action.topic\n      };\n    case GET_COMMENTS:\n      return {\n        ...state,\n        comments: {\n          ...action.comments\n        }\n      };\n    case ADD_COMMENT:\n      // Logic to add a new comment to the state\n      return {\n        ...state,\n        comments: {\n          ...state.comments,\n          [action.comment.id]: action.comment\n        }\n      };\n    case VOTE_FOR_TOPIC:\n      const newTopic = {\n        ...state[action.topic.id],\n        ...action.topic\n      };\n      const updatedState = {\n        ...state,\n        [action.topic.id]: newTopic\n      };\n      return updatedState;\n    case USER_HAS_VOTED:\n      return {\n        ...state,\n        hasVoted: action.hasVoted\n      };\n    case UNVOTE_FOR_TOPIC:\n      return {\n        ...state,\n        [action.topic.id]: {\n          ...state[action.topic.id],\n          ...action.topic\n        }\n      };\n    case UPDATE_COMMENT:\n      return {\n        ...state,\n        comments: {\n          ...state.comments,\n          [action.comment.id]: action.comment\n        }\n      };\n    case DELETE_COMMENT:\n      const newComments = {\n        ...state.comments\n      };\n      delete newComments[action.commentId];\n      return {\n        ...state,\n        comments: newComments\n      };\n    default:\n      return state;\n  }\n}","map":{"version":3,"names":["GET_TOPICS","CREATE_TOPIC","REMOVE_TOPIC","UPDATE_TOPIC","SET_TOPIC_OF_THE_DAY","GET_COMMENTS","ADD_COMMENT","VOTE_FOR_TOPIC","UNVOTE_FOR_TOPIC","RESET_VOTES","USER_HAS_VOTED","UPDATE_COMMENT","DELETE_COMMENT","RESET_USER_VOTE_STATUS","getTopics","topics","type","addTopic","topic","fetchTopics","dispatch","response","fetch","ok","json","updateTopic","editTopic","topicId","topicData","url","method","headers","body","JSON","stringify","credentials","updatedTopic","errors","removeTopic","resetUserVoteStatus","error","console","createTopic","newTopic","createComment","commentData","newComment","addComment","setTopicOfTheDay","getComments","comments","comment","voteForTopic","unvoteForTopic","fetchTopicOfTheDay","updateComment","deleteComment","commentId","userHasVotedStatus","hasVoted","fetchCommentsForTopic","castVote","checkUserVote","data","alert","message","has_voted","errorData","removeVote","editComment","updatedComment","removeComment","initialState","topicOfTheDay","topicsReducer","state","action","id","newState","updatedState","newComments"],"sources":["/Users/yosephlatif/Desktop/philosophize/react-app/src/store/topics.js"],"sourcesContent":["// src/store/topics.js\n\nconst GET_TOPICS = \"topics/GET_TOPICS\";\nconst CREATE_TOPIC = \"topics/CREATE_TOPIC\";\nconst REMOVE_TOPIC = \"topics/REMOVE_TOPIC\";\nconst UPDATE_TOPIC = \"topics/UPDATE_TOPIC\";\nconst SET_TOPIC_OF_THE_DAY = \"topics/SET_TOPIC_OF_THE_DAY\";\nconst GET_COMMENTS = \"topics/GET_COMMENTS\";\nconst ADD_COMMENT = \"topics/ADD_COMMENT\";\nconst VOTE_FOR_TOPIC = \"topics/VOTE_FOR_TOPIC\";\nconst UNVOTE_FOR_TOPIC = \"topics/UNVOTE_FOR_TOPIC\";\nconst RESET_VOTES = \"topics/RESET_VOTES\";\nconst USER_HAS_VOTED = \"topics/USER_HAS_VOTED\";\n\nconst UPDATE_COMMENT = \"topics/UPDATE_COMMENT\";\nconst DELETE_COMMENT = \"topics/DELETE_COMMENT\";\n\nconst RESET_USER_VOTE_STATUS = \"topics/RESET_USER_VOTE_STATUS\";\n\n\n\n// Action Creators\nconst getTopics = (topics) => ({\n  type: GET_TOPICS,\n  topics,\n});\n\nexport const addTopic = (topic) => ({\n  type: CREATE_TOPIC,\n  topic,\n});\n\n// Thunk Action Creators\nexport const fetchTopics = () => async (dispatch) => {\n  const response = await fetch(\"/api/topics\");\n  if (response.ok) {\n    const topics = await response.json();\n    dispatch(getTopics(topics));\n  }\n};\n\n\nexport const updateTopic = (topic) => ({\n  type: UPDATE_TOPIC,\n  topic,\n});\n\nexport const editTopic = (topicId, topicData) => async (dispatch) => {\n  const url = `/api/topics/${topicId}`;\n\n  const response = await fetch(url, {\n    method: \"PUT\",\n    headers: { \"Content-Type\": \"application/json\" },\n    body: JSON.stringify(topicData),\n    credentials: \"include\",\n  });\n\n  if (response.ok) {\n    const updatedTopic = await response.json();\n    dispatch(updateTopic(updatedTopic));\n    return updatedTopic;\n  } else {\n    const errors = await response.json();\n    return errors;\n  }\n};\n\n// export const removeTopic = (topicId) => ({\n//   type: REMOVE_TOPIC,\n//   topicId,\n// });\n\nexport const removeTopic = (topicId) => async (dispatch) => {\n  try {\n      const response = await fetch(`/api/topics/${topicId}`, { method: \"DELETE\" });\n      if (response.ok) {\n          dispatch(removeTopic(topicId)); // Existing action to remove the topic from state\n          dispatch(resetUserVoteStatus()); // Reset vote status so the user can vote again\n          // Optionally, refetch topics or other related data\n          dispatch(fetchTopics()); // For example, to refresh the topics list\n      } else {\n          // Handle failure (e.g., show an error message)\n      }\n  } catch (error) {\n      console.error(\"Error deleting topic:\", error);\n  }\n};\n\n\n\nexport const createTopic = (topicData) => async (dispatch) => {\n  const response = await fetch(\"/api/topics/banana\", {\n    method: \"POST\",\n    headers: { \"Content-Type\": \"application/json\" },\n    body: JSON.stringify(topicData),\n    // body: formInfo\n  });\n\n  if (response.ok) {\n    const newTopic = await response.json();\n    dispatch(addTopic(newTopic));\n    return newTopic;\n  } else {\n    const errors = await response.json();\n    return errors;\n  }\n};\n\nexport const createComment = (topicId, commentData) => async (dispatch) => {\n  const response = await fetch(`/api/comments/${topicId}`, {\n    method: \"POST\",\n    headers: { \"Content-Type\": \"application/json\" },\n    body: JSON.stringify(commentData),\n    // body: formInfo\n  });\n\n  if (response.ok) {\n    const newComment = await response.json();\n    dispatch(addComment(newComment));\n    return newComment;\n  } else {\n    const errors = await response.json();\n    return errors;\n  }\n};\n\n// Add new action creators\nexport const setTopicOfTheDay = (topic) => ({\n  type: SET_TOPIC_OF_THE_DAY,\n  topic,\n});\n\nexport const getComments = (comments) => ({\n  type: GET_COMMENTS,\n  comments,\n});\n\nexport const addComment = (comment) => ({\n  type: ADD_COMMENT,\n  comment,\n});\n\n// export const voteForTopic = (topicId) => ({\n//   type: VOTE_FOR_TOPIC,\n//   topicId,\n// });\n\nexport const voteForTopic = (updatedTopic) => ({\n  type: VOTE_FOR_TOPIC,\n  topic: updatedTopic,\n});\n\nexport const unvoteForTopic = (updatedTopic) => ({\n  type: UNVOTE_FOR_TOPIC,\n  topic: updatedTopic,\n});\n\n// Thunk for fetching the topic of the day\nexport const fetchTopicOfTheDay = () => async (dispatch) => {\n  const response = await fetch(\"/api/topics/topic-of-the-day\");\n  if (response.ok) {\n    const topic = await response.json();\n    dispatch(setTopicOfTheDay(topic));\n  }\n};\n\nexport const resetUserVoteStatus = () => ({\n  type: RESET_USER_VOTE_STATUS,\n});\n\n\n//comments\n\nexport const updateComment = (comment) => ({\n  type: UPDATE_COMMENT,\n  comment,\n});\n\nexport const deleteComment = (commentId) => ({\n  type: DELETE_COMMENT,\n  commentId,\n});\n\nexport const userHasVotedStatus = (hasVoted) => ({\n  type: USER_HAS_VOTED,\n  hasVoted,\n});\n\n\n// Thunk for fetching comments of the topic of the day\nexport const fetchCommentsForTopic = (topicId) => async (dispatch) => {\n  const response = await fetch(`/api/comments/${topicId}`);\n  if (response.ok) {\n    const comments = await response.json();\n    dispatch(getComments(comments));\n  }\n};\n\n\nexport const castVote = (topicId) => async (dispatch) => {\n  const response = await fetch(`/api/topics/${topicId}/vote`, {\n    method: \"POST\",\n    headers: {\n      \"Content-Type\": \"application/json\",\n    },\n    credentials: \"include\",\n  });\n\n  if (response.ok) {\n    const updatedTopic = await response.json();\n    dispatch(voteForTopic(updatedTopic));\n    dispatch(checkUserVote());\n  } else {\n    const data = await response.json();\n    alert(data.message);\n  }\n};\n\nexport const checkUserVote = () => async (dispatch) => {\n  try {\n    const response = await fetch('/api/votes/check-vote', {\n      method: 'GET',\n      headers: {\n        'Content-Type': 'application/json',\n      },\n      credentials: 'include',\n    });\n\n    if (response.ok) {\n      const data = await response.json();\n      const hasVoted = data.has_voted;\n      dispatch(userHasVotedStatus(hasVoted));\n    } else {\n      const errorData = await response.json();\n      // Handle error case, maybe show an alert or log the error\n      console.error('Error:', errorData.message);\n    }\n  } catch (error) {\n    // Handle any network errors or exceptions\n    console.error('Network Error:', error);\n  }\n};\n\nexport const removeVote = (topicId) => async (dispatch) => {\n  const response = await fetch(`/api/topics/${topicId}/unvote`, {\n    method: \"POST\",\n    headers: {\n      \"Content-Type\": \"application/json\",\n    },\n    // Make sure to include credentials if your API requires authentication\n    credentials: \"include\",\n  });\n\n  if (response.ok) {\n    const updatedTopic = await response.json();\n    dispatch(unvoteForTopic(updatedTopic));\n    dispatch(checkUserVote());\n  } else {\n    // Handle errors\n    const data = await response.json();\n    alert(data.message); // Or handle the error message in a more user-friendly way\n  }\n};\n\nexport const editComment = (commentId, commentData) => async (dispatch) => {\n  const response = await fetch(`/api/comments/${commentId}`, {\n    method: \"PUT\",\n    headers: { \"Content-Type\": \"application/json\" },\n    body: JSON.stringify(commentData),\n  });\n\n  if (response.ok) {\n    const updatedComment = await response.json();\n    dispatch(updateComment(updatedComment));\n    return updatedComment;\n  } else {\n    const errors = await response.json();\n    return errors;\n  }\n};\n\nexport const removeComment = (commentId) => async (dispatch) => {\n  const response = await fetch(`/api/comments/${commentId}`, {\n    method: \"DELETE\",\n  });\n\n  if (response.ok) {\n    dispatch(deleteComment(commentId));\n  } else {\n    const errors = await response.json();\n    return errors;\n  }\n};\n\n\n// Adjust the initial state\nconst initialState = {\n  topics: {}, // Existing topics state\n  topicOfTheDay: null, // New state for Topic of the Day\n  comments: {}, // New state for comments\n};\n\n// Reducer\n\n\n\nexport default function topicsReducer(state = initialState, action) {\n  switch (action.type) {\n      // Existing cases...\n      case RESET_USER_VOTE_STATUS:\n          return {\n              ...state,\n              hasVoted: false, // Assuming you have a `hasVoted` flag in your state\n          };\n    // case CREATE_TOPIC:\n    //   return { ...state, [action.topic.id]: action.topic };\n    case CREATE_TOPIC:\n      return {\n        ...state,\n        topics: {\n          [action.topic.id]: action.topic,\n          ...state.topics,\n        },\n      };\n    case UPDATE_TOPIC:\n      return {\n        ...state,\n        [action.topic.id]: action.topic,\n      };\n\n//----------------------------------------------------------------------------------------\n    case REMOVE_TOPIC:\n      const newState = { ...state };\n      delete newState[action.topicId];\n      return newState;\n    \n//----------------------------------------------------------------------------------------\n\n\n\n    case SET_TOPIC_OF_THE_DAY:\n      return { ...state, topicOfTheDay: action.topic };\n    case GET_COMMENTS:\n      return { ...state, comments: { ...action.comments } };\n    case ADD_COMMENT:\n      // Logic to add a new comment to the state\n      return {\n        ...state,\n        comments: { ...state.comments, [action.comment.id]: action.comment },\n      };\n\n    case VOTE_FOR_TOPIC:\n      const newTopic = {\n        ...state[action.topic.id],\n        ...action.topic,\n      };\n      const updatedState = {\n        ...state,\n        [action.topic.id]: newTopic,\n      };\n      return updatedState;\n\n      case USER_HAS_VOTED:\n        return {\n          ...state,\n          hasVoted: action.hasVoted\n        };\n    case UNVOTE_FOR_TOPIC:\n      return {\n        ...state,\n        [action.topic.id]: {\n          ...state[action.topic.id],\n          ...action.topic,\n          \n        },\n      };\n      case UPDATE_COMMENT:\n      return {\n        ...state,\n        comments: {\n          ...state.comments,\n          [action.comment.id]: action.comment,\n        },\n      };\n    case DELETE_COMMENT:\n      const newComments = { ...state.comments };\n      delete newComments[action.commentId];\n      return {\n        ...state,\n        comments: newComments,\n      };\n    default:\n      return state;\n  }\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}