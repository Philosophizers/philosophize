{"ast":null,"code":"var _jsxFileName = \"/Users/yosephlatif/Desktop/philosophize/react-app/src/components/Topics/TopicList.js\",\n  _s = $RefreshSig$();\n// import React, { useState, useEffect } from 'react';\n// import Topic from './Topic';\n\n// const TopicList = () => {\n//     const [topics, setTopics] = useState([]);\n\n//     useEffect(() => {\n//       const fetchTopics = async () => {\n//         try {\n//           const response = await fetch('/api/topics'); // Adjust the URL based on your API endpoint\n//           if (!response.ok) throw new Error('Network response was not ok');\n//           const data = await response.json();\n//           setTopics(data); // Make sure the key matches what your backend sends\n//         } catch (error) {\n//           console.error('Error fetching topics:', error);\n//         }\n//       };\n\n//       fetchTopics();\n//     }, []);\n\n//     return (\n//         <div>\n//           <h1>Topics</h1>\n//           <ul>\n//             {topics.length > 0 ? (\n//               topics.map(topic => (\n//                 <Topic key={topic.id} topic={topic} />\n//               ))\n//             ) : (\n//               <p>Loading topics...</p>\n//             )}\n//           </ul>\n//         </div>\n//       );\n\n//     };\n\n// export default TopicList;\n\n// import React, { useState, useEffect } from 'react';\n// import { useDispatch } from 'react-redux';\n// import Topic from './Topic';\n// import TopicForm from './TopicForm';\n// import { addTopic } from '../../store/topics';\n\n// const TopicList = () => {\n//   const [topics, setTopics] = useState([]);\n//   const [showForm, setShowForm] = useState(false);\n//   const [editingTopic, setEditingTopic] = useState(null);\n\n//   useEffect(() => {\n//     fetchTopics();\n//   }, []);\n\n//   const fetchTopics = async () => {\n//     try {\n//       const response = await fetch('/api/topics', {\n//         method: 'GET',\n//         headers: { 'Content-Type': 'application/json' },\n//         credentials: 'include', // Include cookies with the request\n//       });\n//       if (!response.ok) throw new Error('Network response was not ok');\n//       const data = await response.json();\n//       setTopics(data);\n//     } catch (error) {\n//       console.error('Error fetching topics:', error);\n//     }\n//   };\n\n//   const dispatch = useDispatch();\n\n// const handleCreateOrUpdateTopic = async (topicData) => {\n//     // Determine the HTTP method and URL based on whether we are creating or updating a topic\n//     const method = editingTopic ? 'PUT' : 'POST';\n//     const url = editingTopic ? `/api/topics/${editingTopic.id}` : '/api/topics';\n\n//     try {\n//       const response = await fetch(url, {\n//         method,\n//         headers: { 'Content-Type': 'application/json' },\n//         body: JSON.stringify(topicData),\n//         credentials: 'include',\n//       });\n//       if (!response.ok) throw new Error('Network response was not ok');\n\n//       const returnedTopic = await response.json();\n\n//       if (!editingTopic) {\n//         // Dispatch the Redux action here for adding a new topic\n//         dispatch(addTopic(returnedTopic));\n//       } else {\n\n//       }\n\n//       setShowForm(false);\n//       setEditingTopic(null);\n//       fetchTopics();  // Refresh the list of topics\n//     } catch (error) {\n//       console.error('Error submitting topic:', error);\n//     }\n//   };\n\n//   const handleDeleteTopic = async (topicId) => {\n//     try {\n//       const response = await fetch(`/api/topics/${topicId}`, { method: 'DELETE' });\n//       if (!response.ok) throw new Error('Network response was not ok');\n//       fetchTopics();  // Refresh the list of topics\n//     } catch (error) {\n//       console.error('Error deleting topic:', error);\n//     }\n//   };\n\n//   const handleEditClick = (topic) => {\n//     setEditingTopic(topic);\n//     setShowForm(true);\n//   };\n\n//   return (\n//     <div>\n//       <h1>Topics</h1>\n//       <button onClick={() => setShowForm(true)}>Create New Topic</button>\n//       {showForm && (\n//         <TopicForm\n//           existingTopic={editingTopic}\n//           onSubmit={handleCreateOrUpdateTopic}\n//           onCancel={() => {\n//             setShowForm(false);\n//             setEditingTopic(null);\n//           }}\n//         />\n//       )}\n//       <ul>\n//         {topics.length > 0 ? (\n//           topics.map(topic => (\n//             <Topic\n//               key={topic.id}\n//               topic={topic}\n//               onEdit={handleEditClick}\n//               onDelete={handleDeleteTopic}\n//             />\n//           ))\n//         ) : (\n//           <p>Loading topics...</p>\n//         )}\n//       </ul>\n//     </div>\n//   );\n// };\n\n// export default TopicList;\n\nimport React, { useState, useEffect } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport Topic from './Topic';\nimport TopicForm from './TopicForm';\nimport { fetchTopics } from '../../store/topics'; // Import the fetchTopics action\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst TopicList = () => {\n  _s();\n  const dispatch = useDispatch();\n  const topics = useSelector(state => Object.values(state.topics)); // Accessing topics from Redux store\n  const [showForm, setShowForm] = useState(false);\n  const [editingTopic, setEditingTopic] = useState(null);\n  useEffect(() => {\n    dispatch(fetchTopics()); // Dispatching action to fetch topics\n  }, [dispatch]);\n  const handleCreateOrUpdateTopic = async topicData => {\n    // Determine the HTTP method and URL based on whether we are creating or updating a topic\n    const method = editingTopic ? 'PUT' : 'POST';\n    const url = editingTopic ? `/api/topics/${editingTopic.id}` : '/api/topics';\n    try {\n      const response = await fetch(url, {\n        method,\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify(topicData),\n        credentials: 'include'\n      });\n      if (!response.ok) throw new Error('Network response was not ok');\n      const returnedTopic = await response.json();\n      if (!editingTopic) {\n        // Dispatch the Redux action here for adding a new topic\n        dispatch(fetchTopics(returnedTopic));\n      } else {}\n      setShowForm(false);\n      setEditingTopic(null);\n      fetchTopics(); // Refresh the list of topics\n    } catch (error) {\n      console.error('Error submitting topic:', error);\n    }\n  };\n  const handleDeleteTopic = async topicId => {\n    try {\n      const response = await fetch(`/api/topics/${topicId}`, {\n        method: 'DELETE'\n      });\n      if (!response.ok) throw new Error('Network response was not ok');\n      dispatch(fetchTopics()); // Dispatch the action to fetch updated topics\n    } catch (error) {\n      console.error('Error deleting topic:', error);\n    }\n  };\n  const handleEditClick = topic => {\n    setEditingTopic(topic);\n    setShowForm(true);\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Topics\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 266,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: () => setShowForm(true),\n      children: \"Create New Topic\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 267,\n      columnNumber: 13\n    }, this), showForm && /*#__PURE__*/_jsxDEV(TopicForm, {\n      existingTopic: editingTopic,\n      onSubmit: handleCreateOrUpdateTopic,\n      onCancel: () => {\n        setShowForm(false);\n        setEditingTopic(null);\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 269,\n      columnNumber: 5\n    }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n      children: topics.length > 0 ? topics.map(topic => /*#__PURE__*/_jsxDEV(Topic, {\n        topic: topic,\n        onEdit: handleEditClick,\n        onDelete: handleDeleteTopic\n      }, topic.id, false, {\n        fileName: _jsxFileName,\n        lineNumber: 282,\n        columnNumber: 25\n      }, this)) : /*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"Loading topics...\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 290,\n        columnNumber: 21\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 279,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 265,\n    columnNumber: 9\n  }, this);\n};\n_s(TopicList, \"A9DezvfOYCza2ATAJXKzQRUNnKs=\", false, function () {\n  return [useDispatch, useSelector];\n});\n_c = TopicList;\nexport default TopicList;\nvar _c;\n$RefreshReg$(_c, \"TopicList\");","map":{"version":3,"names":["React","useState","useEffect","useDispatch","useSelector","Topic","TopicForm","fetchTopics","TopicList","dispatch","topics","state","Object","values","showForm","setShowForm","editingTopic","setEditingTopic","handleCreateOrUpdateTopic","topicData","method","url","id","response","fetch","headers","body","JSON","stringify","credentials","ok","Error","returnedTopic","json","error","console","handleDeleteTopic","topicId","handleEditClick","topic","length","map"],"sources":["/Users/yosephlatif/Desktop/philosophize/react-app/src/components/Topics/TopicList.js"],"sourcesContent":["// import React, { useState, useEffect } from 'react';\n// import Topic from './Topic';\n\n\n// const TopicList = () => {\n//     const [topics, setTopics] = useState([]);\n  \n//     useEffect(() => {\n//       const fetchTopics = async () => {\n//         try {\n//           const response = await fetch('/api/topics'); // Adjust the URL based on your API endpoint\n//           if (!response.ok) throw new Error('Network response was not ok');\n//           const data = await response.json();\n//           setTopics(data); // Make sure the key matches what your backend sends\n//         } catch (error) {\n//           console.error('Error fetching topics:', error);\n//         }\n//       };\n  \n//       fetchTopics();\n//     }, []);\n\n//     return (\n//         <div>\n//           <h1>Topics</h1>\n//           <ul>\n//             {topics.length > 0 ? (\n//               topics.map(topic => (\n//                 <Topic key={topic.id} topic={topic} />\n//               ))\n//             ) : (\n//               <p>Loading topics...</p>\n//             )}\n//           </ul>\n//         </div>\n//       );\n\n//     };\n      \n\n// export default TopicList;\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n// import React, { useState, useEffect } from 'react';\n// import { useDispatch } from 'react-redux';\n// import Topic from './Topic';\n// import TopicForm from './TopicForm';\n// import { addTopic } from '../../store/topics';\n\n// const TopicList = () => {\n//   const [topics, setTopics] = useState([]);\n//   const [showForm, setShowForm] = useState(false);\n//   const [editingTopic, setEditingTopic] = useState(null);\n\n//   useEffect(() => {\n//     fetchTopics();\n//   }, []);\n\n//   const fetchTopics = async () => {\n//     try {\n//       const response = await fetch('/api/topics', {\n//         method: 'GET',\n//         headers: { 'Content-Type': 'application/json' },\n//         credentials: 'include', // Include cookies with the request\n//       });\n//       if (!response.ok) throw new Error('Network response was not ok');\n//       const data = await response.json();\n//       setTopics(data);\n//     } catch (error) {\n//       console.error('Error fetching topics:', error);\n//     }\n//   };\n  \n  \n  \n\n//   const dispatch = useDispatch();\n\n// const handleCreateOrUpdateTopic = async (topicData) => {\n//     // Determine the HTTP method and URL based on whether we are creating or updating a topic\n//     const method = editingTopic ? 'PUT' : 'POST';\n//     const url = editingTopic ? `/api/topics/${editingTopic.id}` : '/api/topics';\n  \n//     try {\n//       const response = await fetch(url, {\n//         method,\n//         headers: { 'Content-Type': 'application/json' },\n//         body: JSON.stringify(topicData),\n//         credentials: 'include',\n//       });\n//       if (!response.ok) throw new Error('Network response was not ok');\n  \n//       const returnedTopic = await response.json();\n  \n//       if (!editingTopic) {\n//         // Dispatch the Redux action here for adding a new topic\n//         dispatch(addTopic(returnedTopic));\n//       } else {\n\n//       }\n  \n//       setShowForm(false);\n//       setEditingTopic(null);\n//       fetchTopics();  // Refresh the list of topics\n//     } catch (error) {\n//       console.error('Error submitting topic:', error);\n//     }\n//   };\n  \n\n//   const handleDeleteTopic = async (topicId) => {\n//     try {\n//       const response = await fetch(`/api/topics/${topicId}`, { method: 'DELETE' });\n//       if (!response.ok) throw new Error('Network response was not ok');\n//       fetchTopics();  // Refresh the list of topics\n//     } catch (error) {\n//       console.error('Error deleting topic:', error);\n//     }\n//   };\n\n//   const handleEditClick = (topic) => {\n//     setEditingTopic(topic);\n//     setShowForm(true);\n//   };\n\n//   return (\n//     <div>\n//       <h1>Topics</h1>\n//       <button onClick={() => setShowForm(true)}>Create New Topic</button>\n//       {showForm && (\n//         <TopicForm\n//           existingTopic={editingTopic}\n//           onSubmit={handleCreateOrUpdateTopic}\n//           onCancel={() => {\n//             setShowForm(false);\n//             setEditingTopic(null);\n//           }}\n//         />\n//       )}\n//       <ul>\n//         {topics.length > 0 ? (\n//           topics.map(topic => (\n//             <Topic\n//               key={topic.id}\n//               topic={topic}\n//               onEdit={handleEditClick}\n//               onDelete={handleDeleteTopic}\n//             />\n//           ))\n//         ) : (\n//           <p>Loading topics...</p>\n//         )}\n//       </ul>\n//     </div>\n//   );\n// };\n\n// export default TopicList;\n\n\n\n\n\n\n\n\n\n\n\n\nimport React, { useState, useEffect } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport Topic from './Topic';\nimport TopicForm from './TopicForm';\nimport { fetchTopics } from '../../store/topics'; // Import the fetchTopics action\n\nconst TopicList = () => {\n    const dispatch = useDispatch();\n    const topics = useSelector(state => Object.values(state.topics)); // Accessing topics from Redux store\n    const [showForm, setShowForm] = useState(false);\n    const [editingTopic, setEditingTopic] = useState(null);\n\n    useEffect(() => {\n        dispatch(fetchTopics()); // Dispatching action to fetch topics\n    }, [dispatch]);\n\n    const handleCreateOrUpdateTopic = async (topicData) => {\n      // Determine the HTTP method and URL based on whether we are creating or updating a topic\n      const method = editingTopic ? 'PUT' : 'POST';\n      const url = editingTopic ? `/api/topics/${editingTopic.id}` : '/api/topics';\n    \n      try {\n        const response = await fetch(url, {\n          method,\n          headers: { 'Content-Type': 'application/json' },\n          body: JSON.stringify(topicData),\n          credentials: 'include',\n        });\n        if (!response.ok) throw new Error('Network response was not ok');\n    \n        const returnedTopic = await response.json();\n    \n        if (!editingTopic) {\n          // Dispatch the Redux action here for adding a new topic\n          dispatch(fetchTopics(returnedTopic));\n        } else {\n  \n        }\n    \n        setShowForm(false);\n        setEditingTopic(null);\n        fetchTopics();  // Refresh the list of topics\n      } catch (error) {\n        console.error('Error submitting topic:', error);\n      }\n    };\n    \n  \n    const handleDeleteTopic = async (topicId) => {\n      try {\n        const response = await fetch(`/api/topics/${topicId}`, { method: 'DELETE' });\n        if (!response.ok) throw new Error('Network response was not ok');\n        dispatch(fetchTopics());  // Dispatch the action to fetch updated topics\n      } catch (error) {\n        console.error('Error deleting topic:', error);\n      }\n    };\n\n    const handleEditClick = (topic) => {\n      setEditingTopic(topic);\n      setShowForm(true);\n  };\n  \n\n    return (\n        <div>\n            <h1>Topics</h1>\n            <button onClick={() => setShowForm(true)}>Create New Topic</button>\n            {showForm && (\n    <TopicForm\n        existingTopic={editingTopic}\n        onSubmit={handleCreateOrUpdateTopic}\n        onCancel={() => {\n            setShowForm(false);\n            setEditingTopic(null);\n        }}\n    />\n)}\n\n            <ul>\n                {topics.length > 0 ? (\n                    topics.map(topic => (\n                        <Topic\n                            key={topic.id}\n                            topic={topic}\n                            onEdit={handleEditClick}\n                            onDelete={handleDeleteTopic}\n                        />\n                    ))\n                ) : (\n                    <p>Loading topics...</p>\n                )}\n            </ul>\n        </div>\n    );\n};\n\nexport default TopicList;\n"],"mappings":";;AAAA;AACA;;AAGA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAGA;;AAgCA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAKA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAaA,OAAOA,KAAK,IAAIC,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAClD,SAASC,WAAW,EAAEC,WAAW,QAAQ,aAAa;AACtD,OAAOC,KAAK,MAAM,SAAS;AAC3B,OAAOC,SAAS,MAAM,aAAa;AACnC,SAASC,WAAW,QAAQ,oBAAoB,CAAC,CAAC;AAAA;AAElD,MAAMC,SAAS,GAAG,MAAM;EAAA;EACpB,MAAMC,QAAQ,GAAGN,WAAW,EAAE;EAC9B,MAAMO,MAAM,GAAGN,WAAW,CAACO,KAAK,IAAIC,MAAM,CAACC,MAAM,CAACF,KAAK,CAACD,MAAM,CAAC,CAAC,CAAC,CAAC;EAClE,MAAM,CAACI,QAAQ,EAAEC,WAAW,CAAC,GAAGd,QAAQ,CAAC,KAAK,CAAC;EAC/C,MAAM,CAACe,YAAY,EAAEC,eAAe,CAAC,GAAGhB,QAAQ,CAAC,IAAI,CAAC;EAEtDC,SAAS,CAAC,MAAM;IACZO,QAAQ,CAACF,WAAW,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"},"metadata":{},"sourceType":"module"}