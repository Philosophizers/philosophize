{"ast":null,"code":"var _jsxFileName = \"/Users/yosephlatif/Desktop/philosophize/react-app/src/components/SignupFormPage/index.js\",\n  _s = $RefreshSig$();\n// import React, { useState } from \"react\";\n// import { useDispatch } from \"react-redux\";\n// import { useModal } from \"../../context/Modal\";\n// import { signUp } from \"../../store/session\";\n// import \"./SignupForm.css\";\n\n// function SignupFormModal() {\n//   const dispatch = useDispatch();\n//   const [email, setEmail] = useState(\"\");\n//   const [username, setUsername] = useState(\"\");\n//   const [password, setPassword] = useState(\"\");\n//   const [confirmPassword, setConfirmPassword] = useState(\"\");\n//   const [errors, setErrors] = useState([]);\n//   const { closeModal } = useModal();\n\n//   function isEmail(val) {\n//     let regEmail =\n//       /^(([^<>()\\[\\]\\\\.,;:\\s@\"]+(\\.[^<>()\\[\\]\\\\.,;:\\s@\"]+)*)|(\".+\"))@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}])|(([a-zA-Z\\-0-9]+\\.)+[a-zA-Z]{2,}))$/;\n//     if (!regEmail.test(val)) {\n//       return false;\n//     } else {\n//       return true;\n//     }\n//   }\n\n//   const handleSubmit = async (e) => {\n// \te.preventDefault(); // Prevent the default form submission\n\n// \tif (!isEmail(email)) {\n// \t  setErrors([\"Please enter a valid email address.\"]);\n// \t  return; // Stop the form submission if the email is invalid\n// \t}\n\n// \tif (password !== confirmPassword) {\n// \t  setErrors([\"Confirm Password field must be the same as the Password field\"]);\n// \t  return; // Stop the form submission if the passwords do not match\n// \t}\n\n// \t// If all validations pass, proceed to dispatch the signup action\n// \tconst data = await dispatch(signUp(username, email, password));\n// \tif (data && data.errors) {\n// \t  setErrors(data.errors);\n// \t} else {\n// \t  closeModal(); // Close the modal only if there are no errors\n// \t}\n//   };\n\n//   return (\n//     <>\n//       <div className=\"modal-backdrop\">\n//         <div className=\"modal-content\">\n//           <div className=\"modal-header\">Sign Up</div>\n//           <form onSubmit={handleSubmit} className=\"modal-form\">\n//             <button className=\"close-modal-button\" onClick={closeModal}>\n//               &times;\n//             </button>\n//             <ul>\n//               {errors.map((error, idx) => (\n//                 <li key={idx}>{error}</li>\n//               ))}\n//             </ul>\n//             <label>\n//               Email\n//               <input\n//                 type=\"text\"\n//                 value={email}\n//                 onChange={(e) => setEmail(e.target.value)}\n//                 required\n//               />\n//             </label>\n//             <label>\n//               Username\n//               <input\n//                 type=\"text\"\n//                 value={username}\n//                 onChange={(e) => setUsername(e.target.value)}\n//                 required\n//               />\n//             </label>\n//             <label>\n//               Password\n//               <input\n//                 type=\"password\"\n//                 value={password}\n//                 onChange={(e) => setPassword(e.target.value)}\n//                 required\n//               />\n//             </label>\n//             <label>\n//               Confirm Password\n//               <input\n//                 type=\"password\"\n//                 value={confirmPassword}\n//                 onChange={(e) => setConfirmPassword(e.target.value)}\n//                 required\n//               />\n//             </label>\n//             <button type=\"submit\">Sign Up</button>\n//           </form>\n//           <div className=\"modal-link\">\n//             <a href=\"/login\">Already have an account? Log in!</a>\n//           </div>\n//         </div>\n//       </div>\n//     </>\n//   );\n// }\n\n// export default SignupFormModal;\n\nimport React, { useState } from \"react\";\nimport { useDispatch } from \"react-redux\";\nimport { useHistory } from \"react-router-dom\";\nimport { useModal } from \"../../context/Modal\";\nimport { signUp } from \"../../store/session\";\nimport { Link } from \"react-router-dom\";\nimport \"./SignupForm.css\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nfunction SignupFormModal() {\n  _s();\n  const dispatch = useDispatch();\n  const [email, setEmail] = useState(\"\");\n  const [username, setUsername] = useState(\"\");\n  const [password, setPassword] = useState(\"\");\n  const [confirmPassword, setConfirmPassword] = useState(\"\");\n  const [errors, setErrors] = useState([]);\n  const {\n    closeModal\n  } = useModal();\n  const history = useHistory();\n  function isEmail(val) {\n    let regEmail = /^(([^<>()\\[\\]\\\\.,;:\\s@\"]+(\\.[^<>()\\[\\]\\\\.,;:\\s@\"]+)*)|(\".+\"))@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}])|(([a-zA-Z\\-0-9]+\\.)+[a-zA-Z]{2,}))$/;\n    if (!regEmail.test(val)) {\n      return false;\n    } else {\n      return true;\n    }\n  }\n  const handleSubmit = async e => {\n    e.preventDefault(); // Prevent the default form submission\n\n    const response = await fetch(\"/api/auth/signup\", {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/json\"\n      },\n      body: JSON.stringify({\n        username,\n        email,\n        password\n      })\n    });\n    const data = await dispatch(signUp(username, email, password));\n    if (data && data.errors) {\n      setErrors(data.errors);\n    } else {\n      closeModal();\n      history.push('/'); // Redirect to home page\n    }\n\n    // if (!isEmail(email)) {\n    //   setErrors([\"Please enter a valid email address.\"]);\n    //   return; // Stop the form submission if the email is invalid\n    // }\n\n    // if (password !== confirmPassword) {\n    //   setErrors([\"Confirm Password field must be the same as the Password field\"]);\n    //   return; // Stop the form submission if the passwords do not match\n    // }\n\n    // // If all validations pass, proceed to dispatch the signup action\n    // const data = await dispatch(signUp(username, email, password));\n    // if (data && data.errors) {\n    //   setErrors(data.errors);\n    // } else {\n    //   closeModal(); // Close the modal only if there are no errors\n    //   history.push('/'); // Redirect to home page\n    // }\n  };\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"modal-backdrop\",\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"modal-content\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"modal-header\",\n          children: \"Sign Up\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 188,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"form\", {\n          onSubmit: handleSubmit,\n          className: \"modal-form\",\n          children: [/*#__PURE__*/_jsxDEV(Link, {\n            to: \"/\",\n            className: \"close-modal-button\",\n            children: \"\\u2B05\\uFE0F  Back to Home Page\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 190,\n            columnNumber: 13\n          }, this), errors.length > 0 && /*#__PURE__*/_jsxDEV(\"ul\", {\n            children: errors.map((error, idx) => /*#__PURE__*/_jsxDEV(\"li\", {\n              className: \"error-message\",\n              children: error\n            }, idx, false, {\n              fileName: _jsxFileName,\n              lineNumber: 196,\n              columnNumber: 19\n            }, this))\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 194,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n            children: [\"Email\", /*#__PURE__*/_jsxDEV(\"input\", {\n              type: \"text\",\n              value: email,\n              onChange: e => setEmail(e.target.value),\n              required: true\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 204,\n              columnNumber: 15\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 202,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n            children: [\"Username\", /*#__PURE__*/_jsxDEV(\"input\", {\n              type: \"text\",\n              value: username,\n              onChange: e => setUsername(e.target.value),\n              required: true\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 213,\n              columnNumber: 15\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 211,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n            children: [\"Password\", /*#__PURE__*/_jsxDEV(\"input\", {\n              type: \"password\",\n              value: password,\n              onChange: e => setPassword(e.target.value),\n              required: true\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 222,\n              columnNumber: 15\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 220,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n            children: [\"Confirm Password\", /*#__PURE__*/_jsxDEV(\"input\", {\n              type: \"password\",\n              value: confirmPassword,\n              onChange: e => setConfirmPassword(e.target.value),\n              required: true\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 231,\n              columnNumber: 15\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 229,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            type: \"submit\",\n            children: \"Sign Up\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 238,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 189,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"modal-link\",\n          children: /*#__PURE__*/_jsxDEV(\"a\", {\n            href: \"/login\",\n            children: \"Already have an account? Log in!\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 241,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 240,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 187,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 186,\n      columnNumber: 7\n    }, this)\n  }, void 0, false);\n}\n_s(SignupFormModal, \"lEiYKniGlZ8qqDx1dUTOnuvGE0I=\", false, function () {\n  return [useDispatch, useModal, useHistory];\n});\n_c = SignupFormModal;\nexport default SignupFormModal;\nvar _c;\n$RefreshReg$(_c, \"SignupFormModal\");","map":{"version":3,"names":["React","useState","useDispatch","useHistory","useModal","signUp","Link","SignupFormModal","dispatch","email","setEmail","username","setUsername","password","setPassword","confirmPassword","setConfirmPassword","errors","setErrors","closeModal","history","isEmail","val","regEmail","test","handleSubmit","e","preventDefault","response","fetch","method","headers","body","JSON","stringify","data","push","length","map","error","idx","target","value"],"sources":["/Users/yosephlatif/Desktop/philosophize/react-app/src/components/SignupFormPage/index.js"],"sourcesContent":["// import React, { useState } from \"react\";\n// import { useDispatch } from \"react-redux\";\n// import { useModal } from \"../../context/Modal\";\n// import { signUp } from \"../../store/session\";\n// import \"./SignupForm.css\";\n\n// function SignupFormModal() {\n//   const dispatch = useDispatch();\n//   const [email, setEmail] = useState(\"\");\n//   const [username, setUsername] = useState(\"\");\n//   const [password, setPassword] = useState(\"\");\n//   const [confirmPassword, setConfirmPassword] = useState(\"\");\n//   const [errors, setErrors] = useState([]);\n//   const { closeModal } = useModal();\n\n//   function isEmail(val) {\n//     let regEmail =\n//       /^(([^<>()\\[\\]\\\\.,;:\\s@\"]+(\\.[^<>()\\[\\]\\\\.,;:\\s@\"]+)*)|(\".+\"))@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}])|(([a-zA-Z\\-0-9]+\\.)+[a-zA-Z]{2,}))$/;\n//     if (!regEmail.test(val)) {\n//       return false;\n//     } else {\n//       return true;\n//     }\n//   }\n\n//   const handleSubmit = async (e) => {\n// \te.preventDefault(); // Prevent the default form submission\n\t\n// \tif (!isEmail(email)) {\n// \t  setErrors([\"Please enter a valid email address.\"]);\n// \t  return; // Stop the form submission if the email is invalid\n// \t}\n  \n// \tif (password !== confirmPassword) {\n// \t  setErrors([\"Confirm Password field must be the same as the Password field\"]);\n// \t  return; // Stop the form submission if the passwords do not match\n// \t}\n  \n// \t// If all validations pass, proceed to dispatch the signup action\n// \tconst data = await dispatch(signUp(username, email, password));\n// \tif (data && data.errors) {\n// \t  setErrors(data.errors);\n// \t} else {\n// \t  closeModal(); // Close the modal only if there are no errors\n// \t}\n//   };\n\n//   return (\n//     <>\n//       <div className=\"modal-backdrop\">\n//         <div className=\"modal-content\">\n//           <div className=\"modal-header\">Sign Up</div>\n//           <form onSubmit={handleSubmit} className=\"modal-form\">\n//             <button className=\"close-modal-button\" onClick={closeModal}>\n//               &times;\n//             </button>\n//             <ul>\n//               {errors.map((error, idx) => (\n//                 <li key={idx}>{error}</li>\n//               ))}\n//             </ul>\n//             <label>\n//               Email\n//               <input\n//                 type=\"text\"\n//                 value={email}\n//                 onChange={(e) => setEmail(e.target.value)}\n//                 required\n//               />\n//             </label>\n//             <label>\n//               Username\n//               <input\n//                 type=\"text\"\n//                 value={username}\n//                 onChange={(e) => setUsername(e.target.value)}\n//                 required\n//               />\n//             </label>\n//             <label>\n//               Password\n//               <input\n//                 type=\"password\"\n//                 value={password}\n//                 onChange={(e) => setPassword(e.target.value)}\n//                 required\n//               />\n//             </label>\n//             <label>\n//               Confirm Password\n//               <input\n//                 type=\"password\"\n//                 value={confirmPassword}\n//                 onChange={(e) => setConfirmPassword(e.target.value)}\n//                 required\n//               />\n//             </label>\n//             <button type=\"submit\">Sign Up</button>\n//           </form>\n//           <div className=\"modal-link\">\n//             <a href=\"/login\">Already have an account? Log in!</a>\n//           </div>\n//         </div>\n//       </div>\n//     </>\n//   );\n// }\n\n// export default SignupFormModal;\n\n\nimport React, { useState } from \"react\";\nimport { useDispatch } from \"react-redux\";\nimport { useHistory } from \"react-router-dom\";\nimport { useModal } from \"../../context/Modal\";\nimport { signUp } from \"../../store/session\";\nimport { Link } from \"react-router-dom\";\nimport \"./SignupForm.css\";\n\nfunction SignupFormModal() {\n  const dispatch = useDispatch();\n  const [email, setEmail] = useState(\"\");\n  const [username, setUsername] = useState(\"\");\n  const [password, setPassword] = useState(\"\");\n  const [confirmPassword, setConfirmPassword] = useState(\"\");\n  const [errors, setErrors] = useState([]);\n  const { closeModal } = useModal();\n  const history = useHistory();\n\n  function isEmail(val) {\n    let regEmail =\n      /^(([^<>()\\[\\]\\\\.,;:\\s@\"]+(\\.[^<>()\\[\\]\\\\.,;:\\s@\"]+)*)|(\".+\"))@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}])|(([a-zA-Z\\-0-9]+\\.)+[a-zA-Z]{2,}))$/;\n    if (!regEmail.test(val)) {\n      return false;\n    } else {\n      return true;\n    }\n  }\n\n  const handleSubmit = async (e) => {\n    e.preventDefault(); // Prevent the default form submission\n\n    const response = await fetch(\"/api/auth/signup\", {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/json\",\n      },\n      body: JSON.stringify({\n        username,\n        email,\n        password,\n      }),\n    });\n\n    const data = await dispatch(signUp(username, email, password));\n\n    if (data && data.errors) {\n      setErrors(data.errors);\n    } else {\n      closeModal();\n      history.push('/'); // Redirect to home page\n    }\n\n    // if (!isEmail(email)) {\n    //   setErrors([\"Please enter a valid email address.\"]);\n    //   return; // Stop the form submission if the email is invalid\n    // }\n\n    // if (password !== confirmPassword) {\n    //   setErrors([\"Confirm Password field must be the same as the Password field\"]);\n    //   return; // Stop the form submission if the passwords do not match\n    // }\n\n    // // If all validations pass, proceed to dispatch the signup action\n    // const data = await dispatch(signUp(username, email, password));\n    // if (data && data.errors) {\n    //   setErrors(data.errors);\n    // } else {\n    //   closeModal(); // Close the modal only if there are no errors\n    //   history.push('/'); // Redirect to home page\n    // }\n  };\n\n  return (\n    <>\n      <div className=\"modal-backdrop\">\n        <div className=\"modal-content\">\n          <div className=\"modal-header\">Sign Up</div>\n          <form onSubmit={handleSubmit} className=\"modal-form\">\n            <Link to=\"/\" className=\"close-modal-button\">\n              ⬅️  Back to Home Page\n            </Link>\n            {errors.length > 0 && (\n              <ul>\n                {errors.map((error, idx) => (\n                  <li key={idx} className=\"error-message\">\n                    {error}\n                  </li>\n                ))}\n              </ul>\n            )}\n            <label>\n              Email\n              <input\n                type=\"text\"\n                value={email}\n                onChange={(e) => setEmail(e.target.value)}\n                required\n              />\n            </label>\n            <label>\n              Username\n              <input\n                type=\"text\"\n                value={username}\n                onChange={(e) => setUsername(e.target.value)}\n                required\n              />\n            </label>\n            <label>\n              Password\n              <input\n                type=\"password\"\n                value={password}\n                onChange={(e) => setPassword(e.target.value)}\n                required\n              />\n            </label>\n            <label>\n              Confirm Password\n              <input\n                type=\"password\"\n                value={confirmPassword}\n                onChange={(e) => setConfirmPassword(e.target.value)}\n                required\n              />\n            </label>\n            <button type=\"submit\">Sign Up</button>\n          </form>\n          <div className=\"modal-link\">\n            <a href=\"/login\">Already have an account? Log in!</a>\n          </div>\n        </div>\n      </div>\n    </>\n  );\n}\n\nexport default SignupFormModal;\n"],"mappings":";;AAAA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAGA,OAAOA,KAAK,IAAIC,QAAQ,QAAQ,OAAO;AACvC,SAASC,WAAW,QAAQ,aAAa;AACzC,SAASC,UAAU,QAAQ,kBAAkB;AAC7C,SAASC,QAAQ,QAAQ,qBAAqB;AAC9C,SAASC,MAAM,QAAQ,qBAAqB;AAC5C,SAASC,IAAI,QAAQ,kBAAkB;AACvC,OAAO,kBAAkB;AAAC;AAAA;AAE1B,SAASC,eAAe,GAAG;EAAA;EACzB,MAAMC,QAAQ,GAAGN,WAAW,EAAE;EAC9B,MAAM,CAACO,KAAK,EAAEC,QAAQ,CAAC,GAAGT,QAAQ,CAAC,EAAE,CAAC;EACtC,MAAM,CAACU,QAAQ,EAAEC,WAAW,CAAC,GAAGX,QAAQ,CAAC,EAAE,CAAC;EAC5C,MAAM,CAACY,QAAQ,EAAEC,WAAW,CAAC,GAAGb,QAAQ,CAAC,EAAE,CAAC;EAC5C,MAAM,CAACc,eAAe,EAAEC,kBAAkB,CAAC,GAAGf,QAAQ,CAAC,EAAE,CAAC;EAC1D,MAAM,CAACgB,MAAM,EAAEC,SAAS,CAAC,GAAGjB,QAAQ,CAAC,EAAE,CAAC;EACxC,MAAM;IAAEkB;EAAW,CAAC,GAAGf,QAAQ,EAAE;EACjC,MAAMgB,OAAO,GAAGjB,UAAU,EAAE;EAE5B,SAASkB,OAAO,CAACC,GAAG,EAAE;IACpB,IAAIC,QAAQ,GACV,wJAAwJ;IAC1J,IAAI,CAACA,QAAQ,CAACC,IAAI,CAACF,GAAG,CAAC,EAAE;MACvB,OAAO,KAAK;IACd,CAAC,MAAM;MACL,OAAO,IAAI;IACb;EACF;EAEA,MAAMG,YAAY,GAAG,MAAOC,CAAC,IAAK;IAChCA,CAAC,CAACC,cAAc,EAAE,CAAC,CAAC;;IAEpB,MAAMC,QAAQ,GAAG,MAAMC,KAAK,CAAC,kBAAkB,EAAE;MAC/CC,MAAM,EAAE,MAAM;MACdC,OAAO,EAAE;QACP,cAAc,EAAE;MAClB,CAAC;MACDC,IAAI,EAAEC,IAAI,CAACC,SAAS,CAAC;QACnBvB,QAAQ;QACRF,KAAK;QACLI;MACF,CAAC;IACH,CAAC,CAAC;IAEF,MAAMsB,IAAI,GAAG,MAAM3B,QAAQ,CAACH,MAAM,CAACM,QAAQ,EAAEF,KAAK,EAAEI,QAAQ,CAAC,CAAC;IAE9D,IAAIsB,IAAI,IAAIA,IAAI,CAAClB,MAAM,EAAE;MACvBC,SAAS,CAACiB,IAAI,CAAClB,MAAM,CAAC;IACxB,CAAC,MAAM;MACLE,UAAU,EAAE;MACZC,OAAO,CAACgB,IAAI,CAAC,GAAG,CAAC,CAAC,CAAC;IACrB;;IAEA;IACA;IACA;IACA;;IAEA;IACA;IACA;IACA;;IAEA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;EACF,CAAC;;EAED,oBACE;IAAA,uBACE;MAAK,SAAS,EAAC,gBAAgB;MAAA,uBAC7B;QAAK,SAAS,EAAC,eAAe;QAAA,wBAC5B;UAAK,SAAS,EAAC,cAAc;UAAA;QAAA;UAAA;UAAA;UAAA;QAAA,QAAc,eAC3C;UAAM,QAAQ,EAAEX,YAAa;UAAC,SAAS,EAAC,YAAY;UAAA,wBAClD,QAAC,IAAI;YAAC,EAAE,EAAC,GAAG;YAAC,SAAS,EAAC,oBAAoB;YAAA;UAAA;YAAA;YAAA;YAAA;UAAA,QAEpC,EACNR,MAAM,CAACoB,MAAM,GAAG,CAAC,iBAChB;YAAA,UACGpB,MAAM,CAACqB,GAAG,CAAC,CAACC,KAAK,EAAEC,GAAG,kBACrB;cAAc,SAAS,EAAC,eAAe;cAAA,UACpCD;YAAK,GADCC,GAAG;cAAA;cAAA;cAAA;YAAA,QAGb;UAAC;YAAA;YAAA;YAAA;UAAA,QAEL,eACD;YAAA,iCAEE;cACE,IAAI,EAAC,MAAM;cACX,KAAK,EAAE/B,KAAM;cACb,QAAQ,EAAGiB,CAAC,IAAKhB,QAAQ,CAACgB,CAAC,CAACe,MAAM,CAACC,KAAK,CAAE;cAC1C,QAAQ;YAAA;cAAA;cAAA;cAAA;YAAA,QACR;UAAA;YAAA;YAAA;YAAA;UAAA,QACI,eACR;YAAA,oCAEE;cACE,IAAI,EAAC,MAAM;cACX,KAAK,EAAE/B,QAAS;cAChB,QAAQ,EAAGe,CAAC,IAAKd,WAAW,CAACc,CAAC,CAACe,MAAM,CAACC,KAAK,CAAE;cAC7C,QAAQ;YAAA;cAAA;cAAA;cAAA;YAAA,QACR;UAAA;YAAA;YAAA;YAAA;UAAA,QACI,eACR;YAAA,oCAEE;cACE,IAAI,EAAC,UAAU;cACf,KAAK,EAAE7B,QAAS;cAChB,QAAQ,EAAGa,CAAC,IAAKZ,WAAW,CAACY,CAAC,CAACe,MAAM,CAACC,KAAK,CAAE;cAC7C,QAAQ;YAAA;cAAA;cAAA;cAAA;YAAA,QACR;UAAA;YAAA;YAAA;YAAA;UAAA,QACI,eACR;YAAA,4CAEE;cACE,IAAI,EAAC,UAAU;cACf,KAAK,EAAE3B,eAAgB;cACvB,QAAQ,EAAGW,CAAC,IAAKV,kBAAkB,CAACU,CAAC,CAACe,MAAM,CAACC,KAAK,CAAE;cACpD,QAAQ;YAAA;cAAA;cAAA;cAAA;YAAA,QACR;UAAA;YAAA;YAAA;YAAA;UAAA,QACI,eACR;YAAQ,IAAI,EAAC,QAAQ;YAAA;UAAA;YAAA;YAAA;YAAA;UAAA,QAAiB;QAAA;UAAA;UAAA;UAAA;QAAA,QACjC,eACP;UAAK,SAAS,EAAC,YAAY;UAAA,uBACzB;YAAG,IAAI,EAAC,QAAQ;YAAA;UAAA;YAAA;YAAA;YAAA;UAAA;QAAqC;UAAA;UAAA;UAAA;QAAA,QACjD;MAAA;QAAA;QAAA;QAAA;MAAA;IACF;MAAA;MAAA;MAAA;IAAA;EACF,iBACL;AAEP;AAAC,GA/HQnC,eAAe;EAAA,QACLL,WAAW,EAMLE,QAAQ,EACfD,UAAU;AAAA;AAAA,KARnBI,eAAe;AAiIxB,eAAeA,eAAe;AAAC;AAAA"},"metadata":{},"sourceType":"module"}