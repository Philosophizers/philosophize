{"ast":null,"code":"// src/store/topics.js\n\nconst GET_TOPICS = \"topics/GET_TOPICS\";\nconst CREATE_TOPIC = \"topics/CREATE_TOPIC\";\nconst REMOVE_TOPIC = \"topics/REMOVE_TOPIC\";\nconst UPDATE_TOPIC = \"topics/UPDATE_TOPIC\";\nconst SET_TOPIC_OF_THE_DAY = \"topics/SET_TOPIC_OF_THE_DAY\";\nconst GET_COMMENTS = \"topics/GET_COMMENTS\";\nconst ADD_COMMENT = \"topics/ADD_COMMENT\";\nconst VOTE_FOR_TOPIC = \"topics/VOTE_FOR_TOPIC\";\nconst UNVOTE_FOR_TOPIC = \"topics/UNVOTE_FOR_TOPIC\";\nconst RESET_VOTES = \"topics/RESET_VOTES\";\nconst USER_HAS_VOTED = \"topics/USER_HAS_VOTED\";\nconst UPDATE_COMMENT = \"topics/UPDATE_COMMENT\";\nconst DELETE_COMMENT = \"topics/DELETE_COMMENT\";\n\n// Action Creators\nconst getTopics = topics => ({\n  type: GET_TOPICS,\n  topics\n});\nexport const addTopic = topic => ({\n  type: CREATE_TOPIC,\n  topic\n});\n\n// Thunk Action Creators\nexport const fetchTopics = () => async dispatch => {\n  const response = await fetch(\"/api/topics\");\n  if (response.ok) {\n    const topics = await response.json();\n    dispatch(getTopics(topics));\n  }\n};\nexport const updateTopic = topic => ({\n  type: UPDATE_TOPIC,\n  topic\n});\nexport const editTopic = (topicId, topicData) => async dispatch => {\n  const response = await fetch(`/api/topics/${topicId}`, {\n    method: \"PUT\",\n    headers: {\n      \"Content-Type\": \"application/json\"\n    },\n    body: JSON.stringify(topicData),\n    credentials: \"include\"\n  });\n  if (response.ok) {\n    const updatedTopic = await response.json();\n    dispatch(updateTopic(updatedTopic));\n    return updatedTopic;\n  } else {\n    const errors = await response.json();\n    return errors;\n  }\n};\nexport const removeTopic = topicId => ({\n  type: REMOVE_TOPIC,\n  topicId\n});\nexport const createTopic = topicData => async dispatch => {\n  const response = await fetch(\"/api/topics/banana\", {\n    method: \"POST\",\n    headers: {\n      \"Content-Type\": \"application/json\"\n    },\n    body: JSON.stringify(topicData)\n    // body: formInfo\n  });\n\n  if (response.ok) {\n    const newTopic = await response.json();\n    dispatch(addTopic(newTopic));\n    return newTopic;\n  } else {\n    const errors = await response.json();\n    return errors;\n  }\n};\nexport const createComment = (topicId, commentData) => async dispatch => {\n  const response = await fetch(`/api/comments/${topicId}`, {\n    method: \"POST\",\n    headers: {\n      \"Content-Type\": \"application/json\"\n    },\n    body: JSON.stringify(commentData)\n    // body: formInfo\n  });\n\n  if (response.ok) {\n    console.log('comment created', response);\n  } else {\n    const errors = await response.json();\n    return errors;\n  }\n};\n\n// Add new action creators\nexport const setTopicOfTheDay = topic => ({\n  type: SET_TOPIC_OF_THE_DAY,\n  topic\n});\nexport const getComments = comments => ({\n  type: GET_COMMENTS,\n  comments\n});\nexport const addComment = comment => ({\n  type: ADD_COMMENT,\n  comment\n});\n\n// export const voteForTopic = (topicId) => ({\n//   type: VOTE_FOR_TOPIC,\n//   topicId,\n// });\n\nexport const voteForTopic = updatedTopic => ({\n  type: VOTE_FOR_TOPIC,\n  topic: updatedTopic\n});\nexport const unvoteForTopic = updatedTopic => ({\n  type: UNVOTE_FOR_TOPIC,\n  topic: updatedTopic\n});\n\n// Thunk for fetching the topic of the day\nexport const fetchTopicOfTheDay = () => async dispatch => {\n  const response = await fetch(\"/api/topics/topic-of-the-day\");\n  if (response.ok) {\n    const topic = await response.json();\n    dispatch(setTopicOfTheDay(topic));\n  }\n};\n\n//comments\n\nexport const updateComment = comment => ({\n  type: UPDATE_COMMENT,\n  comment\n});\nexport const deleteComment = commentId => ({\n  type: DELETE_COMMENT,\n  commentId\n});\nexport const userHasVotedStatus = hasVoted => ({\n  type: USER_HAS_VOTED,\n  hasVoted\n});\n\n// Thunk for fetching comments of the topic of the day\nexport const fetchCommentsForTopic = topicId => async dispatch => {\n  console.log('fetchCommentsForTopic', topicId);\n  const response = await fetch(`/api/comments/${topicId}`);\n  if (response.ok) {\n    const comments = await response.json();\n    dispatch(getComments(comments));\n  }\n};\n\n// export const castVote = (topicId) => async (dispatch) => {\n//   const response = await fetch(`/api/topics/${topicId}/vote`, {\n//     method: 'POST',\n//     headers: {\n//       'Content-Type': 'application/json'\n//     },\n//     // Make sure to include credentials if your API requires authentication\n//     credentials: 'include',\n//   });\n\n//   if (response.ok) {\n//     dispatch(voteForTopic(topicId));\n//   } else {\n//     // Handle errors, e.g., user has already voted\n//     const data = await response.json();\n//     alert(data.message); // Or handle the error message in a more user-friendly way\n//   }\n// };\n\nexport const castVote = topicId => async dispatch => {\n  const response = await fetch(`/api/topics/${topicId}/vote`, {\n    method: \"POST\",\n    headers: {\n      \"Content-Type\": \"application/json\"\n    },\n    credentials: \"include\"\n  });\n  if (response.ok) {\n    const updatedTopic = await response.json();\n    console.log(\"Updated Topic:\", updatedTopic); // Log to check the updated topic\n    dispatch(voteForTopic(updatedTopic));\n    dispatch(checkUserVote());\n  } else {\n    const data = await response.json();\n    alert(data.message);\n  }\n};\nexport const checkUserVote = () => async dispatch => {\n  try {\n    const response = await fetch('/api/votes/check-vote', {\n      method: 'GET',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      credentials: 'include'\n    });\n    if (response.ok) {\n      const data = await response.json();\n      const hasVoted = data.has_voted;\n      console.log('Has the user voted?', hasVoted);\n      dispatch(userHasVotedStatus(hasVoted));\n    } else {\n      const errorData = await response.json();\n      // Handle error case, maybe show an alert or log the error\n      console.error('Error:', errorData.message);\n    }\n  } catch (error) {\n    // Handle any network errors or exceptions\n    console.error('Network Error:', error);\n  }\n};\nexport const removeVote = topicId => async dispatch => {\n  const response = await fetch(`/api/topics/${topicId}/unvote`, {\n    method: \"POST\",\n    headers: {\n      \"Content-Type\": \"application/json\"\n    },\n    // Make sure to include credentials if your API requires authentication\n    credentials: \"include\"\n  });\n  if (response.ok) {\n    const updatedTopic = await response.json();\n    dispatch(unvoteForTopic(updatedTopic));\n    dispatch(checkUserVote());\n  } else {\n    // Handle errors\n    const data = await response.json();\n    alert(data.message); // Or handle the error message in a more user-friendly way\n  }\n};\n\nexport const editComment = (commentId, commentData) => async dispatch => {\n  const response = await fetch(`/api/comments/${commentId}`, {\n    method: \"PUT\",\n    headers: {\n      \"Content-Type\": \"application/json\"\n    },\n    body: JSON.stringify(commentData)\n  });\n  if (response.ok) {\n    const updatedComment = await response.json();\n    dispatch(updateComment(updatedComment));\n    return updatedComment;\n  } else {\n    const errors = await response.json();\n    return errors;\n  }\n};\nexport const removeComment = commentId => async dispatch => {\n  const response = await fetch(`/api/comments/${commentId}`, {\n    method: \"DELETE\"\n  });\n  if (response.ok) {\n    dispatch(deleteComment(commentId));\n  } else {\n    const errors = await response.json();\n    return errors;\n  }\n};\n\n// Adjust the initial state\nconst initialState = {\n  topics: {},\n  // Existing topics state\n  topicOfTheDay: null,\n  // New state for Topic of the Day\n  comments: {} // New state for comments\n};\n\n// Reducer\n\n// export default function topicsReducer(state = initialState, action) {\n//   switch (action.type) {\n//       case GET_TOPICS:\n//           const topicsNormalized = {};\n//           action.topics.forEach(topic => {\n//               topicsNormalized[topic.id] = topic;\n//           });\n//           return { ...state, ...topicsNormalized };\n//       case CREATE_TOPIC:\n//           return { ...state, [action.topic.id]: action.topic };\n//       default:\n//           return state;\n//   }\n// }\n\nexport default function topicsReducer() {\n  let state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : initialState;\n  let action = arguments.length > 1 ? arguments[1] : undefined;\n  switch (action.type) {\n    case GET_TOPICS:\n      return {\n        ...state,\n        ...Object.fromEntries(action.topics.map(topic => [topic.id, topic]))\n      };\n    // case CREATE_TOPIC:\n    //   return { ...state, [action.topic.id]: action.topic };\n    case CREATE_TOPIC:\n      return {\n        ...state,\n        topics: [action.topic, ...state.topics] // this places the new topic at the start\n      };\n\n    case UPDATE_TOPIC:\n      return {\n        ...state,\n        [action.topic.id]: action.topic\n      };\n    case REMOVE_TOPIC:\n      const newState = {\n        ...state\n      };\n      delete newState[action.topicId];\n      return newState;\n    case SET_TOPIC_OF_THE_DAY:\n      return {\n        ...state,\n        topicOfTheDay: action.topic\n      };\n    case GET_COMMENTS:\n      return {\n        ...state,\n        comments: {\n          ...action.comments\n        }\n      };\n    case ADD_COMMENT:\n      // Logic to add a new comment to the state\n      return {\n        ...state,\n        comments: {\n          ...state.comments,\n          [action.comment.id]: action.comment\n        }\n      };\n    //     case VOTE_FOR_TOPIC:\n    //   return {\n    //     ...state,\n    //     topics: {\n    //       ...state.topics,\n    //       [action.topicId]: {\n    //         ...state.topics[action.topicId],\n    //         hasVoted: true\n    //       }\n    //     }\n    //   };\n    // case UNVOTE_FOR_TOPIC:\n    //   return {\n    //     ...state,\n    //     topics: {\n    //       ...state.topics,\n    //       [action.topicId]: {\n    //         ...state.topics[action.topicId],\n    //         hasVoted: false\n    //       }\n    //     }\n    //   };\n    case VOTE_FOR_TOPIC:\n      console.log(\"Action:\", action);\n      console.log(\"Current State:\", state); // Log current state\n      const newTopic = {\n        ...state[action.topic.id],\n        ...action.topic\n      };\n      console.log(\"ne topic\", newTopic);\n      const updatedState = {\n        ...state,\n        [action.topic.id]: newTopic\n      };\n      console.log(\"Updated State:\", updatedState); // Log updated state\n      return updatedState;\n    case USER_HAS_VOTED:\n      return {\n        ...state,\n        hasVoted: action.hasVoted\n      };\n    case UNVOTE_FOR_TOPIC:\n      return {\n        ...state,\n        [action.topic.id]: {\n          ...state[action.topic.id],\n          ...action.topic\n        }\n      };\n    case UPDATE_COMMENT:\n      return {\n        ...state,\n        comments: {\n          ...state.comments,\n          [action.comment.id]: action.comment\n        }\n      };\n    case DELETE_COMMENT:\n      const newComments = {\n        ...state.comments\n      };\n      delete newComments[action.commentId];\n      return {\n        ...state,\n        comments: newComments\n      };\n    default:\n      return state;\n  }\n}","map":{"version":3,"names":["GET_TOPICS","CREATE_TOPIC","REMOVE_TOPIC","UPDATE_TOPIC","SET_TOPIC_OF_THE_DAY","GET_COMMENTS","ADD_COMMENT","VOTE_FOR_TOPIC","UNVOTE_FOR_TOPIC","RESET_VOTES","USER_HAS_VOTED","UPDATE_COMMENT","DELETE_COMMENT","getTopics","topics","type","addTopic","topic","fetchTopics","dispatch","response","fetch","ok","json","updateTopic","editTopic","topicId","topicData","method","headers","body","JSON","stringify","credentials","updatedTopic","errors","removeTopic","createTopic","newTopic","createComment","commentData","console","log","setTopicOfTheDay","getComments","comments","addComment","comment","voteForTopic","unvoteForTopic","fetchTopicOfTheDay","updateComment","deleteComment","commentId","userHasVotedStatus","hasVoted","fetchCommentsForTopic","castVote","checkUserVote","data","alert","message","has_voted","errorData","error","removeVote","editComment","updatedComment","removeComment","initialState","topicOfTheDay","topicsReducer","state","action","Object","fromEntries","map","id","newState","updatedState","newComments"],"sources":["/Users/yosephlatif/Desktop/philosophize/react-app/src/store/topics.js"],"sourcesContent":["// src/store/topics.js\n\nconst GET_TOPICS = \"topics/GET_TOPICS\";\nconst CREATE_TOPIC = \"topics/CREATE_TOPIC\";\nconst REMOVE_TOPIC = \"topics/REMOVE_TOPIC\";\nconst UPDATE_TOPIC = \"topics/UPDATE_TOPIC\";\nconst SET_TOPIC_OF_THE_DAY = \"topics/SET_TOPIC_OF_THE_DAY\";\nconst GET_COMMENTS = \"topics/GET_COMMENTS\";\nconst ADD_COMMENT = \"topics/ADD_COMMENT\";\nconst VOTE_FOR_TOPIC = \"topics/VOTE_FOR_TOPIC\";\nconst UNVOTE_FOR_TOPIC = \"topics/UNVOTE_FOR_TOPIC\";\nconst RESET_VOTES = \"topics/RESET_VOTES\";\nconst USER_HAS_VOTED = \"topics/USER_HAS_VOTED\";\n\nconst UPDATE_COMMENT = \"topics/UPDATE_COMMENT\";\nconst DELETE_COMMENT = \"topics/DELETE_COMMENT\";\n\n\n// Action Creators\nconst getTopics = (topics) => ({\n  type: GET_TOPICS,\n  topics,\n});\n\nexport const addTopic = (topic) => ({\n  type: CREATE_TOPIC,\n  topic,\n});\n\n// Thunk Action Creators\nexport const fetchTopics = () => async (dispatch) => {\n  const response = await fetch(\"/api/topics\");\n  if (response.ok) {\n    const topics = await response.json();\n    dispatch(getTopics(topics));\n  }\n};\n\nexport const updateTopic = (topic) => ({\n  type: UPDATE_TOPIC,\n  topic,\n});\n\nexport const editTopic = (topicId, topicData) => async (dispatch) => {\n  const response = await fetch(`/api/topics/${topicId}`, {\n    method: \"PUT\",\n    headers: { \"Content-Type\": \"application/json\" },\n    body: JSON.stringify(topicData),\n    credentials: \"include\",\n  });\n\n  if (response.ok) {\n    const updatedTopic = await response.json();\n    dispatch(updateTopic(updatedTopic));\n    return updatedTopic;\n  } else {\n    const errors = await response.json();\n    return errors;\n  }\n};\n\nexport const removeTopic = (topicId) => ({\n  type: REMOVE_TOPIC,\n  topicId,\n});\n\nexport const createTopic = (topicData) => async (dispatch) => {\n  const response = await fetch(\"/api/topics/banana\", {\n    method: \"POST\",\n    headers: { \"Content-Type\": \"application/json\" },\n    body: JSON.stringify(topicData),\n    // body: formInfo\n  });\n\n  if (response.ok) {\n    const newTopic = await response.json();\n    dispatch(addTopic(newTopic));\n    return newTopic;\n  } else {\n    const errors = await response.json();\n    return errors;\n  }\n};\n\nexport const createComment = (topicId, commentData) => async (dispatch) => {\n  const response = await fetch(`/api/comments/${topicId}`, {\n    method: \"POST\",\n    headers: { \"Content-Type\": \"application/json\" },\n    body: JSON.stringify(commentData),\n    // body: formInfo\n  });\n\n  if (response.ok) {\n    console.log('comment created', response)\n  } else {\n    const errors = await response.json();\n    return errors;\n  }\n};\n\n// Add new action creators\nexport const setTopicOfTheDay = (topic) => ({\n  type: SET_TOPIC_OF_THE_DAY,\n  topic,\n});\n\nexport const getComments = (comments) => ({\n  type: GET_COMMENTS,\n  comments,\n});\n\nexport const addComment = (comment) => ({\n  type: ADD_COMMENT,\n  comment,\n});\n\n// export const voteForTopic = (topicId) => ({\n//   type: VOTE_FOR_TOPIC,\n//   topicId,\n// });\n\nexport const voteForTopic = (updatedTopic) => ({\n  type: VOTE_FOR_TOPIC,\n  topic: updatedTopic,\n});\n\nexport const unvoteForTopic = (updatedTopic) => ({\n  type: UNVOTE_FOR_TOPIC,\n  topic: updatedTopic,\n});\n\n// Thunk for fetching the topic of the day\nexport const fetchTopicOfTheDay = () => async (dispatch) => {\n  const response = await fetch(\"/api/topics/topic-of-the-day\");\n  if (response.ok) {\n    const topic = await response.json();\n    dispatch(setTopicOfTheDay(topic));\n  }\n};\n\n\n//comments\n\nexport const updateComment = (comment) => ({\n  type: UPDATE_COMMENT,\n  comment,\n});\n\nexport const deleteComment = (commentId) => ({\n  type: DELETE_COMMENT,\n  commentId,\n});\n\nexport const userHasVotedStatus = (hasVoted) => ({\n  type: USER_HAS_VOTED,\n  hasVoted,\n});\n\n\n// Thunk for fetching comments of the topic of the day\nexport const fetchCommentsForTopic = (topicId) => async (dispatch) => {\n  console.log('fetchCommentsForTopic', topicId)\n  const response = await fetch(`/api/comments/${topicId}`);\n  if (response.ok) {\n    const comments = await response.json();\n    dispatch(getComments(comments));\n  }\n};\n\n// export const castVote = (topicId) => async (dispatch) => {\n//   const response = await fetch(`/api/topics/${topicId}/vote`, {\n//     method: 'POST',\n//     headers: {\n//       'Content-Type': 'application/json'\n//     },\n//     // Make sure to include credentials if your API requires authentication\n//     credentials: 'include',\n//   });\n\n//   if (response.ok) {\n//     dispatch(voteForTopic(topicId));\n//   } else {\n//     // Handle errors, e.g., user has already voted\n//     const data = await response.json();\n//     alert(data.message); // Or handle the error message in a more user-friendly way\n//   }\n// };\n\nexport const castVote = (topicId) => async (dispatch) => {\n  const response = await fetch(`/api/topics/${topicId}/vote`, {\n    method: \"POST\",\n    headers: {\n      \"Content-Type\": \"application/json\",\n    },\n    credentials: \"include\",\n  });\n\n  if (response.ok) {\n    const updatedTopic = await response.json();\n    console.log(\"Updated Topic:\", updatedTopic); // Log to check the updated topic\n    dispatch(voteForTopic(updatedTopic));\n    dispatch(checkUserVote());\n  } else {\n    const data = await response.json();\n    alert(data.message);\n  }\n};\n\nexport const checkUserVote = () => async (dispatch) => {\n  try {\n    const response = await fetch('/api/votes/check-vote', {\n      method: 'GET',\n      headers: {\n        'Content-Type': 'application/json',\n      },\n      credentials: 'include',\n    });\n\n    if (response.ok) {\n      const data = await response.json();\n      const hasVoted = data.has_voted;\n      console.log('Has the user voted?', hasVoted);\n      dispatch(userHasVotedStatus(hasVoted));\n    } else {\n      const errorData = await response.json();\n      // Handle error case, maybe show an alert or log the error\n      console.error('Error:', errorData.message);\n    }\n  } catch (error) {\n    // Handle any network errors or exceptions\n    console.error('Network Error:', error);\n  }\n};\n\nexport const removeVote = (topicId) => async (dispatch) => {\n  const response = await fetch(`/api/topics/${topicId}/unvote`, {\n    method: \"POST\",\n    headers: {\n      \"Content-Type\": \"application/json\",\n    },\n    // Make sure to include credentials if your API requires authentication\n    credentials: \"include\",\n  });\n\n  if (response.ok) {\n    const updatedTopic = await response.json();\n    dispatch(unvoteForTopic(updatedTopic));\n    dispatch(checkUserVote());\n  } else {\n    // Handle errors\n    const data = await response.json();\n    alert(data.message); // Or handle the error message in a more user-friendly way\n  }\n};\n\nexport const editComment = (commentId, commentData) => async (dispatch) => {\n  const response = await fetch(`/api/comments/${commentId}`, {\n    method: \"PUT\",\n    headers: { \"Content-Type\": \"application/json\" },\n    body: JSON.stringify(commentData),\n  });\n\n  if (response.ok) {\n    const updatedComment = await response.json();\n    dispatch(updateComment(updatedComment));\n    return updatedComment;\n  } else {\n    const errors = await response.json();\n    return errors;\n  }\n};\n\nexport const removeComment = (commentId) => async (dispatch) => {\n  const response = await fetch(`/api/comments/${commentId}`, {\n    method: \"DELETE\",\n  });\n\n  if (response.ok) {\n    dispatch(deleteComment(commentId));\n  } else {\n    const errors = await response.json();\n    return errors;\n  }\n};\n\n\n// Adjust the initial state\nconst initialState = {\n  topics: {}, // Existing topics state\n  topicOfTheDay: null, // New state for Topic of the Day\n  comments: {}, // New state for comments\n};\n\n// Reducer\n\n// export default function topicsReducer(state = initialState, action) {\n//   switch (action.type) {\n//       case GET_TOPICS:\n//           const topicsNormalized = {};\n//           action.topics.forEach(topic => {\n//               topicsNormalized[topic.id] = topic;\n//           });\n//           return { ...state, ...topicsNormalized };\n//       case CREATE_TOPIC:\n//           return { ...state, [action.topic.id]: action.topic };\n//       default:\n//           return state;\n//   }\n// }\n\nexport default function topicsReducer(state = initialState, action) {\n  switch (action.type) {\n    case GET_TOPICS:\n      return {\n        ...state,\n        ...Object.fromEntries(action.topics.map((topic) => [topic.id, topic])),\n      };\n    // case CREATE_TOPIC:\n    //   return { ...state, [action.topic.id]: action.topic };\n    case CREATE_TOPIC:\n  return {\n    ...state,\n    topics: [action.topic, ...state.topics] // this places the new topic at the start\n  };\n    case UPDATE_TOPIC:\n      return {\n        ...state,\n        [action.topic.id]: action.topic,\n      };\n    case REMOVE_TOPIC:\n      const newState = { ...state };\n      delete newState[action.topicId];\n      return newState;\n    case SET_TOPIC_OF_THE_DAY:\n      return { ...state, topicOfTheDay: action.topic };\n    case GET_COMMENTS:\n      return { ...state, comments: { ...action.comments } };\n    case ADD_COMMENT:\n      // Logic to add a new comment to the state\n      return {\n        ...state,\n        comments: { ...state.comments, [action.comment.id]: action.comment },\n      };\n    //     case VOTE_FOR_TOPIC:\n    //   return {\n    //     ...state,\n    //     topics: {\n    //       ...state.topics,\n    //       [action.topicId]: {\n    //         ...state.topics[action.topicId],\n    //         hasVoted: true\n    //       }\n    //     }\n    //   };\n    // case UNVOTE_FOR_TOPIC:\n    //   return {\n    //     ...state,\n    //     topics: {\n    //       ...state.topics,\n    //       [action.topicId]: {\n    //         ...state.topics[action.topicId],\n    //         hasVoted: false\n    //       }\n    //     }\n    //   };\n    case VOTE_FOR_TOPIC:\n      console.log(\"Action:\", action);\n      console.log(\"Current State:\", state); // Log current state\n      const newTopic = {\n        ...state[action.topic.id],\n        ...action.topic,\n      };\n      console.log(\"ne topic\", newTopic);\n      const updatedState = {\n        ...state,\n        [action.topic.id]: newTopic,\n      };\n      console.log(\"Updated State:\", updatedState); // Log updated state\n      return updatedState;\n\n      case USER_HAS_VOTED:\n        return {\n          ...state,\n          hasVoted: action.hasVoted\n        };\n    case UNVOTE_FOR_TOPIC:\n      return {\n        ...state,\n        [action.topic.id]: {\n          ...state[action.topic.id],\n          ...action.topic,\n          \n        },\n      };\n      case UPDATE_COMMENT:\n      return {\n        ...state,\n        comments: {\n          ...state.comments,\n          [action.comment.id]: action.comment,\n        },\n      };\n    case DELETE_COMMENT:\n      const newComments = { ...state.comments };\n      delete newComments[action.commentId];\n      return {\n        ...state,\n        comments: newComments,\n      };\n    default:\n      return state;\n  }\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}