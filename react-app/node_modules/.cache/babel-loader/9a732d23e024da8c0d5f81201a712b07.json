{"ast":null,"code":"var _jsxFileName = \"/Users/yosephlatif/Desktop/philosophize/react-app/src/components/Topics/TopicList.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport Topic from './Topic';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst TopicList = () => {\n  _s();\n  const [topics, setTopics] = useState([]);\n  useEffect(() => {\n    const fetchTopics = async () => {\n      try {\n        const response = await fetch('/api/topics'); // Adjust the URL based on your API endpoint\n        if (!response.ok) throw new Error('Network response was not ok');\n        const data = await response.json();\n        setTopics(data); // Make sure the key matches what your backend sends\n      } catch (error) {\n        console.error('Error fetching topics:', error);\n      }\n    };\n    fetchTopics();\n  }, []);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Topics\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 25,\n      columnNumber: 11\n    }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n      children: topics.length > 0 ? topics.map(topic => /*#__PURE__*/_jsxDEV(Topic, {\n        topic: topic\n      }, topic.id, false, {\n        fileName: _jsxFileName,\n        lineNumber: 29,\n        columnNumber: 17\n      }, this)) : /*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"Loading topics...\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 32,\n        columnNumber: 15\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 26,\n      columnNumber: 11\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 24,\n    columnNumber: 9\n  }, this);\n};\n_s(TopicList, \"5PrH2L6CTp15aUV0qkyKrxReD80=\");\n_c = TopicList;\nexport default TopicList;\n\n// import React, { useState, useEffect } from 'react';\n// import { useDispatch } from 'react-redux';\n// import Topic from './Topic';\n// import TopicForm from './TopicForm';\n// import { addTopic } from '../../store/topics';\n\n// const TopicList = () => {\n//   const [topics, setTopics] = useState([]);\n//   const [showForm, setShowForm] = useState(false);\n//   const [editingTopic, setEditingTopic] = useState(null);\n\n//   useEffect(() => {\n//     fetchTopics();\n//   }, []);\n\n//   const fetchTopics = async () => {\n//     try {\n//       const response = await fetch('/api/topics', {\n//         method: 'GET',\n//         headers: { 'Content-Type': 'application/json' },\n//         credentials: 'include', // Include cookies with the request\n//       });\n//       if (!response.ok) throw new Error('Network response was not ok');\n//       const data = await response.json();\n//       setTopics(data);\n//     } catch (error) {\n//       console.error('Error fetching topics:', error);\n//     }\n//   };\n\n//   const dispatch = useDispatch();\n\n// //   const handleCreateOrUpdateTopic = async (topicData) => {\n// //     // Determine the HTTP method and URL based on whether we are creating or updating a topic\n// //     const method = editingTopic ? 'PUT' : 'POST';\n// //     const url = editingTopic ? `/api/topics/${editingTopic.id}` : '/api/topics';\n\n// //     try {\n// //       const response = await fetch(url, {\n// //         method,\n// //         headers: { 'Content-Type': 'application/json' },\n// //         body: JSON.stringify(topicData),\n// //       });\n// //       if (!response.ok) throw new Error('Network response was not ok');\n// //       setShowForm(false);\n// //       setEditingTopic(null);\n// //       fetchTopics();  // Refresh the list of topics\n// //     } catch (error) {\n// //       console.error('Error submitting topic:', error);\n// //     }\n// //   };\n\n// const handleCreateOrUpdateTopic = async (topicData) => {\n//     // Determine the HTTP method and URL based on whether we are creating or updating a topic\n//     const method = editingTopic ? 'PUT' : 'POST';\n//     const url = editingTopic ? `/api/topics/${editingTopic.id}` : '/api/topics';\n\n//     try {\n//       const response = await fetch(url, {\n//         method,\n//         headers: { 'Content-Type': 'application/json' },\n//         body: JSON.stringify(topicData),\n//         credentials: 'include',\n//       });\n//       if (!response.ok) throw new Error('Network response was not ok');\n\n//       const returnedTopic = await response.json();\n\n//       if (!editingTopic) {\n//         // Dispatch the Redux action here for adding a new topic\n//         dispatch(addTopic(returnedTopic));\n//       } else {\n\n//       }\n\n//       setShowForm(false);\n//       setEditingTopic(null);\n//       fetchTopics();  // Refresh the list of topics\n//     } catch (error) {\n//       console.error('Error submitting topic:', error);\n//     }\n//   };\n\n//   const handleDeleteTopic = async (topicId) => {\n//     try {\n//       const response = await fetch(`/api/topics/${topicId}`, { method: 'DELETE' });\n//       if (!response.ok) throw new Error('Network response was not ok');\n//       fetchTopics();  // Refresh the list of topics\n//     } catch (error) {\n//       console.error('Error deleting topic:', error);\n//     }\n//   };\n\n//   const handleEditClick = (topic) => {\n//     setEditingTopic(topic);\n//     setShowForm(true);\n//   };\n\n//   return (\n//     <div>\n//       <h1>Topics</h1>\n//       <button onClick={() => setShowForm(true)}>Create New Topic</button>\n//       {showForm && (\n//         <TopicForm\n//           existingTopic={editingTopic}\n//           onSubmit={handleCreateOrUpdateTopic}\n//           onCancel={() => {\n//             setShowForm(false);\n//             setEditingTopic(null);\n//           }}\n//         />\n//       )}\n//       <ul>\n//         {topics.length > 0 ? (\n//           topics.map(topic => (\n//             <Topic\n//               key={topic.id}\n//               topic={topic}\n//               onEdit={handleEditClick}\n//               onDelete={handleDeleteTopic}\n//             />\n//           ))\n//         ) : (\n//           <p>Loading topics...</p>\n//         )}\n//       </ul>\n//     </div>\n//   );\n// };\n\n// export default TopicList;\nvar _c;\n$RefreshReg$(_c, \"TopicList\");","map":{"version":3,"names":["React","useState","useEffect","Topic","TopicList","topics","setTopics","fetchTopics","response","fetch","ok","Error","data","json","error","console","length","map","topic","id"],"sources":["/Users/yosephlatif/Desktop/philosophize/react-app/src/components/Topics/TopicList.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport Topic from './Topic';\n\n\nconst TopicList = () => {\n    const [topics, setTopics] = useState([]);\n  \n    useEffect(() => {\n      const fetchTopics = async () => {\n        try {\n          const response = await fetch('/api/topics'); // Adjust the URL based on your API endpoint\n          if (!response.ok) throw new Error('Network response was not ok');\n          const data = await response.json();\n          setTopics(data); // Make sure the key matches what your backend sends\n        } catch (error) {\n          console.error('Error fetching topics:', error);\n        }\n      };\n  \n      fetchTopics();\n    }, []);\n\n    return (\n        <div>\n          <h1>Topics</h1>\n          <ul>\n            {topics.length > 0 ? (\n              topics.map(topic => (\n                <Topic key={topic.id} topic={topic} />\n              ))\n            ) : (\n              <p>Loading topics...</p>\n            )}\n          </ul>\n        </div>\n      );\n\n    };\n      \n\nexport default TopicList;\n\n\n\n\n\n\n\n\n\n\n// import React, { useState, useEffect } from 'react';\n// import { useDispatch } from 'react-redux';\n// import Topic from './Topic';\n// import TopicForm from './TopicForm';\n// import { addTopic } from '../../store/topics';\n\n// const TopicList = () => {\n//   const [topics, setTopics] = useState([]);\n//   const [showForm, setShowForm] = useState(false);\n//   const [editingTopic, setEditingTopic] = useState(null);\n\n//   useEffect(() => {\n//     fetchTopics();\n//   }, []);\n\n//   const fetchTopics = async () => {\n//     try {\n//       const response = await fetch('/api/topics', {\n//         method: 'GET',\n//         headers: { 'Content-Type': 'application/json' },\n//         credentials: 'include', // Include cookies with the request\n//       });\n//       if (!response.ok) throw new Error('Network response was not ok');\n//       const data = await response.json();\n//       setTopics(data);\n//     } catch (error) {\n//       console.error('Error fetching topics:', error);\n//     }\n//   };\n  \n  \n  \n\n//   const dispatch = useDispatch();\n\n// //   const handleCreateOrUpdateTopic = async (topicData) => {\n// //     // Determine the HTTP method and URL based on whether we are creating or updating a topic\n// //     const method = editingTopic ? 'PUT' : 'POST';\n// //     const url = editingTopic ? `/api/topics/${editingTopic.id}` : '/api/topics';\n\n// //     try {\n// //       const response = await fetch(url, {\n// //         method,\n// //         headers: { 'Content-Type': 'application/json' },\n// //         body: JSON.stringify(topicData),\n// //       });\n// //       if (!response.ok) throw new Error('Network response was not ok');\n// //       setShowForm(false);\n// //       setEditingTopic(null);\n// //       fetchTopics();  // Refresh the list of topics\n// //     } catch (error) {\n// //       console.error('Error submitting topic:', error);\n// //     }\n// //   };\n\n// const handleCreateOrUpdateTopic = async (topicData) => {\n//     // Determine the HTTP method and URL based on whether we are creating or updating a topic\n//     const method = editingTopic ? 'PUT' : 'POST';\n//     const url = editingTopic ? `/api/topics/${editingTopic.id}` : '/api/topics';\n  \n//     try {\n//       const response = await fetch(url, {\n//         method,\n//         headers: { 'Content-Type': 'application/json' },\n//         body: JSON.stringify(topicData),\n//         credentials: 'include',\n//       });\n//       if (!response.ok) throw new Error('Network response was not ok');\n  \n//       const returnedTopic = await response.json();\n  \n//       if (!editingTopic) {\n//         // Dispatch the Redux action here for adding a new topic\n//         dispatch(addTopic(returnedTopic));\n//       } else {\n\n//       }\n  \n//       setShowForm(false);\n//       setEditingTopic(null);\n//       fetchTopics();  // Refresh the list of topics\n//     } catch (error) {\n//       console.error('Error submitting topic:', error);\n//     }\n//   };\n  \n\n//   const handleDeleteTopic = async (topicId) => {\n//     try {\n//       const response = await fetch(`/api/topics/${topicId}`, { method: 'DELETE' });\n//       if (!response.ok) throw new Error('Network response was not ok');\n//       fetchTopics();  // Refresh the list of topics\n//     } catch (error) {\n//       console.error('Error deleting topic:', error);\n//     }\n//   };\n\n//   const handleEditClick = (topic) => {\n//     setEditingTopic(topic);\n//     setShowForm(true);\n//   };\n\n//   return (\n//     <div>\n//       <h1>Topics</h1>\n//       <button onClick={() => setShowForm(true)}>Create New Topic</button>\n//       {showForm && (\n//         <TopicForm\n//           existingTopic={editingTopic}\n//           onSubmit={handleCreateOrUpdateTopic}\n//           onCancel={() => {\n//             setShowForm(false);\n//             setEditingTopic(null);\n//           }}\n//         />\n//       )}\n//       <ul>\n//         {topics.length > 0 ? (\n//           topics.map(topic => (\n//             <Topic\n//               key={topic.id}\n//               topic={topic}\n//               onEdit={handleEditClick}\n//               onDelete={handleDeleteTopic}\n//             />\n//           ))\n//         ) : (\n//           <p>Loading topics...</p>\n//         )}\n//       </ul>\n//     </div>\n//   );\n// };\n\n// export default TopicList;\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAClD,OAAOC,KAAK,MAAM,SAAS;AAAC;AAG5B,MAAMC,SAAS,GAAG,MAAM;EAAA;EACpB,MAAM,CAACC,MAAM,EAAEC,SAAS,CAAC,GAAGL,QAAQ,CAAC,EAAE,CAAC;EAExCC,SAAS,CAAC,MAAM;IACd,MAAMK,WAAW,GAAG,YAAY;MAC9B,IAAI;QACF,MAAMC,QAAQ,GAAG,MAAMC,KAAK,CAAC,aAAa,CAAC,CAAC,CAAC;QAC7C,IAAI,CAACD,QAAQ,CAACE,EAAE,EAAE,MAAM,IAAIC,KAAK,CAAC,6BAA6B,CAAC;QAChE,MAAMC,IAAI,GAAG,MAAMJ,QAAQ,CAACK,IAAI,EAAE;QAClCP,SAAS,CAACM,IAAI,CAAC,CAAC,CAAC;MACnB,CAAC,CAAC,OAAOE,KAAK,EAAE;QACdC,OAAO,CAACD,KAAK,CAAC,wBAAwB,EAAEA,KAAK,CAAC;MAChD;IACF,CAAC;IAEDP,WAAW,EAAE;EACf,CAAC,EAAE,EAAE,CAAC;EAEN,oBACI;IAAA,wBACE;MAAA;IAAA;MAAA;MAAA;MAAA;IAAA,QAAe,eACf;MAAA,UACGF,MAAM,CAACW,MAAM,GAAG,CAAC,GAChBX,MAAM,CAACY,GAAG,CAACC,KAAK,iBACd,QAAC,KAAK;QAAgB,KAAK,EAAEA;MAAM,GAAvBA,KAAK,CAACC,EAAE;QAAA;QAAA;QAAA;MAAA,QACrB,CAAC,gBAEF;QAAA;MAAA;QAAA;QAAA;QAAA;MAAA;IACD;MAAA;MAAA;MAAA;IAAA,QACE;EAAA;IAAA;IAAA;IAAA;EAAA,QACD;AAGV,CAAC;AAAC,GAjCAf,SAAS;AAAA,KAATA,SAAS;AAoCf,eAAeA,SAAS;;AAWxB;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAKA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AAAA;AAAA"},"metadata":{},"sourceType":"module"}