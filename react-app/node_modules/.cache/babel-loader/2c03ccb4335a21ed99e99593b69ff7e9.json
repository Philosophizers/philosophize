{"ast":null,"code":"var _jsxFileName = \"/Users/yosephlatif/Desktop/philosophize/react-app/src/components/Topics/TopicList.js\",\n  _s = $RefreshSig$();\n// import React, { useState, useEffect } from 'react';\n// import Topic from './Topic';\n\n// const TopicList = () => {\n//     const [topics, setTopics] = useState([]);\n\n//     useEffect(() => {\n//       const fetchTopics = async () => {\n//         try {\n//           const response = await fetch('/api/topics'); // Adjust the URL based on your API endpoint\n//           if (!response.ok) throw new Error('Network response was not ok');\n//           const data = await response.json();\n//           setTopics(data); // Make sure the key matches what your backend sends\n//         } catch (error) {\n//           console.error('Error fetching topics:', error);\n//         }\n//       };\n\n//       fetchTopics();\n//     }, []);\n\n//     return (\n//         <div>\n//           <h1>Topics</h1>\n//           <ul>\n//             {topics.length > 0 ? (\n//               topics.map(topic => (\n//                 <Topic key={topic.id} topic={topic} />\n//               ))\n//             ) : (\n//               <p>Loading topics...</p>\n//             )}\n//           </ul>\n//         </div>\n//       );\n\n//     };\n\n// export default TopicList;\n\n// import React, { useState, useEffect } from 'react';\n// import { useDispatch } from 'react-redux';\n// import Topic from './Topic';\n// import TopicForm from './TopicForm';\n// import { addTopic } from '../../store/topics';\n\n// const TopicList = () => {\n//   const [topics, setTopics] = useState([]);\n//   const [showForm, setShowForm] = useState(false);\n//   const [editingTopic, setEditingTopic] = useState(null);\n\n//   useEffect(() => {\n//     fetchTopics();\n//   }, []);\n\n//   const fetchTopics = async () => {\n//     try {\n//       const response = await fetch('/api/topics', {\n//         method: 'GET',\n//         headers: { 'Content-Type': 'application/json' },\n//         credentials: 'include', // Include cookies with the request\n//       });\n//       if (!response.ok) throw new Error('Network response was not ok');\n//       const data = await response.json();\n//       setTopics(data);\n//     } catch (error) {\n//       console.error('Error fetching topics:', error);\n//     }\n//   };\n\n//   const dispatch = useDispatch();\n\n// const handleCreateOrUpdateTopic = async (topicData) => {\n//     // Determine the HTTP method and URL based on whether we are creating or updating a topic\n//     const method = editingTopic ? 'PUT' : 'POST';\n//     const url = editingTopic ? `/api/topics/${editingTopic.id}` : '/api/topics';\n\n//     try {\n//       const response = await fetch(url, {\n//         method,\n//         headers: { 'Content-Type': 'application/json' },\n//         body: JSON.stringify(topicData),\n//         credentials: 'include',\n//       });\n//       if (!response.ok) throw new Error('Network response was not ok');\n\n//       const returnedTopic = await response.json();\n\n//       if (!editingTopic) {\n//         // Dispatch the Redux action here for adding a new topic\n//         dispatch(addTopic(returnedTopic));\n//       } else {\n\n//       }\n\n//       setShowForm(false);\n//       setEditingTopic(null);\n//       fetchTopics();  // Refresh the list of topics\n//     } catch (error) {\n//       console.error('Error submitting topic:', error);\n//     }\n//   };\n\n//   const handleDeleteTopic = async (topicId) => {\n//     try {\n//       const response = await fetch(`/api/topics/${topicId}`, { method: 'DELETE' });\n//       if (!response.ok) throw new Error('Network response was not ok');\n//       fetchTopics();  // Refresh the list of topics\n//     } catch (error) {\n//       console.error('Error deleting topic:', error);\n//     }\n//   };\n\n//   const handleEditClick = (topic) => {\n//     setEditingTopic(topic);\n//     setShowForm(true);\n//   };\n\n//   return (\n//     <div>\n//       <h1>Topics</h1>\n//       <button onClick={() => setShowForm(true)}>Create New Topic</button>\n//       {showForm && (\n//         <TopicForm\n//           existingTopic={editingTopic}\n//           onSubmit={handleCreateOrUpdateTopic}\n//           onCancel={() => {\n//             setShowForm(false);\n//             setEditingTopic(null);\n//           }}\n//         />\n//       )}\n//       <ul>\n//         {topics.length > 0 ? (\n//           topics.map(topic => (\n//             <Topic\n//               key={topic.id}\n//               topic={topic}\n//               onEdit={handleEditClick}\n//               onDelete={handleDeleteTopic}\n//             />\n//           ))\n//         ) : (\n//           <p>Loading topics...</p>\n//         )}\n//       </ul>\n//     </div>\n//   );\n// };\n\n// export default TopicList;\n\n// import React, { useState, useEffect } from 'react';\n// import { useDispatch, useSelector } from 'react-redux';\n// import Topic from './Topic';\n// import TopicForm from './TopicForm';\n// import { fetchTopics, editTopic, updateTopic, removeTopic } from '../../store/topics'; // Import the fetchTopics action\n\n// const TopicList = () => {\n//     const dispatch = useDispatch();\n//     const topics = useSelector(state => Object.values(state.topics)); // Accessing topics from Redux store\n//     const [showForm, setShowForm] = useState(false);\n//     const [editingTopic, setEditingTopic] = useState(null);\n\n//     useEffect(() => {\n//         dispatch(fetchTopics()); // Dispatching action to fetch topics\n//     }, [dispatch]);\n\n//     const handleCreateOrUpdateTopic = async (topicData) => {\n//       // Determine the HTTP method and URL based on whether we are creating or updating a topic\n//       const method = editingTopic ? 'PUT' : 'POST';\n//       const url = editingTopic ? `/api/topics/${editingTopic.id}` : '/api/topics';\n\n//       try {\n//         const response = await fetch(url, {\n//           method,\n//           headers: { 'Content-Type': 'application/json' },\n//           body: JSON.stringify(topicData),\n//           credentials: 'include',\n//         });\n//         if (!response.ok) throw new Error('Network response was not ok');\n\n//         const returnedTopic = await response.json();\n\n//         if (!editingTopic) {\n//           // Dispatch the Redux action here for adding a new topic\n//           dispatch(fetchTopics(returnedTopic));\n//         } else {\n\n//         }\n\n//         setShowForm(false);\n//         setEditingTopic(null);\n//         fetchTopics();  // Refresh the list of topics\n//       } catch (error) {\n//         console.error('Error submitting topic:', error);\n//       }\n//     };\n\n// // Inside your component where topic editing is handled\n// const handleUpdateTopic = async (topicId, updatedTopicData) => {\n//   const result = await dispatch(editTopic(topicId, updatedTopicData));\n\n//   if (!result.errors) {\n//       // For example, you could redirect to the topic list page or close the modal/form\n//       console.log('Topic updated successfully');\n//       // Redirect or update the state to reflect the changes\n//   } else {\n//       // Show error messages to the user\n//       console.error('Failed to update topic:', result.errors);\n//   }\n// };\n\n//     // const handleDeleteTopic = async (topicId) => {\n//     //   try {\n//     //     const response = await fetch(`/api/topics/${topicId}`, { method: 'DELETE' });\n//     //     if (!response.ok) throw new Error('Network response was not ok');\n\n//     //     // Dispatch fetchTopics again to refresh the list\n//     //     dispatch(fetchTopics());\n//     //   } catch (error) {\n//     //     console.error('Error deleting topic:', error);\n//     //   }\n//     // };\n\n//     const handleDeleteTopic = async (topicId) => {\n//       try {\n//         const response = await fetch(`/api/topics/${topicId}`, { method: 'DELETE' });\n//         if (!response.ok) throw new Error('Network response was not ok');\n//         dispatch(removeTopic(topicId));\n//       } catch (error) {\n//         console.error('Error deleting topic:', error);\n//       }\n//     };\n\n//     const handleEditClick = (topic) => {\n//       setEditingTopic(topic);\n//       setShowForm(true);\n//   };\n\n//     return (\n//         <div>\n//             <h1>Topics</h1>\n//             <button onClick={() => setShowForm(true)}>Create New Topic</button>\n//             {showForm && (\n//     <TopicForm\n//         existingTopic={editingTopic}\n//         onSubmit={handleCreateOrUpdateTopic}\n//         onCancel={() => {\n//             setShowForm(false);\n//             setEditingTopic(null);\n//         }}\n//     />\n// )}\n\n//             <ul>\n//                 {topics.length > 0 ? (\n//                     topics.map(topic => (\n//                         <Topic\n//                             key={topic.id}\n//                             topic={topic}\n//                             onEdit={handleEditClick}\n//                             onDelete={handleDeleteTopic}\n//                         />\n//                     ))\n//                 ) : (\n//                     <p>Loading topics...</p>\n//                 )}\n//             </ul>\n//         </div>\n//     );\n// };\n\n// export default TopicList;\n\nimport React, { useState, useEffect } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport Topic from './Topic';\nimport TopicForm from './TopicForm';\nimport { fetchTopics, editTopic, createTopic, removeTopic } from '../../store/topics';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst TopicList = () => {\n  _s();\n  const dispatch = useDispatch();\n  const topics = useSelector(state => Object.values(state.topics));\n  const [showForm, setShowForm] = useState(false);\n  const [editingTopic, setEditingTopic] = useState(null);\n  useEffect(() => {\n    dispatch(fetchTopics());\n  }, [dispatch]);\n  const handleCreateTopic = async topicData => {\n    try {\n      const res = await dispatch(createTopic(topicData));\n      if (!res.errors) {\n        setShowForm(false);\n        dispatch(fetchTopics());\n      } else {\n        console.error('Failed to create topic:', res.errors);\n      }\n    } catch (error) {\n      console.error('Error creating topic:', error);\n    }\n  };\n  const handleEditTopic = async topicData => {\n    try {\n      const res = await dispatch(editTopic(editingTopic.id, topicData));\n      if (!res.errors) {\n        setShowForm(false);\n        setEditingTopic(null);\n        dispatch(fetchTopics());\n      } else {\n        console.error('Failed to update topic:', res.errors);\n      }\n    } catch (error) {\n      console.error('Error updating topic:', error);\n    }\n  };\n  const handleDeleteTopic = async topicId => {\n    try {\n      const response = await fetch(`/api/topics/${topicId}`, {\n        method: 'DELETE'\n      });\n      if (!response.ok) throw new Error('Network response was not ok');\n      dispatch(removeTopic(topicId));\n    } catch (error) {\n      console.error('Error deleting topic:', error);\n    }\n  };\n  const handleEditClick = topic => {\n    setEditingTopic(topic);\n    setShowForm(true);\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Topics\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 393,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: () => {\n        setShowForm(true);\n        setEditingTopic(null); // Reset editing topic\n      },\n      children: \"Create New Topic\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 394,\n      columnNumber: 13\n    }, this), showForm && /*#__PURE__*/_jsxDEV(TopicForm, {\n      existingTopic: editingTopic,\n      onSubmit: editingTopic ? handleEditTopic : handleCreateTopic,\n      onCancel: () => {\n        setShowForm(false);\n        setEditingTopic(null);\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 401,\n      columnNumber: 17\n    }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n      children: topics.length > 0 ? topics.map(topic => /*#__PURE__*/_jsxDEV(Topic, {\n        topic: topic,\n        onEdit: handleEditClick\n      }, topic.id, false, {\n        fileName: _jsxFileName,\n        lineNumber: 414,\n        columnNumber: 25\n      }, this)) : /*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"Loading topics...\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 421,\n        columnNumber: 21\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 411,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 392,\n    columnNumber: 9\n  }, this);\n};\n_s(TopicList, \"A9DezvfOYCza2ATAJXKzQRUNnKs=\", false, function () {\n  return [useDispatch, useSelector];\n});\n_c = TopicList;\nexport default TopicList;\nvar _c;\n$RefreshReg$(_c, \"TopicList\");","map":{"version":3,"names":["React","useState","useEffect","useDispatch","useSelector","Topic","TopicForm","fetchTopics","editTopic","createTopic","removeTopic","TopicList","dispatch","topics","state","Object","values","showForm","setShowForm","editingTopic","setEditingTopic","handleCreateTopic","topicData","res","errors","console","error","handleEditTopic","id","handleDeleteTopic","topicId","response","fetch","method","ok","Error","handleEditClick","topic","length","map"],"sources":["/Users/yosephlatif/Desktop/philosophize/react-app/src/components/Topics/TopicList.js"],"sourcesContent":["// import React, { useState, useEffect } from 'react';\n// import Topic from './Topic';\n\n\n// const TopicList = () => {\n//     const [topics, setTopics] = useState([]);\n  \n//     useEffect(() => {\n//       const fetchTopics = async () => {\n//         try {\n//           const response = await fetch('/api/topics'); // Adjust the URL based on your API endpoint\n//           if (!response.ok) throw new Error('Network response was not ok');\n//           const data = await response.json();\n//           setTopics(data); // Make sure the key matches what your backend sends\n//         } catch (error) {\n//           console.error('Error fetching topics:', error);\n//         }\n//       };\n  \n//       fetchTopics();\n//     }, []);\n\n//     return (\n//         <div>\n//           <h1>Topics</h1>\n//           <ul>\n//             {topics.length > 0 ? (\n//               topics.map(topic => (\n//                 <Topic key={topic.id} topic={topic} />\n//               ))\n//             ) : (\n//               <p>Loading topics...</p>\n//             )}\n//           </ul>\n//         </div>\n//       );\n\n//     };\n      \n\n// export default TopicList;\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n// import React, { useState, useEffect } from 'react';\n// import { useDispatch } from 'react-redux';\n// import Topic from './Topic';\n// import TopicForm from './TopicForm';\n// import { addTopic } from '../../store/topics';\n\n// const TopicList = () => {\n//   const [topics, setTopics] = useState([]);\n//   const [showForm, setShowForm] = useState(false);\n//   const [editingTopic, setEditingTopic] = useState(null);\n\n//   useEffect(() => {\n//     fetchTopics();\n//   }, []);\n\n//   const fetchTopics = async () => {\n//     try {\n//       const response = await fetch('/api/topics', {\n//         method: 'GET',\n//         headers: { 'Content-Type': 'application/json' },\n//         credentials: 'include', // Include cookies with the request\n//       });\n//       if (!response.ok) throw new Error('Network response was not ok');\n//       const data = await response.json();\n//       setTopics(data);\n//     } catch (error) {\n//       console.error('Error fetching topics:', error);\n//     }\n//   };\n  \n  \n  \n\n//   const dispatch = useDispatch();\n\n// const handleCreateOrUpdateTopic = async (topicData) => {\n//     // Determine the HTTP method and URL based on whether we are creating or updating a topic\n//     const method = editingTopic ? 'PUT' : 'POST';\n//     const url = editingTopic ? `/api/topics/${editingTopic.id}` : '/api/topics';\n  \n//     try {\n//       const response = await fetch(url, {\n//         method,\n//         headers: { 'Content-Type': 'application/json' },\n//         body: JSON.stringify(topicData),\n//         credentials: 'include',\n//       });\n//       if (!response.ok) throw new Error('Network response was not ok');\n  \n//       const returnedTopic = await response.json();\n  \n//       if (!editingTopic) {\n//         // Dispatch the Redux action here for adding a new topic\n//         dispatch(addTopic(returnedTopic));\n//       } else {\n\n//       }\n  \n//       setShowForm(false);\n//       setEditingTopic(null);\n//       fetchTopics();  // Refresh the list of topics\n//     } catch (error) {\n//       console.error('Error submitting topic:', error);\n//     }\n//   };\n  \n\n//   const handleDeleteTopic = async (topicId) => {\n//     try {\n//       const response = await fetch(`/api/topics/${topicId}`, { method: 'DELETE' });\n//       if (!response.ok) throw new Error('Network response was not ok');\n//       fetchTopics();  // Refresh the list of topics\n//     } catch (error) {\n//       console.error('Error deleting topic:', error);\n//     }\n//   };\n\n//   const handleEditClick = (topic) => {\n//     setEditingTopic(topic);\n//     setShowForm(true);\n//   };\n\n//   return (\n//     <div>\n//       <h1>Topics</h1>\n//       <button onClick={() => setShowForm(true)}>Create New Topic</button>\n//       {showForm && (\n//         <TopicForm\n//           existingTopic={editingTopic}\n//           onSubmit={handleCreateOrUpdateTopic}\n//           onCancel={() => {\n//             setShowForm(false);\n//             setEditingTopic(null);\n//           }}\n//         />\n//       )}\n//       <ul>\n//         {topics.length > 0 ? (\n//           topics.map(topic => (\n//             <Topic\n//               key={topic.id}\n//               topic={topic}\n//               onEdit={handleEditClick}\n//               onDelete={handleDeleteTopic}\n//             />\n//           ))\n//         ) : (\n//           <p>Loading topics...</p>\n//         )}\n//       </ul>\n//     </div>\n//   );\n// };\n\n// export default TopicList;\n\n\n\n\n\n\n\n\n\n\n\n\n// import React, { useState, useEffect } from 'react';\n// import { useDispatch, useSelector } from 'react-redux';\n// import Topic from './Topic';\n// import TopicForm from './TopicForm';\n// import { fetchTopics, editTopic, updateTopic, removeTopic } from '../../store/topics'; // Import the fetchTopics action\n\n// const TopicList = () => {\n//     const dispatch = useDispatch();\n//     const topics = useSelector(state => Object.values(state.topics)); // Accessing topics from Redux store\n//     const [showForm, setShowForm] = useState(false);\n//     const [editingTopic, setEditingTopic] = useState(null);\n\n//     useEffect(() => {\n//         dispatch(fetchTopics()); // Dispatching action to fetch topics\n//     }, [dispatch]);\n\n//     const handleCreateOrUpdateTopic = async (topicData) => {\n//       // Determine the HTTP method and URL based on whether we are creating or updating a topic\n//       const method = editingTopic ? 'PUT' : 'POST';\n//       const url = editingTopic ? `/api/topics/${editingTopic.id}` : '/api/topics';\n    \n//       try {\n//         const response = await fetch(url, {\n//           method,\n//           headers: { 'Content-Type': 'application/json' },\n//           body: JSON.stringify(topicData),\n//           credentials: 'include',\n//         });\n//         if (!response.ok) throw new Error('Network response was not ok');\n    \n//         const returnedTopic = await response.json();\n    \n//         if (!editingTopic) {\n//           // Dispatch the Redux action here for adding a new topic\n//           dispatch(fetchTopics(returnedTopic));\n//         } else {\n  \n//         }\n    \n//         setShowForm(false);\n//         setEditingTopic(null);\n//         fetchTopics();  // Refresh the list of topics\n//       } catch (error) {\n//         console.error('Error submitting topic:', error);\n//       }\n//     };\n\n\n// // Inside your component where topic editing is handled\n// const handleUpdateTopic = async (topicId, updatedTopicData) => {\n//   const result = await dispatch(editTopic(topicId, updatedTopicData));\n\n//   if (!result.errors) {\n//       // For example, you could redirect to the topic list page or close the modal/form\n//       console.log('Topic updated successfully');\n//       // Redirect or update the state to reflect the changes\n//   } else {\n//       // Show error messages to the user\n//       console.error('Failed to update topic:', result.errors);\n//   }\n// };\n\n    \n  \n//     // const handleDeleteTopic = async (topicId) => {\n//     //   try {\n//     //     const response = await fetch(`/api/topics/${topicId}`, { method: 'DELETE' });\n//     //     if (!response.ok) throw new Error('Network response was not ok');\n    \n//     //     // Dispatch fetchTopics again to refresh the list\n//     //     dispatch(fetchTopics());\n//     //   } catch (error) {\n//     //     console.error('Error deleting topic:', error);\n//     //   }\n//     // };\n    \n\n//     const handleDeleteTopic = async (topicId) => {\n//       try {\n//         const response = await fetch(`/api/topics/${topicId}`, { method: 'DELETE' });\n//         if (!response.ok) throw new Error('Network response was not ok');\n//         dispatch(removeTopic(topicId));\n//       } catch (error) {\n//         console.error('Error deleting topic:', error);\n//       }\n//     };\n    \n\n//     const handleEditClick = (topic) => {\n//       setEditingTopic(topic);\n//       setShowForm(true);\n//   };\n  \n\n//     return (\n//         <div>\n//             <h1>Topics</h1>\n//             <button onClick={() => setShowForm(true)}>Create New Topic</button>\n//             {showForm && (\n//     <TopicForm\n//         existingTopic={editingTopic}\n//         onSubmit={handleCreateOrUpdateTopic}\n//         onCancel={() => {\n//             setShowForm(false);\n//             setEditingTopic(null);\n//         }}\n//     />\n// )}\n\n//             <ul>\n//                 {topics.length > 0 ? (\n//                     topics.map(topic => (\n//                         <Topic\n//                             key={topic.id}\n//                             topic={topic}\n//                             onEdit={handleEditClick}\n//                             onDelete={handleDeleteTopic}\n//                         />\n//                     ))\n//                 ) : (\n//                     <p>Loading topics...</p>\n//                 )}\n//             </ul>\n//         </div>\n//     );\n// };\n\n// export default TopicList;\n\n\n\nimport React, { useState, useEffect } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport Topic from './Topic';\nimport TopicForm from './TopicForm';\nimport { fetchTopics, editTopic, createTopic, removeTopic } from '../../store/topics';\n\nconst TopicList = () => {\n    const dispatch = useDispatch();\n    const topics = useSelector(state => Object.values(state.topics));\n    const [showForm, setShowForm] = useState(false);\n    const [editingTopic, setEditingTopic] = useState(null);\n\n    useEffect(() => {\n        dispatch(fetchTopics());\n    }, [dispatch]);\n\n    const handleCreateTopic = async (topicData) => {\n        try {\n            const res = await dispatch(createTopic(topicData));\n            if (!res.errors) {\n                setShowForm(false);\n                dispatch(fetchTopics());\n            } else {\n                console.error('Failed to create topic:', res.errors);\n            }\n        } catch (error) {\n            console.error('Error creating topic:', error);\n        }\n    };\n\n    const handleEditTopic = async (topicData) => {\n        try {\n            const res = await dispatch(editTopic(editingTopic.id, topicData));\n            if (!res.errors) {\n                setShowForm(false);\n                setEditingTopic(null);\n                dispatch(fetchTopics());\n            } else {\n                console.error('Failed to update topic:', res.errors);\n            }\n        } catch (error) {\n            console.error('Error updating topic:', error);\n        }\n    };\n\n    const handleDeleteTopic = async (topicId) => {\n        try {\n            const response = await fetch(`/api/topics/${topicId}`, { method: 'DELETE' });\n            if (!response.ok) throw new Error('Network response was not ok');\n            dispatch(removeTopic(topicId));\n        } catch (error) {\n            console.error('Error deleting topic:', error);\n        }\n    };\n\n    const handleEditClick = (topic) => {\n        setEditingTopic(topic);\n        setShowForm(true);\n    };\n\n    return (\n        <div>\n            <h1>Topics</h1>\n            <button onClick={() => {\n              setShowForm(true);\n              setEditingTopic(null); // Reset editing topic\n            }}>\n              Create New Topic\n            </button>\n            {showForm && (\n                <TopicForm\n                    existingTopic={editingTopic}\n                    onSubmit={editingTopic ? handleEditTopic : handleCreateTopic}\n                    onCancel={() => {\n                        setShowForm(false);\n                        setEditingTopic(null);\n                    }}\n                />\n            )}\n\n            <ul>\n                {topics.length > 0 ? (\n                    topics.map(topic => (\n                        <Topic\n                            key={topic.id}\n                            topic={topic}\n                            onEdit={handleEditClick}\n                        />\n                    ))\n                ) : (\n                    <p>Loading topics...</p>\n                )}\n            </ul>\n        </div>\n    );\n};\n\nexport default TopicList;\n"],"mappings":";;AAAA;AACA;;AAGA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAGA;;AAgCA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAKA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAaA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAGA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAIA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAGA;AACA;AACA;AACA;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA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"},"metadata":{},"sourceType":"module"}